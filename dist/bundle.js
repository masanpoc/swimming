(()=>{var e,t,n,r,a,l,o,i={242:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,l=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(l.push(r.value),!t||l.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return l}}(e,t)||a(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}n.d(t,{Z:()=>fr});var o=n(294);function i(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n(697);var c=o.createContext(null);var s=function(e){e()},f=function(){return s},d={notify:function(){}};var p=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=d,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=f(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,a=n={callback:e,next:null,prev:n};return a.prev?a.prev.next=a:t=a,function(){r&&null!==t&&(r=!1,a.next?a.next.prev=a.prev:n=a.prev,a.prev?a.prev.next=a.next:t=a.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=d)},e}(),m="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?o.useLayoutEffect:o.useEffect;const h=function(e){var t=e.store,n=e.context,r=e.children,a=(0,o.useMemo)((function(){var e=new p(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=(0,o.useMemo)((function(){return t.getState()}),[t]);m((function(){var e=a.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,l]);var i=n||c;return o.createElement(i.Provider,{value:a},r)};n(679),n(864);function y(){return(0,o.useContext)(c)}function v(e){void 0===e&&(e=c);var t=e===c?y:function(){return(0,o.useContext)(e)};return function(){return t().store}}var b=v();function g(e){void 0===e&&(e=c);var t=e===c?b:v(e);return function(){return t().dispatch}}var k=g(),w=function(e,t){return e===t};function E(e){void 0===e&&(e=c);var t=e===c?y:function(){return(0,o.useContext)(e)};return function(e,n){void 0===n&&(n=w);var r=t(),a=function(e,t,n,r){var a,l=(0,o.useReducer)((function(e){return e+1}),0)[1],i=(0,o.useMemo)((function(){return new p(n,r)}),[n,r]),u=(0,o.useRef)(),c=(0,o.useRef)(),s=(0,o.useRef)(),f=(0,o.useRef)(),d=n.getState();try{if(e!==c.current||d!==s.current||u.current){var h=e(d);a=void 0!==f.current&&t(h,f.current)?f.current:h}else a=f.current}catch(e){throw u.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+u.current.stack+"\n\n"),e}return m((function(){c.current=e,s.current=d,f.current=a,u.current=void 0})),m((function(){function e(){try{var e=n.getState(),r=c.current(e);if(t(r,f.current))return;f.current=r,s.current=e}catch(e){u.current=e}l()}return i.onStateChange=e,i.trySubscribe(),e(),function(){return i.tryUnsubscribe()}}),[n,i]),a}(e,n,r.store,r.subscription);return(0,o.useDebugValue)(a),a}}var x,S=E(),_=n(935);function C(e,t){return e===t}function O(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,a=0;a<r;a++)if(!e(t[a],n[a]))return!1;return!0}function N(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}x=_.unstable_batchedUpdates,s=x;!function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r]}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:C,n=null,r=null;return function(){return O(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}}));function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function j(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var M="function"==typeof Symbol&&Symbol.observable||"@@observable",L=function(){return Math.random().toString(36).substring(7).split("").join(".")},I={INIT:"@@redux/INIT"+L(),REPLACE:"@@redux/REPLACE"+L(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+L()}};function A(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function D(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(j(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(j(1));return n(D)(e,t)}if("function"!=typeof e)throw new Error(j(2));var a=e,l=t,o=[],i=o,u=!1;function c(){i===o&&(i=o.slice())}function s(){if(u)throw new Error(j(3));return l}function f(e){if("function"!=typeof e)throw new Error(j(4));if(u)throw new Error(j(5));var t=!0;return c(),i.push(e),function(){if(t){if(u)throw new Error(j(6));t=!1,c();var n=i.indexOf(e);i.splice(n,1),o=null}}}function d(e){if(!A(e))throw new Error(j(7));if(void 0===e.type)throw new Error(j(8));if(u)throw new Error(j(9));try{u=!0,l=a(l,e)}finally{u=!1}for(var t=o=i,n=0;n<t.length;n++){(0,t[n])()}return e}function p(e){if("function"!=typeof e)throw new Error(j(10));a=e,d({type:I.REPLACE})}function m(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(j(11));function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[M]=function(){return this},e}return d({type:I.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:p})[M]=m,r}function z(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];0,"function"==typeof e[a]&&(n[a]=e[a])}var l,o=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:I.INIT}))throw new Error(j(12));if(void 0===n(void 0,{type:I.PROBE_UNKNOWN_ACTION()}))throw new Error(j(13))}))}(n)}catch(e){l=e}return function(e,t){if(void 0===e&&(e={}),l)throw l;for(var r=!1,a={},i=0;i<o.length;i++){var u=o[i],c=n[u],s=e[u],f=c(s,t);if(void 0===f){t&&t.type;throw new Error(j(14))}a[u]=f,r=r||f!==s}return(r=r||o.length!==Object.keys(e).length)?a:e}}function R(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function F(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(j(15))},a={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},l=t.map((function(e){return e(a)}));return r=R.apply(void 0,l)(n.dispatch),T(T({},n),{},{dispatch:r})}}}function q(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(a){return"function"==typeof a?a(n,r,e):t(a)}}}}var U=q();U.withExtraArgument=q;const B=U;function V(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function H(e){return!!e&&!!e[Le]}function $(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===Ie}(e)||Array.isArray(e)||!!e[Me]||!!e.constructor[Me]||Z(e)||J(e))}function W(e,t,n){void 0===n&&(n=!1),0===Q(e)?(n?Object.keys:Ae)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function Q(e){var t=e[Le];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:Z(e)?2:J(e)?3:0}function K(e,t){return 2===Q(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function X(e,t){return 2===Q(e)?e.get(t):e[t]}function Y(e,t,n){var r=Q(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function G(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function Z(e){return Ne&&e instanceof Map}function J(e){return Pe&&e instanceof Set}function ee(e){return e.o||e.t}function te(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=De(e);delete t[Le];for(var n=Ae(t),r=0;r<n.length;r++){var a=n[r],l=t[a];!1===l.writable&&(l.writable=!0,l.configurable=!0),(l.get||l.set)&&(t[a]={configurable:!0,writable:!0,enumerable:l.enumerable,value:e[a]})}return Object.create(Object.getPrototypeOf(e),t)}function ne(e,t){return void 0===t&&(t=!1),ae(e)||H(e)||!$(e)||(Q(e)>1&&(e.set=e.add=e.clear=e.delete=re),Object.freeze(e),t&&W(e,(function(e,t){return ne(t,!0)}),!0)),e}function re(){V(2)}function ae(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function le(e){var t=ze[e];return t||V(18,e),t}function oe(e,t){ze[e]||(ze[e]=t)}function ie(){return Ce}function ue(e,t){t&&(le("Patches"),e.u=[],e.s=[],e.v=t)}function ce(e){se(e),e.p.forEach(de),e.p=null}function se(e){e===Ce&&(Ce=e.l)}function fe(e){return Ce={p:[],l:Ce,h:e,m:!0,_:0}}function de(e){var t=e[Le];0===t.i||1===t.i?t.j():t.O=!0}function pe(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.g||le("ES5").S(t,e,r),r?(n[Le].P&&(ce(t),V(4)),$(e)&&(e=me(t,e),t.l||ye(t,e)),t.u&&le("Patches").M(n[Le],e,t.u,t.s)):e=me(t,n,[]),ce(t),t.u&&t.v(t.u,t.s),e!==je?e:void 0}function me(e,t,n){if(ae(t))return t;var r=t[Le];if(!r)return W(t,(function(a,l){return he(e,r,t,a,l,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return ye(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var a=4===r.i||5===r.i?r.o=te(r.k):r.o;W(3===r.i?new Set(a):a,(function(t,l){return he(e,r,a,t,l,n)})),ye(e,a,!1),n&&e.u&&le("Patches").R(r,n,e.u,e.s)}return r.o}function he(e,t,n,r,a,l){if(H(a)){var o=me(e,a,l&&t&&3!==t.i&&!K(t.D,r)?l.concat(r):void 0);if(Y(n,r,o),!H(o))return;e.m=!1}if($(a)&&!ae(a)){if(!e.h.F&&e._<1)return;me(e,a),t&&t.A.l||ye(e,a)}}function ye(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&ne(t,n)}function ve(e,t){var n=e[Le];return(n?ee(n):e)[t]}function be(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function ge(e){e.P||(e.P=!0,e.l&&ge(e.l))}function ke(e){e.o||(e.o=te(e.t))}function we(e,t,n){var r=Z(t)?le("MapSet").N(t,n):J(t)?le("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:ie(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},a=r,l=Re;n&&(a=[r],l=Fe);var o=Proxy.revocable(a,l),i=o.revoke,u=o.proxy;return r.k=u,r.j=i,u}(t,n):le("ES5").J(t,n);return(n?n.A:ie()).p.push(r),r}function Ee(e){return H(e)||V(22,e),function e(t){if(!$(t))return t;var n,r=t[Le],a=Q(t);if(r){if(!r.P&&(r.i<4||!le("ES5").K(r)))return r.t;r.I=!0,n=xe(t,a),r.I=!1}else n=xe(t,a);return W(n,(function(t,a){r&&X(r.t,t)===a||Y(n,t,e(a))})),3===a?new Set(n):n}(e)}function xe(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return te(e)}function Se(){function e(e,t){var n=a[e];return n?n.enumerable=t:a[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Le];return Re.get(t,e)},set:function(t){var n=this[Le];Re.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var a=e[t][Le];if(!a.P)switch(a.i){case 5:r(a)&&ge(a);break;case 4:n(a)&&ge(a)}}}function n(e){for(var t=e.t,n=e.k,r=Ae(n),a=r.length-1;a>=0;a--){var l=r[a];if(l!==Le){var o=t[l];if(void 0===o&&!K(t,l))return!0;var i=n[l],u=i&&i[Le];if(u?u.t!==o:!G(i,o))return!0}}var c=!!t[Le];return r.length!==Ae(t).length+(c?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var a={};oe("ES5",{J:function(t,n){var r=Array.isArray(t),a=function(t,n){if(t){for(var r=Array(n.length),a=0;a<n.length;a++)Object.defineProperty(r,""+a,e(a,!0));return r}var l=De(n);delete l[Le];for(var o=Ae(l),i=0;i<o.length;i++){var u=o[i];l[u]=e(u,t||!!l[u].enumerable)}return Object.create(Object.getPrototypeOf(n),l)}(r,t),l={i:r?5:4,A:n?n.A:ie(),P:!1,I:!1,D:{},l:n,t,k:a,o:null,O:!1,C:!1};return Object.defineProperty(a,Le,{value:l,writable:!0}),a},S:function(e,n,a){a?H(n)&&n[Le].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Le];if(n){var a=n.t,l=n.k,o=n.D,i=n.i;if(4===i)W(l,(function(t){t!==Le&&(void 0!==a[t]||K(a,t)?o[t]||e(l[t]):(o[t]=!0,ge(n)))})),W(a,(function(e){void 0!==l[e]||K(l,e)||(o[e]=!1,ge(n))}));else if(5===i){if(r(n)&&(ge(n),o.length=!0),l.length<a.length)for(var u=l.length;u<a.length;u++)o[u]=!1;else for(var c=a.length;c<l.length;c++)o[c]=!0;for(var s=Math.min(l.length,a.length),f=0;f<s;f++)void 0===o[f]&&e(l[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}var _e,Ce,Oe="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Ne="undefined"!=typeof Map,Pe="undefined"!=typeof Set,Te="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,je=Oe?Symbol.for("immer-nothing"):((_e={})["immer-nothing"]=!0,_e),Me=Oe?Symbol.for("immer-draftable"):"__$immer_draftable",Le=Oe?Symbol.for("immer-state"):"__$immer_state",Ie=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),Ae="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,De=Object.getOwnPropertyDescriptors||function(e){var t={};return Ae(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},ze={},Re={get:function(e,t){if(t===Le)return e;var n=ee(e);if(!K(n,t))return function(e,t,n){var r,a=be(t,n);return a?"value"in a?a.value:null===(r=a.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!$(r)?r:r===ve(e.t,t)?(ke(e),e.o[t]=we(e.A.h,r,e)):r},has:function(e,t){return t in ee(e)},ownKeys:function(e){return Reflect.ownKeys(ee(e))},set:function(e,t,n){var r=be(ee(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var a=ve(ee(e),t),l=null==a?void 0:a[Le];if(l&&l.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(G(n,a)&&(void 0!==n||K(e.t,t)))return!0;ke(e),ge(e)}return e.o[t]===n&&"number"!=typeof n||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==ve(e.t,t)||t in e.t?(e.D[t]=!1,ke(e),ge(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=ee(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){V(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){V(12)}},Fe={};W(Re,(function(e,t){Fe[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Fe.deleteProperty=function(e,t){return Re.deleteProperty.call(this,e[0],t)},Fe.set=function(e,t,n){return Re.set.call(this,e[0],t,n,e[0])};var qe=new(function(){function e(e){var t=this;this.g=Te,this.F=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var a=n;n=e;var l=t;return function(e){var t=this;void 0===e&&(e=a);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return l.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(o))}))}}var o;if("function"!=typeof n&&V(6),void 0!==r&&"function"!=typeof r&&V(7),$(e)){var i=fe(t),u=we(t,e,void 0),c=!0;try{o=n(u),c=!1}finally{c?ce(i):se(i)}return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(e){return ue(i,r),pe(e,i)}),(function(e){throw ce(i),e})):(ue(i,r),pe(o,i))}if(!e||"object"!=typeof e){if((o=n(e))===je)return;return void 0===o&&(o=e),t.F&&ne(o,!0),o}V(21,e)},this.produceWithPatches=function(e,n){return"function"==typeof e?function(n){for(var r=arguments.length,a=Array(r>1?r-1:0),l=1;l<r;l++)a[l-1]=arguments[l];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(a))}))}:[t.produce(e,n,(function(e,t){r=e,a=t})),r,a];var r,a},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){$(e)||V(8),H(e)&&(e=Ee(e));var t=fe(this),n=we(this,e,void 0);return n[Le].C=!0,se(t),n},t.finishDraft=function(e,t){var n=(e&&e[Le]).A;return ue(n,t),pe(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!Te&&V(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var a=le("Patches").$;return H(e)?a(e,t):this.produce(e,(function(e){return a(e,t.slice(n+1))}))},e}()),Ue=qe.produce;qe.produceWithPatches.bind(qe),qe.setAutoFreeze.bind(qe),qe.setUseProxies.bind(qe),qe.applyPatches.bind(qe),qe.createDraft.bind(qe),qe.finishDraft.bind(qe);const Be=Ue;var Ve,He=(Ve=function(e,t){return(Ve=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Ve(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),$e=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},We=Object.defineProperty,Qe=Object.prototype.hasOwnProperty,Ke=Object.getOwnPropertySymbols,Xe=Object.prototype.propertyIsEnumerable,Ye=function(e,t,n){return t in e?We(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},Ge=function(e,t){for(var n in t||(t={}))Qe.call(t,n)&&Ye(e,n,t[n]);if(Ke)for(var r=0,a=Ke(t);r<a.length;r++){n=a[r];Xe.call(t,n)&&Ye(e,n,t[n])}return e},Ze="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?R:R.apply(null,arguments)};"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;function Je(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var et=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var a=e.apply(this,n)||this;return Object.setPrototypeOf(a,t.prototype),a}return He(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,$e([void 0],e[0].concat(this)))):new(t.bind.apply(t,$e([void 0],e.concat(this))))},t}(Array);function tt(){return function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new et);n&&(!function(e){return"boolean"==typeof e}(n)?r.push(B.withExtraArgument(n.extraArgument)):r.push(B));0;return r}(e)}}function nt(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var a=t.apply(void 0,n);if(!a)throw new Error("prepareAction did not return an object");return Ge(Ge({type:e,payload:a.payload},"meta"in a&&{meta:a.meta}),"error"in a&&{error:a.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function rt(e){var t,n={},r=[],a={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,a},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),a},addDefaultCase:function(e){return t=e,a}};return e(a),[n,r,t]}function at(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var r=e.reducers||{},a="function"==typeof e.extraReducers?rt(e.extraReducers):[e.extraReducers],l=a[0],o=void 0===l?{}:l,i=a[1],u=void 0===i?[]:i,c=a[2],s=void 0===c?void 0:c,f=Object.keys(r),d={},p={},m={};f.forEach((function(e){var n,a,l=r[e],o=function(e,t){return e+"/"+t}(t,e);"reducer"in l?(n=l.reducer,a=l.prepare):n=l,d[e]=n,p[o]=n,m[e]=a?nt(o,a):nt(o)}));var h=function(e,t,n,r){void 0===n&&(n=[]),Se();var a="function"==typeof t?rt(t):[t,n,r],l=a[0],o=a[1],i=a[2],u=Be(e,(function(){}));return function(e,t){void 0===e&&(e=u);var n=$e([l[t.type]],o.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[i]),n.reduce((function(e,n){if(n){var r;if(H(e))return void 0===(r=n(e,t))?e:r;if($(e))return Be(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}}(n,Ge(Ge({},o),p),u,s);return{name:t,reducer:h,actions:m,caseReducers:d}}var lt=n(877);const ot=[{id:(0,lt.v4)(),name:"1 arm front - lateral kick fins",level:3,stroke:"freestyle",block:["main","technique"],muscle:["legs","abs"],material:["fins"]},{id:(0,lt.v4)(),name:"Freestyle kick",level:1,stroke:"freestyle",block:["technique","warmup","cooldown"],muscle:["legs"],material:["kickboard"]},{id:(0,lt.v4)(),name:"Medley",level:4,stroke:"all",block:["main"],muscle:["legs","abs","arms","pecs","back"],material:[]},{id:(0,lt.v4)(),name:"Medley with fins",level:4,stroke:"all",block:["main","warmup"],muscle:["legs","abs","arms","pecs","back"],material:["fins"]},{id:(0,lt.v4)(),name:"Medley kick",level:3,stroke:"all",block:["main","warmup","technique"],muscle:["legs","abs","arms","pecs","back"],material:[]},{id:(0,lt.v4)(),name:"Breaststroke arms with butterfly kicks",level:3,stroke:"breaststroke",block:["warmup","technique"],muscle:["legs","abs","pecs"],material:[]},{id:(0,lt.v4)(),name:"Dolphin kick underwater with fins",level:5,stroke:"butterfly",block:["technique","main"],muscle:["legs","abs"],material:["fins"]},{id:(0,lt.v4)(),name:"Closed-fist Freestyle",level:2,stroke:"freestyle",block:["warmup","technique"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle with 2 strokes per 6 kicks",level:2,stroke:"freestyle",block:["warmup","technique","main","cooldown"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle with strong entry&catch in water",level:2,stroke:"freestyle",block:["warmup","technique","main","cooldown"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle with strong pull in water",level:2,stroke:"freestyle",block:["warmup","technique","main","cooldown"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle with strong push in water",level:2,stroke:"freestyle",block:["warmup","technique","main","cooldown"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle with open waters technique",level:4,stroke:"freestyle",block:["warmup","technique","main","cooldown"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Head-up Freestyle",level:3,stroke:"freestyle",block:["technique","technique"],muscle:["arms","back","abs"],material:[]},{id:(0,lt.v4)(),name:"Underwater Freestyle with Fins",level:5,stroke:"freestyle",block:["main"],muscle:["arms","back","legs","abs"],material:["fins"]},{id:(0,lt.v4)(),name:"Hand-drag Drill Freestyle",level:2,stroke:"freestyle",block:["warmup","technique"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle with Dolphin Kicks (at the end of stroke cycle)",level:4,stroke:"freestyle",block:["technique","main"],muscle:["arms","abs","pecs","back"],material:[]},{id:(0,lt.v4)(),name:"Sculling with pull-buoy freestyle",level:2,stroke:"freestyle",block:["technique"],muscle:["arms","back","pecs"],material:["pullbuoy"]},{id:(0,lt.v4)(),name:"Freestyle with pull-buoy between legs",level:1,stroke:"freestyle",block:["warmup","technique","cooldown"],muscle:["arms","back"],material:["pullbuoy"]},{id:(0,lt.v4)(),name:"Freestyle slowing down rhythm",level:1,stroke:"freestyle",block:["cooldown"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Dip (tension) & Kick Freestyle (f+p+s)",level:5,stroke:"freestyle",block:["main","technique"],muscle:["arms","abs","back","pecs","legs"],material:["fins","paddles","snorkel"]},{id:(0,lt.v4)(),name:"Catch-Up Freestyle",level:1,stroke:"freestyle",block:["warmup","technique"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Catch-Up Freestyle using kickboard upfront",level:1,stroke:"freestyle",block:["warmup","technique"],muscle:["arms","back"],material:["kickboard"]},{id:(0,lt.v4)(),name:"Freestyle 6 kicks on side, 1 stroke (switching sides)",level:1,stroke:"freestyle",block:["warmup","technique"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle short retraction with 1 paddle + snorkel",level:4,stroke:"freestyle",block:["technique","main"],muscle:["arms","back","pecs","abs"],material:["paddles","snorkel"]},{id:(0,lt.v4)(),name:"Breaststroke - Head above water",level:1,stroke:"breaststroke",block:["technique"],muscle:["abs","arms","pecs","legs"],material:[]},{id:(0,lt.v4)(),name:"Breaststroke with freestyle legs",level:2,stroke:"breaststroke",block:["technique","warmup"],muscle:["abs","arms"],material:[]},{id:(0,lt.v4)(),name:"Breaststroke sliding 3s",level:1,stroke:"breaststroke",block:["technique","cooldown"],muscle:["abs","legs","pecs"],material:[]},{id:(0,lt.v4)(),name:"Breaststroke with butterfly legs",level:3,stroke:"breaststroke",block:["technique","warmup"],muscle:["abs","arms","legs"],material:[]},{id:(0,lt.v4)(),name:"Freestyle kick with fins",level:1,stroke:"freestyle",block:["warmup","technique","main"],muscle:["legs"],material:["fins","kickboard"]},{id:(0,lt.v4)(),name:"Breaststroke with leg kick variation 3x(freestyle/butterfly/breaststroke)",level:3,stroke:"breaststroke",block:["warmup","technique"],muscle:["arms","abs","legs"],material:[]},{id:(0,lt.v4)(),name:"Breaststroke Two Leg Kick",level:1,stroke:"breaststroke",block:["technique","warmup"],muscle:["abs","arms","legs"],material:[]},{id:(0,lt.v4)(),name:"Butterfly cycles every 3/4 leg kicks with fins",level:4,stroke:"butterfly",block:["technique","main"],muscle:["abs","arms","legs","back"],material:["fins"]},{id:(0,lt.v4)(),name:"Butterfly one arm only",level:3,stroke:"butterfly",block:["technique","warmup"],muscle:["abs","arms","legs","back"],material:[]},{id:(0,lt.v4)(),name:"Butterfly with breastroke legs (lateral breathing)",level:3,stroke:"butterfly",block:["technique","warmup"],muscle:["abs","arms","legs","back"],material:[]},{id:(0,lt.v4)(),name:"Butterfly with underwater recovery",level:5,stroke:"butterfly",block:["technique"],muscle:["abs","arms","legs","back"],material:[]},{id:(0,lt.v4)(),name:"Butterfly with clenched fists",level:4,stroke:"butterfly",block:["technique","warmup"],muscle:["abs","arms","legs","back"],material:[]},{id:(0,lt.v4)(),name:"Butterfly with one kick (at the end)",level:3,stroke:"butterfly",block:["technique","warmup"],muscle:["abs","arms","legs","back"],material:[]},{id:(0,lt.v4)(),name:"Backstroke using a kickboard & alterning stroke",level:2,stroke:"backstroke",block:["technique","warmup"],muscle:["arms","back","legs"],material:["kickboard"]},{id:(0,lt.v4)(),name:"Backstroke one arm only",level:1,stroke:"backstroke",block:["technique","warmup"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Backstroke with breaststroke legs",level:3,stroke:"backstroke",block:["technique"],muscle:["arms","back","legs"],material:[]},{id:(0,lt.v4)(),name:"Backstroke with pullbuoy in forehead",level:3,stroke:"backstroke",block:["technique"],muscle:["arms","back","abs"],material:["pullbuoy"]},{id:(0,lt.v4)(),name:"Backstroke with fists clenched",level:2,stroke:"backstroke",block:["technique","warmup"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Backstroke front crossovers 3 strokes + 3 cycles",level:3,stroke:"backstroke",block:["technique"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Backstroke lifting pullbuoy (slightly above knees) arm extended ",level:2,stroke:"backstroke",block:["technique"],muscle:["arms","back"],material:["pullbuoy"]},{id:(0,lt.v4)(),name:"Backstroke with pullbuoy between legs",level:1,stroke:"backstroke",block:["technique","warmup"],muscle:["arms","back"],material:["pullbuoy"]},{id:(0,lt.v4)(),name:"Freestyle with pullbuoy between legs",level:1,stroke:"backstroke",block:["technique","warmup"],muscle:["arms","back"],material:["pullbuoy"]},{id:(0,lt.v4)(),name:"Backstroke, alternating one stroke + pause 1 second",level:2,stroke:"backstroke",block:["technique","warmup"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Backstroke: alternating seated + two armed",level:3,stroke:"backstroke",block:["technique"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Backstroke swap over using pullbuoy (hands)",level:4,stroke:"backstroke",block:["technique"],muscle:["arms","back","abs"],material:["pullbuoy"]},{id:(0,lt.v4)(),name:"Freestyle breathing every 2 strokes",level:1,stroke:"freestyle",block:["main"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Warmup freestyle (comfortable pace)",level:1,stroke:"freestyle",block:["warmup"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Warmup backstroke (comfortable pace)",level:1,stroke:"backstroke",block:["warmup"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Warmup breaststroke (comfortable pace)",level:1,stroke:"breaststroke",block:["warmup"],muscle:["pecs","abs","legs"],material:[]},{id:(0,lt.v4)(),name:"Warmup butterfly (comfortable pace)",level:1,stroke:"butterfly",block:["warmup"],muscle:["arms","back","pecs","legs","abs"],material:[]},{id:(0,lt.v4)(),name:"Warmup medley (comfortable pace)",level:1,stroke:"all",block:["warmup"],muscle:["arms","back","pecs","legs","abs"],material:[]},{id:(0,lt.v4)(),name:"Freestyle breathing every 3 strokes",level:2,stroke:"freestyle",block:["main"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle with ultra-fast flipturns",level:3,stroke:"freestyle",block:["main"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle balanced progression",level:1,stroke:"freestyle",block:["main"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle hypoxic",level:4,stroke:"freestyle",block:["main"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Freestyle with paddles",level:3,stroke:"freestyle",block:["main"],muscle:["arms","back","pecs"],material:["paddles"]},{id:(0,lt.v4)(),name:"Freestyle with fins",level:2,stroke:"freestyle",block:["main"],muscle:["arms","back","legs"],material:["fins"]},{id:(0,lt.v4)(),name:"Freestyle with paddles and fins",level:3,stroke:"freestyle",block:["main"],muscle:["arms","back","pecs","legs"],material:["paddles","fins"]},{id:(0,lt.v4)(),name:"Freestyle with paddles and snorkel",level:3,stroke:"freestyle",block:["main"],muscle:["arms","back","pecs"],material:["paddles","snorkel"]},{id:(0,lt.v4)(),name:"Freestyle with snorkel and fins",level:3,stroke:"freestyle",block:["main"],muscle:["arms","back","legs"],material:["fins","snorkel"]},{id:(0,lt.v4)(),name:"Freestyle with snorkel",level:3,stroke:"freestyle",block:["cooldown"],muscle:["arms","back"],material:["snorkel"]},{id:(0,lt.v4)(),name:"Backstroke",level:1,stroke:"backstroke",block:["main"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Backstroke 6 kicks per 2 strokes",level:1,stroke:"backstroke",block:["technique","warmup"],muscle:["legs"],material:[]},{id:(0,lt.v4)(),name:"Backstroke with fins",level:1,stroke:"backstroke",block:["main"],muscle:["legs","back"],material:["fins"]},{id:(0,lt.v4)(),name:"Backstroke with paddles",level:2,stroke:"backstroke",block:["main","technique"],muscle:["arms","back"],material:["paddles"]},{id:(0,lt.v4)(),name:"Backstroke slowing down rhythm",level:1,stroke:"backstroke",block:["cooldown"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Double-Arm Backstroke, 3s pause",level:1,stroke:"backstroke",block:["technique"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Breaststroke",level:1,stroke:"breaststroke",block:["main"],muscle:["arms","back","pecs"],material:[]},{id:(0,lt.v4)(),name:"Breaststroke slowing down rhythm",level:1,stroke:"breaststroke",block:["cooldown"],muscle:["pecs","abs","legs"],material:[]},{id:(0,lt.v4)(),name:"Butterfly",level:5,stroke:"butterfly",block:["main"],muscle:["arms","back","abs"],material:[]},{id:(0,lt.v4)(),name:"Butterfly with fins",level:5,stroke:"butterfly",block:["main"],muscle:["arms","back","abs"],material:["fins"]},{id:(0,lt.v4)(),name:"Backstroke dolphin kick with fins",level:4,stroke:"backstroke",block:["main","technique"],muscle:["legs","abs"],material:["fins"]},{id:(0,lt.v4)(),name:"Breaststroke kicking",level:1,stroke:"breaststroke",block:["cooldown","warmup","technique"],muscle:["legs"],material:["kickboard"]},{id:(0,lt.v4)(),name:"Bow&Arrow freestyle with fins, 6 kicks",level:4,stroke:"freestyle",block:["main","technique"],muscle:["legs","arms","back","abs"],material:["fins"]},{id:(0,lt.v4)(),name:"Kick switch - no arms",level:3,stroke:"freestyle",block:["technique"],muscle:["legs"],material:[]},{id:(0,lt.v4)(),name:"Singapore Freestyle (one stroke, one dog arm) (f+s)",level:4,stroke:"freestyle",block:["warmup","technique"],muscle:["arms","back"],material:["fins, snorkel"]},{id:(0,lt.v4)(),name:"Freestyle touching kickboard between legs",level:1,stroke:"freestyle",block:["warmup","cooldown","technique"],muscle:["arms","back"],material:["kickboard"]},{id:(0,lt.v4)(),name:"Freestyle repeating (3 strokes, 6 kicks on side)",level:2,stroke:"freestyle",block:["warmup","cooldown","technique"],muscle:["arms","back"],material:["kickboard"]},{id:(0,lt.v4)(),name:"Freestyle with pull-buoy between ankles",level:2,stroke:"freestyle",block:["warmup","technique"],muscle:["abs","arms","back"],material:["pullbuoy"]},{id:(0,lt.v4)(),name:"Freestyle with hand extension/sliding 3 seconds",level:1,stroke:"freestyle",block:["warmup","technique","cooldown"],muscle:["arms","back"],material:[]},{id:(0,lt.v4)(),name:"Finger drags surface",level:3,stroke:"freestyle",block:["warmup","cooldown","technique"],muscle:["arms","back","abs"],material:[]}];function it(e){return null!=e&&"object"==typeof e&&!0===e["@@functional/placeholder"]}function ut(e){return function t(n){return 0===arguments.length||it(n)?t:e.apply(this,arguments)}}function ct(e){return function t(n,r){switch(arguments.length){case 0:return t;case 1:return it(n)?t:ut((function(t){return e(n,t)}));default:return it(n)&&it(r)?t:it(n)?ut((function(t){return e(t,r)})):it(r)?ut((function(t){return e(n,t)})):e(n,r)}}}function st(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}function ft(e,t,n){for(var r=0,a=n.length;r<a;){if(e(t,n[r]))return!0;r+=1}return!1}function dt(e,t){return Object.prototype.hasOwnProperty.call(t,e)}const pt="function"==typeof Object.is?Object.is:function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t};var mt=Object.prototype.toString;const ht=function(){return"[object Arguments]"===mt.call(arguments)?function(e){return"[object Arguments]"===mt.call(e)}:function(e){return dt("callee",e)}}();var yt=!{toString:null}.propertyIsEnumerable("toString"),vt=["constructor","valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],bt=function(){return arguments.propertyIsEnumerable("length")}(),gt=function(e,t){for(var n=0;n<e.length;){if(e[n]===t)return!0;n+=1}return!1};const kt="function"!=typeof Object.keys||bt?ut((function(e){if(Object(e)!==e)return[];var t,n,r=[],a=bt&&ht(e);for(t in e)!dt(t,e)||a&&"length"===t||(r[r.length]=t);if(yt)for(n=vt.length-1;n>=0;)dt(t=vt[n],e)&&!gt(r,t)&&(r[r.length]=t),n-=1;return r})):ut((function(e){return Object(e)!==e?[]:Object.keys(e)}));const wt=ut((function(e){return null===e?"Null":void 0===e?"Undefined":Object.prototype.toString.call(e).slice(8,-1)}));function Et(e,t,n,r){var a=st(e);function l(e,t){return xt(e,t,n.slice(),r.slice())}return!ft((function(e,t){return!ft(l,t,e)}),st(t),a)}function xt(e,t,n,r){if(pt(e,t))return!0;var a=wt(e);if(a!==wt(t))return!1;if(null==e||null==t)return!1;if("function"==typeof e["fantasy-land/equals"]||"function"==typeof t["fantasy-land/equals"])return"function"==typeof e["fantasy-land/equals"]&&e["fantasy-land/equals"](t)&&"function"==typeof t["fantasy-land/equals"]&&t["fantasy-land/equals"](e);if("function"==typeof e.equals||"function"==typeof t.equals)return"function"==typeof e.equals&&e.equals(t)&&"function"==typeof t.equals&&t.equals(e);switch(a){case"Arguments":case"Array":case"Object":if("function"==typeof e.constructor&&"Promise"===function(e){var t=String(e).match(/^function (\w*)/);return null==t?"":t[1]}(e.constructor))return e===t;break;case"Boolean":case"Number":case"String":if(typeof e!=typeof t||!pt(e.valueOf(),t.valueOf()))return!1;break;case"Date":if(!pt(e.valueOf(),t.valueOf()))return!1;break;case"Error":return e.name===t.name&&e.message===t.message;case"RegExp":if(e.source!==t.source||e.global!==t.global||e.ignoreCase!==t.ignoreCase||e.multiline!==t.multiline||e.sticky!==t.sticky||e.unicode!==t.unicode)return!1}for(var l=n.length-1;l>=0;){if(n[l]===e)return r[l]===t;l-=1}switch(a){case"Map":return e.size===t.size&&Et(e.entries(),t.entries(),n.concat([e]),r.concat([t]));case"Set":return e.size===t.size&&Et(e.values(),t.values(),n.concat([e]),r.concat([t]));case"Arguments":case"Array":case"Object":case"Boolean":case"Number":case"String":case"Date":case"Error":case"RegExp":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"ArrayBuffer":break;default:return!1}var o=kt(e);if(o.length!==kt(t).length)return!1;var i=n.concat([e]),u=r.concat([t]);for(l=o.length-1;l>=0;){var c=o[l];if(!dt(c,t)||!xt(t[c],e[c],i,u))return!1;l-=1}return!0}const St=ct((function(e,t){return xt(e,t,[],[])}));function _t(e,t){return function(e,t,n){var r,a;if("function"==typeof e.indexOf)switch(typeof t){case"number":if(0===t){for(r=1/t;n<e.length;){if(0===(a=e[n])&&1/a===r)return n;n+=1}return-1}if(t!=t){for(;n<e.length;){if("number"==typeof(a=e[n])&&a!=a)return n;n+=1}return-1}return e.indexOf(t,n);case"string":case"boolean":case"function":case"undefined":return e.indexOf(t,n);case"object":if(null===t)return e.indexOf(t,n)}for(;n<e.length;){if(St(e[n],t))return n;n+=1}return-1}(t,e,0)>=0}function Ct(e,t,n){var r,a=typeof e;switch(a){case"string":case"number":return 0===e&&1/e==-1/0?!!n._items["-0"]||(t&&(n._items["-0"]=!0),!1):null!==n._nativeSet?t?(r=n._nativeSet.size,n._nativeSet.add(e),n._nativeSet.size===r):n._nativeSet.has(e):a in n._items?e in n._items[a]||(t&&(n._items[a][e]=!0),!1):(t&&(n._items[a]={},n._items[a][e]=!0),!1);case"boolean":if(a in n._items){var l=e?1:0;return!!n._items[a][l]||(t&&(n._items[a][l]=!0),!1)}return t&&(n._items[a]=e?[!1,!0]:[!0,!1]),!1;case"function":return null!==n._nativeSet?t?(r=n._nativeSet.size,n._nativeSet.add(e),n._nativeSet.size===r):n._nativeSet.has(e):a in n._items?!!_t(e,n._items[a])||(t&&n._items[a].push(e),!1):(t&&(n._items[a]=[e]),!1);case"undefined":return!!n._items[a]||(t&&(n._items[a]=!0),!1);case"object":if(null===e)return!!n._items.null||(t&&(n._items.null=!0),!1);default:return(a=Object.prototype.toString.call(e))in n._items?!!_t(e,n._items[a])||(t&&n._items[a].push(e),!1):(t&&(n._items[a]=[e]),!1)}}const Ot=function(){function e(){this._nativeSet="function"==typeof Set?new Set:null,this._items={}}return e.prototype.add=function(e){return!Ct(e,!0,this)},e.prototype.has=function(e){return Ct(e,!1,this)},e}();const Nt=ct((function(e,t){for(var n=[],r=0,a=e.length,l=t.length,o=new Ot,i=0;i<l;i+=1)o.add(t[i]);for(;r<a;)o.add(e[r])&&(n[n.length]=e[r]),r+=1;return n}));function Pt(e,t){var n;t=t||[];var r=(e=e||[]).length,a=t.length,l=[];for(n=0;n<r;)l[l.length]=e[n],n+=1;for(n=0;n<a;)l[l.length]=t[n],n+=1;return l}function Tt(e,t){switch(e){case 0:return function(){return t.apply(this,arguments)};case 1:return function(e){return t.apply(this,arguments)};case 2:return function(e,n){return t.apply(this,arguments)};case 3:return function(e,n,r){return t.apply(this,arguments)};case 4:return function(e,n,r,a){return t.apply(this,arguments)};case 5:return function(e,n,r,a,l){return t.apply(this,arguments)};case 6:return function(e,n,r,a,l,o){return t.apply(this,arguments)};case 7:return function(e,n,r,a,l,o,i){return t.apply(this,arguments)};case 8:return function(e,n,r,a,l,o,i,u){return t.apply(this,arguments)};case 9:return function(e,n,r,a,l,o,i,u,c){return t.apply(this,arguments)};case 10:return function(e,n,r,a,l,o,i,u,c,s){return t.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}function jt(e,t){return function(){return t.call(this,e.apply(this,arguments))}}function Mt(e){return function t(n,r,a){switch(arguments.length){case 0:return t;case 1:return it(n)?t:ct((function(t,r){return e(n,t,r)}));case 2:return it(n)&&it(r)?t:it(n)?ct((function(t,n){return e(t,r,n)})):it(r)?ct((function(t,r){return e(n,t,r)})):ut((function(t){return e(n,r,t)}));default:return it(n)&&it(r)&&it(a)?t:it(n)&&it(r)?ct((function(t,n){return e(t,n,a)})):it(n)&&it(a)?ct((function(t,n){return e(t,r,n)})):it(r)&&it(a)?ct((function(t,r){return e(n,t,r)})):it(n)?ut((function(t){return e(t,r,a)})):it(r)?ut((function(t){return e(n,t,a)})):it(a)?ut((function(t){return e(n,r,t)})):e(n,r,a)}}}const Lt=Array.isArray||function(e){return null!=e&&e.length>=0&&"[object Array]"===Object.prototype.toString.call(e)};function It(e){return"[object String]"===Object.prototype.toString.call(e)}const At=ut((function(e){return!!Lt(e)||!!e&&("object"==typeof e&&(!It(e)&&(1===e.nodeType?!!e.length:0===e.length||e.length>0&&(e.hasOwnProperty(0)&&e.hasOwnProperty(e.length-1)))))}));var Dt=function(){function e(e){this.f=e}return e.prototype["@@transducer/init"]=function(){throw new Error("init not implemented on XWrap")},e.prototype["@@transducer/result"]=function(e){return e},e.prototype["@@transducer/step"]=function(e,t){return this.f(e,t)},e}();const zt=ct((function(e,t){return Tt(e.length,(function(){return e.apply(t,arguments)}))}));function Rt(e,t,n){for(var r=n.next();!r.done;){if((t=e["@@transducer/step"](t,r.value))&&t["@@transducer/reduced"]){t=t["@@transducer/value"];break}r=n.next()}return e["@@transducer/result"](t)}function Ft(e,t,n,r){return e["@@transducer/result"](n[r](zt(e["@@transducer/step"],e),t))}var qt="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator";function Ut(e,t,n){if("function"==typeof e&&(e=function(e){return new Dt(e)}(e)),At(n))return function(e,t,n){for(var r=0,a=n.length;r<a;){if((t=e["@@transducer/step"](t,n[r]))&&t["@@transducer/reduced"]){t=t["@@transducer/value"];break}r+=1}return e["@@transducer/result"](t)}(e,t,n);if("function"==typeof n["fantasy-land/reduce"])return Ft(e,t,n,"fantasy-land/reduce");if(null!=n[qt])return Rt(e,t,n[qt]());if("function"==typeof n.next)return Rt(e,t,n);if("function"==typeof n.reduce)return Ft(e,t,n,"reduce");throw new TypeError("reduce: list must be array or iterable")}const Bt=Mt(Ut);function Vt(e,t){return function(){var n=arguments.length;if(0===n)return t();var r=arguments[n-1];return Lt(r)||"function"!=typeof r[e]?t.apply(this,arguments):r[e].apply(r,Array.prototype.slice.call(arguments,0,n-1))}}const Ht=ut(Vt("tail",Mt(Vt("slice",(function(e,t,n){return Array.prototype.slice.call(n,e,t)})))(1,1/0)));function $t(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return Tt(arguments[0].length,Bt(jt,arguments[0],Ht(arguments)))}const Wt=ut((function(e){return It(e)?e.split("").reverse().join(""):Array.prototype.slice.call(e,0).reverse()}));function Qt(){if(0===arguments.length)throw new Error("compose requires at least one argument");return $t.apply(this,Wt(arguments))}function Kt(e){return e}const Xt=ut(Kt);const Yt=ct(Qt(ct((function(e,t){for(var n,r,a=new Ot,l=[],o=0;o<t.length;)n=e(r=t[o]),a.add(n)&&l.push(r),o+=1;return l}))(Xt),Pt));var Gt=at({name:"exercises",initialState:ot,reducers:{filterByLevel:function(e,t){var n=t.payload.level;return e.filter((function(e){return e.level<=n}))},filterByStroke:function(e,t){var n=t.payload.strokesTargeted;if(4==n.length)return e;var r=e.slice();r=r.filter((function(e){return!e.stroke.includes("all")}));var a=["freestyle","backstroke","breaststroke","butterfly"];return(a=Nt(a,n)).forEach((function(e){r=r.filter((function(t){return!t.stroke.includes(e)}))})),r},filterByMaterial:function(e,t){var n=t.payload.material;if(5==n.length)return e;var r=e.slice(),a=["kickboard","fins","paddles","snorkel","pullbuoy"];return(a=Nt(a,n)).forEach((function(e){r=r.filter((function(t){return!t.material.includes(e)}))})),r},resetList:function(e,t){var n=t.payload.reset,r=e.slice();return r=Yt(r,n)}}}),Zt=Gt.actions,Jt=Zt.filterByLevel,en=Zt.filterByStroke,tn=Zt.filterByMaterial,nn=Zt.resetList;const rn=Gt.reducer;function an(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function ln(e){for(var t,n=e.length;0!==n;){t=Math.floor(Math.random()*n),n--;var r=[e[t],e[n]];e[n]=r[0],e[t]=r[1]}return e}function on(e){return e[Math.floor(Math.random()*e.length)]}var un=at({name:"warmup",initialState:[],reducers:{copy_filter_select_warmupExercises:function(e,t){var n,r=t.payload.filteredExercises,a=t.payload,l=a.material,o=a.muscle,i=a.meters,u=a.level,c=[];do{n=an(1,4)}while(i/n<25);1==u&&(r.length<=5&&(n=1),r.length>5&&r.length<10&&(n=i/2>=25?2:1));var s=n;if(r=r.filter((function(e){return e.block.includes("warmup")})),l.length>0&&(l.includes("kickboard")||l.includes("pullbuoy"))){var f=r.filter((function(e){return!e.material.includes("paddles")})).filter((function(e){return!e.material.includes("fins")})).filter((function(e){return!e.material.includes("snorkel")}));f=f.filter((function(e){return e.material.some((function(e){return l.includes(e)}))})),l.filter((function(e){return"fins"!=e})),l.filter((function(e){return"paddles"!=e})),l.filter((function(e){return"snorkel"!=e})),ln(l),l.forEach((function(e){var t=0,n=f.filter((function(t){return t.material.includes(e)}));if(n.length>0&&t<1){var a=on(n),l=f.indexOf(a),o=r.findIndex((function(e){return e.name==a.name}));f.splice(l,1),r.splice(o,1),a&&c.push(a),s--,t++}}))}if(o.length>0)for(var d=an(1,2),p=r.filter((function(e){return e.muscle.some((function(e){return o.includes(e)}))})),m=0;m<d;m++)s>0&&p.length>0&&function(){var e=on(p),t=p.indexOf(e),n=r.findIndex((function(t){return t.name==e.name}));p.splice(t,1),r.splice(n,1),e&&c.push(e),s--}();for(var h=r.filter((function(e){return 0==e.material.length})),y=0;y<s;y++){var v=on(h),b=h.indexOf(v);h.splice(b,1),v&&c.push(v)}return ln(c)}}}),cn=un.actions.copy_filter_select_warmupExercises;const sn=un.reducer;var fn=at({name:"technique",initialState:[],reducers:{copy_filter_select_techniqueExercises:function(e,t){var n,r=t.payload.filteredExercises,a=t.payload,l=a.material,o=a.muscle,i=a.meters,u=a.level,c=[];do{n=an(1,3)}while(i/n<25);1==u&&(r.length<=4&&(n=1),r.length>4&&r.length<10&&(n=i/3>=25?3:i/2>=25?2:1));var s=n;if(r=r.filter((function(e){return e.block.includes("technique")})),l.length>0){var f=r.filter((function(e){return e.material.some((function(e){return l.includes(e)}))}));ln(l),l.forEach((function(e){var t=0,n=f.filter((function(t){return t.material.includes(e)}));if(n.length>0&&t<3&&s>0){var a=on(n),l=f.indexOf(a),o=r.findIndex((function(e){return e.name==a.name}));f.splice(l,1),r.splice(o,1),a&&c.push(a),s--,t++}}))}if(o.length>0)for(var d=an(1,2),p=r.filter((function(e){return e.muscle.some((function(e){return o.includes(e)}))})),m=0;m<d;m++)s>0&&p.length>0&&function(){var e=on(p),t=p.indexOf(e),n=r.findIndex((function(t){return t.name==e.name}));p.splice(t,1),r.splice(n,1),e&&c.push(e),s--}();for(var h=r.filter((function(e){return 0==e.material.length})),y=0;y<s;y++){var v=on(h),b=h.indexOf(v);h.splice(b,1),v&&c.push(v)}return ln(c)}}}),dn=fn.actions.copy_filter_select_techniqueExercises;const pn=fn.reducer;var mn=at({name:"main",initialState:[],reducers:{copy_filter_select_mainExercises:function(e,t){var n,r=t.payload.filteredExercises,a=t.payload,l=a.material,o=a.muscle,i=a.meters,u=a.level,c=[];do{n=an(1,4)}while(i/n<25);1==u&&(r.length<=4&&(n=i/2>=25&&r.length>1?2:1),r.length>4&&r.length<10&&(n=i/3>=25?3:i/2>=25?2:1));var s=n;if(r=r.filter((function(e){return e.block.includes("main")})),l.length>0){var f=r.filter((function(e){return e.material.some((function(e){return l.includes(e)}))}));ln(l),l.forEach((function(e){var t=0,n=f.filter((function(t){return t.material.includes(e)}));if(n.length>0&&t<2&&s>0){var a=on(n),l=f.indexOf(a),o=r.findIndex((function(e){return e.name==a.name}));f.splice(l,1),r.splice(o,1),a&&c.push(a),s--,t++}}))}if(o.length>0)for(var d=an(1,2),p=r.filter((function(e){return e.muscle.some((function(e){return o.includes(e)}))})),m=0;m<d;m++)s>0&&p.length>0&&function(){var e=on(p),t=p.indexOf(e),n=r.findIndex((function(t){return t.name==e.name}));p.splice(t,1),r.splice(n,1),e&&c.push(e),s--}();for(var h=r.filter((function(e){return 0==e.material.length})),y=0;y<s;y++){var v=on(h),b=h.indexOf(v);h.splice(b,1),v&&c.push(v)}return ln(c)}}}),hn=mn.actions.copy_filter_select_mainExercises;const yn=mn.reducer;var vn=at({name:"cooldown",initialState:[],reducers:{copy_filter_select_cooldownExercises:function(e,t){var n,r=t.payload.filteredExercises,a=t.payload,l=a.material,o=a.meters,i=a.level,u=[];do{n=an(1,3)}while(o/n<25);1==i&&(r.length<=4&&(n=o/2>=25&&r.length>1?2:1),r.length>4&&r.length<10&&(n=o/3>=25?3:o/2>=25?2:1));var c=n;if(r=r.filter((function(e){return e.block.includes("cooldown")})),l.length>0&&(l.includes("kickboard")||l.includes("pullbuoy")||l.includes("snorkel"))){var s=r.filter((function(e){return!e.material.includes("paddles")})).filter((function(e){return!e.material.includes("fins")}));s=s.filter((function(e){return e.material.some((function(e){return l.includes(e)}))})),l.filter((function(e){return"fins"!=e})),l.filter((function(e){return"paddles"!=e})),ln(l),l.forEach((function(e){var t=0;if(c>0&&t<1){var n=s.filter((function(t){return t.material.includes(e)}));if(n.length>0){var a=on(n),l=s.indexOf(a),o=r.findIndex((function(e){return e.name==a.name}));s.splice(l,1),r.splice(o,1),a&&u.push(a),c--,t++}}}))}for(var f=r.filter((function(e){return 0==e.material.length})),d=0;d<c;d++){var p=on(f),m=f.indexOf(p);f.splice(m,1),p&&u.push(p)}return ln(u)}}}),bn=vn.actions.copy_filter_select_cooldownExercises;const gn=vn.reducer;const kn="function"==typeof Object.assign?Object.assign:function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1,r=arguments.length;n<r;){var a=arguments[n];if(null!=a)for(var l in a)dt(l,a)&&(t[l]=a[l]);n+=1}return t};const wn=ct((function(e,t){return kn({},e,t)}));var En=at({name:"display",initialState:{form:!0,training:!1,buttons:!1},reducers:{displayHide:function(e,t){var n=t.payload,r=e;return r=wn(r,n)}}}),xn=En.actions.displayHide;const Sn=En.reducer;function _n(e,t,n){return function(){for(var r=[],a=0,l=e,o=0;o<t.length||a<arguments.length;){var i;o<t.length&&(!it(t[o])||a>=arguments.length)?i=t[o]:(i=arguments[a],a+=1),r[o]=i,it(i)||(l-=1),o+=1}return l<=0?n.apply(this,r):Tt(l,_n(e,r,n))}}const Cn=ct((function(e,t){return 1===e?ut(t):Tt(e,_n(e,[],t))}));const On=ut((function(e){return Cn(e.length,(function(){var t=0,n=arguments[0],r=arguments[arguments.length-1],a=Array.prototype.slice.call(arguments,0);return a[0]=function(){var e=n.apply(this,Pt(arguments,[t,r]));return t+=1,e},e.apply(this,a)}))}));function Nn(e){return null!=e&&"function"==typeof e["@@transducer/step"]}function Pn(e,t,n){return function(){if(0===arguments.length)return n();var r=Array.prototype.slice.call(arguments,0),a=r.pop();if(!Lt(a)){for(var l=0;l<e.length;){if("function"==typeof a[e[l]])return a[e[l]].apply(a,r);l+=1}if(Nn(a)){var o=t.apply(null,r);return o(a)}}return n.apply(this,arguments)}}const Tn=function(){return this.xf["@@transducer/init"]()},jn=function(e){return this.xf["@@transducer/result"](e)};var Mn=function(){function e(e,t){this.xf=t,this.f=e}return e.prototype["@@transducer/init"]=Tn,e.prototype["@@transducer/result"]=jn,e.prototype["@@transducer/step"]=function(e,t){return this.xf["@@transducer/step"](e,this.f(t))},e}();const Ln=ct(Pn(["fantasy-land/map","map"],ct((function(e,t){return new Mn(e,t)})),(function(e,t){switch(Object.prototype.toString.call(t)){case"[object Function]":return Cn(t.length,(function(){return e.call(this,t.apply(this,arguments))}));case"[object Object]":return Ut((function(n,r){return n[r]=e(t[r]),n}),{},kt(t));default:return function(e,t){for(var n=0,r=t.length,a=Array(r);n<r;)a[n]=e(t[n]),n+=1;return a}(e,t)}})));function In(e){return e[Math.floor(Math.random()*e.length)]}const An={25:{1:[[25]]},50:{1:[[50]],2:[[25,25]]},75:{1:[[75]],2:[[25,50]],3:[[25,25,25]]},100:{1:[[100]],2:[[50,50]],3:[[25,25,50]],4:[[25,25,25,25]]},125:{1:[[125]],2:[[25,100],[75,50]],3:[[25,25,75],[50,50,25]],4:[[25,25,25,50]]},150:{1:[[150]],2:[[75,75],[100,50]],3:[[50,50,50],[25,75,50]],4:[[25,25,50,50],[25,75,25,25]]},175:{1:[[175]],2:[[75,100],[125,50]],3:[[50,50,75],[100,50,25]],4:[[50,25,50,50],[25,75,50,25]]},200:{1:[[200]],2:[[100,100]],3:[[50,50,100]],4:[[50,50,50,50],[25,25,100,50]]},225:{1:[[225]],2:[[150,75],[100,125]],3:[[50,50,125],[100,50,75]],4:[[50,50,50,75],[25,75,75,50]]},250:{1:[[250]],2:[[150,100],[125,125]],3:[[50,100,100],[50,50,150]],4:[[50,50,75,75],[50,50,50,100]]},275:{1:[[275]],2:[[150,125],[100,175]],3:[[50,125,100],[50,75,150]],4:[[50,50,100,75],[50,50,75,100]]},300:{1:[[300]],2:[[100,200]],3:[[50,50,200],[100,100,100]],4:[[50,50,100,100]]},325:{1:[[325]],2:[[125,200]],3:[[75,100,150],[100,100,125]],4:[[50,75,100,100]]},350:{1:[[350]],2:[[150,200]],3:[[50,100,200],[100,100,150]],4:[[50,100,100,100]]},375:{1:[[375]],2:[[175,200]],3:[[100,75,200],[100,125,150]],4:[[75,100,100,100]]},400:{1:[[400]],2:[[200,200],[100,300]],3:[[100,100,200]],4:[[100,100,100,100],[50,100,50,200]]},425:{1:[[425]],2:[[225,200],[125,300]],3:[[100,125,200]],4:[[100,125,100,100],[75,100,50,200]]},450:{1:[[450]],2:[[250,200],[150,300]],3:[[100,150,200]],4:[[100,150,100,100],[100,100,50,200]]},475:{1:[[475]],2:[[225,250],[125,350]],3:[[100,125,250]],4:[[100,150,125,100],[100,100,75,200]]},500:{1:[[500]],2:[[200,300],[100,400]],3:[[200,200,100],[100,100,300]],4:[[100,100,100,200],[50,200,200,50]]},525:{1:[[525]],2:[[225,300],[125,400]],3:[[200,200,125],[125,100,300]],4:[[100,100,125,200],[75,200,200,50]]},550:{1:[[550]],2:[[250,300],[150,400]],3:[[200,200,150],[100,150,300]],4:[[100,100,150,200],[100,200,200,50]]},575:{1:[[575]],2:[[275,300],[175,400]],3:[[200,275,100],[100,175,300]],4:[[100,125,150,200],[100,200,200,75]]},600:{1:[[600]],2:[[300,300],[200,400]],3:[[200,200,200],[100,300,200]],4:[[100,100,100,300],[200,200,100,100]]},700:{1:[[700]],2:[[300,400],[200,500]],3:[[200,200,300],[300,300,100]],4:[[200,200,200,100],[100,100,300,200]]},800:{1:[[800]],2:[[400,400],[300,500]],3:[[300,300,200],[200,200,400]],4:[[200,200,200,200],[100,100,300,300]]},900:{1:[[900]],2:[[400,500],[300,600]],3:[[200,200,500],[300,300,300]],4:[[200,200,200,300],[300,300,100,200]]},1e3:{1:[[1e3]],2:[[500,500],[400,600]],3:[[300,300,400],[500,200,300]],4:[[200,200,300,300],[400,200,200,200]]},1100:{1:[[1100]],2:[[500,600],[400,700]],3:[[400,400,300],[300,300,500]],4:[[200,300,300,300],[400,300,200,200]]},1200:{1:[[1200]],2:[[500,700],[600,600]],3:[[400,400,400],[500,400,300]],4:[[300,300,300,300],[200,400,300,300]]},1300:{1:[[1300]],2:[[600,700],[500,800]],3:[[400,400,500],[300,600,400]],4:[[300,400,300,300],[400,400,200,300]]},1400:{1:[[1400]],2:[[600,800],[700,700]],3:[[500,400,500],[600,400,400]],4:[[300,300,500,300],[400,400,300,300]]},1500:{1:[[1500]],2:[[800,700],[600,900]],3:[[400,600,500],[500,500,500]],4:[[400,400,400,300],[500,300,400,300]]},1600:{1:[[1600]],2:[[700,900],[800,800]],3:[[600,600,400],[500,500,600]],4:[[400,400,400,400],[500,300,400,400]]},1700:{1:[[1700]],2:[[800,900],[1e3,700]],3:[[600,600,500],[500,500,700]],4:[[400,400,400,500],[500,300,500,400]]},1800:{1:[[1800]],2:[[900,900],[800,1e3]],3:[[600,600,600],[500,500,800]],4:[[500,500,400,400],[600,400,400,400]]},1900:{1:[[1900]],2:[[900,1e3],[800,1100]],3:[[600,600,700],[500,600,800]],4:[[500,500,400,500],[600,600,400,300]]},2e3:{1:[[2e3]],2:[[1e3,1e3],[800,1200]],3:[[700,700,600],[600,800,600]],4:[[500,500,500,500],[600,400,600,400]]},2100:{1:[[2100]],2:[[1e3,1100],[800,1300]],3:[[700,700,700],[600,900,600]],4:[[400,600,700,400],[600,400,600,500]]},2200:{1:[[2200]],2:[[1e3,1200],[800,1400]],3:[[800,800,600],[1e3,400,800]],4:[[600,600,600,400],[300,700,600,600]]},2300:{1:[[2300]],2:[[900,1400],[1e3,1300]],3:[[500,1e3,800],[400,800,1100]],4:[[600,600,600,500],[300,800,600,600]]},2400:{1:[[2400]],2:[[800,1600],[1200,1200]],3:[[400,1e3,1e3],[500,800,1100]],4:[[700,700,300,700],[800,800,400,400]]},2500:{1:[[2500]],2:[[1e3,1500],[1200,1300]],3:[[500,1e3,1e3],[500,800,1200]],4:[[700,800,400,800],[800,900,300,500]]}};function Dn(e,t){var n,r;An[e][t]&&(n=(r=An[e][t])[Math.floor(Math.random()*r.length)]);return n}function zn(e){var t=[50,100,150,200,250,300,400];t=t.filter((function(t){return t<=e})),(e<100||e%50!=0)&&t.push(25);var n=t.reduce((function(t,n){if(e%n==0){var r=function(e,t){return t/e}(n,e);t.push("".concat(r,"x").concat(n))}return t}),[]);return n[Math.floor(Math.random()*n.length)]}var Rn=at({name:"sets",initialState:{warmup:{total:0,each:[]},technique:{total:0,each:[],sets:[]},main:{total:0,each:[],sets:[]},cooldown:{total:0,each:[]}},reducers:{generateMeterBlocks:function(e,t){return function(e){var t=e/50/4,n={2.5:[.5,1,1.5],3:[1,1.5,2],3.5:[2,2.5,3],4:[2,2.5,3,3.5],4.5:[2,2.5,3,3.5],5:[2,2.5,3,3.5,4],5.5:[2,2.5,3,3.5,4],6:[2.5,3,3.5,4,4.5],6.5:[2.5,3,3.5,4,4.5],7:[3,3.5,4,4.5,5],7.5:[3,3.5,4,4.5,5],8:[3.5,4,4.5,5,5.5],8.5:[3.5,4,4.5,5,5.5],9:[4,4.5,5,5.5,6],9.5:[4,4.5,5,5.5,6],10:[4.5,5,5.5,6,6.5],10.5:[4.5,5,5.5,6,6.5],11:[5,5.5,6,6.5,7],11.5:[5,5.5,6,6.5,7],12:[5.5,6,6.5,7,7.5],12.5:[5.5,6,6.5,7,7.5],13:[6,6.5,7,7.5,8],13.5:[6,6.5,7,7.5,8],14:[6.5,7,7.5,8,8.5],14.5:[6.5,7,7.5,8,8.5],15:[7,7.5,8,8.5,9],15.5:[7,7.5,8,8.5,9],16:[7.5,8,8.5,9,9.5],16.5:[7.5,8,8.5,9,9.5],17:[8,8.5,9,9.5,10],17.5:[8,8.5,9,9.5,10],18:[8.5,9,9.5,10,10.5],18.5:[8.5,9,9.5,10,10.5],19:[9,9.5,10,10.5,11],19.5:[9,9.5,10,10.5,11],20:[9.5,10,10.5,11,11.5]}[t],r=In(n),a=In(n),l=50*(t-0),o=50*(t-r),u=50*(t-a),c=50*(t+(0+r+a)),s=[];if(t<=5&&[l,o,c,u].every((function(e){return e<600})))s=[[l,"1"],[o,"2"],[c,"3"],[u,"4"]];else{var f=[[l,"1"],[o,"2"],[c,"3"],[u,"4"]],d=f.filter((function(e){return e[0]%100==0})),p=f.filter((function(e){return e[0]%100!=0})),m=Math.floor(Math.random()*p.length),h=0;(p=On(Ln)((function(e,t){return t!=m?(h+=e[0]%100,[e[0]-e[0]%100,e[1]]):e}),p))[m][0]+=h,(s=[].concat(i(p),i(d))).sort((function(e,t){return e[1]-t[1]}))}return{warmup:{total:s[0][0]},technique:{total:s[1][0]},main:{total:s[2][0]},cooldown:{total:s[3][0]}}}(t.payload.meters)},generateMeterExercises:function(e,t){var n=t.payload,r=n.warmupExs,a=n.techniqueExs,l=n.mainExs,o=n.cooldownExs;return e.warmup.each=Dn(e.warmup.total,r),e.technique.each=Dn(e.technique.total,a),e.main.each=Dn(e.main.total,l),e.cooldown.each=Dn(e.cooldown.total,o),e},generateMainSets:function(e,t){var n=t.payload.eachList;if(Math.random()<.5&&e.main.total>1e3&&n.length>1)if(n.length>3)if(Math.random()<.5){for(var r=[],a=2;a<n.length-1;a++)r.push(a);var l=r[Math.floor(Math.random()*r.length)],o=n.slice(l),i=n.slice(0,l),u=[{sets:2,eachSet:o.map((function(e){return zn(e/2)}))},{sets:2,eachSet:i.map((function(e){return zn(e/2)}))}];e.main.sets=u}else{var c=[{sets:2,eachSet:n.map((function(e){return zn(e/2)}))}];e.main.sets=c}else{var s=[{sets:2,eachSet:n.map((function(e){return zn(e/2)}))}];e.main.sets=s}else{var f=n.map((function(e){return zn(e)}));e.main.sets=f}return e},generateTechniqueSets:function(e,t){var n=t.payload.eachList.map((function(e){return zn(e)}));return e.technique.sets=n,e}}}),Fn=Rn.actions,qn=Fn.generateMeterBlocks,Un=Fn.generateMeterExercises,Bn=Fn.generateMainSets,Vn=Fn.generateTechniqueSets;const Hn=Rn.reducer;var $n=at({name:"pace",initialState:0,reducers:{setReduxPace:function(e,t){return t.payload.pace}}}),Wn=$n.actions.setReduxPace;const Qn=$n.reducer;const Kn=ct((function(e,t){return e/t}));const Xn=ct((function(e,t){return Number(e)-Number(t)}));function Yn(e){var t=Math.floor(e/60),n=(e%60).toString().length>1?e%60:"0".concat(e%60);return"".concat(t,":").concat(n)}function Gn(e){return e.charAt(0).toUpperCase()+e.slice(1)}var Zn={};const Jn=function(){var e=l((0,o.useState)(["freestyle"]),2),t=e[0],n=e[1],r=l((0,o.useState)(["kickboard","pullbuoy"]),2),a=r[0],c=r[1],s=l((0,o.useState)([]),2),f=s[0],d=s[1],p=k(),m=l((0,o.useState)(3),2),h=m[0],y=m[1],v=l((0,o.useState)(2200),2),b=v[0],g=v[1],w=l((0,o.useState)(100),2),E=w[0],x=w[1],_=l((0,o.useState)({1:!1,2:!1,3:!0,4:!1,5:!1}),2),C=_[0],O=_[1],N=l((0,o.useState)(!1),2),P=N[0],T=N[1],j=S((function(e){return e.display})),M=Yn(E),L={levels:[1,2,3,4,5],strokes:["freestyle","backstroke","breaststroke","butterfly"],materials:["kickboard","pullbuoy","fins","paddles","snorkel"],muscles:["arms","pecs","abs","back","legs"]};function I(){p((function(e,t){e(qn({meters:Zn.meters})),e(Jt({level:Zn.level})),e(en({strokesTargeted:Zn.strokes})),e(tn({material:Zn.materials})),e(Wn({pace:Zn.pace}));var n=t().exercises;e(cn({filteredExercises:n,material:Zn.materials,muscle:Zn.muscles,meters:t().sets.warmup.total,level:Zn.level}));var r=t().warmup;n=Nt(n,r),e(dn({filteredExercises:n,material:Zn.materials,muscle:Zn.muscles,meters:t().sets.technique.total,level:Zn.level}));var a=t().technique;n=Nt(n,a),e(hn({filteredExercises:n,material:Zn.materials,muscle:Zn.muscles,meters:t().sets.main.total,level:Zn.level}));var l=t().main;n=Nt(n,l),e(bn({filteredExercises:n,material:Zn.materials,meters:t().sets.cooldown.total,level:Zn.level}));var o=t().cooldown;e(Un({warmupExs:r.length,techniqueExs:a.length,mainExs:l.length,cooldownExs:o.length}));var i=t().sets.technique.each;e(Vn({eachList:i}));var u=t().sets.main.each;e(Bn({eachList:u}))}))}function A(){document.getElementById("scroll-ref").scrollIntoView({behavior:"smooth",block:"start"})}function D(e){e.target.checked?n([].concat(i(t),[e.target.value])):n(t.filter((function(t){return t!=e.target.value})))}function z(e){e.target.checked?c([].concat(i(a),[e.target.value])):c(a.filter((function(t){return t!=e.target.value})))}function R(e){e.target.checked?d([].concat(i(f),[e.target.value])):d(f.filter((function(t){return t!=e.target.value})))}return(0,o.useEffect)((function(){M=Yn(E)}),[E]),(0,o.useEffect)((function(){O(u({1:!1,2:!1,3:!1,4:!1,5:!1},h,!0)),n(t.filter((function(e){return"butterfly"!=e})))}),[h]),o.createElement("div",{className:" mb-32"},o.createElement("hr",{className:"h-1 text-dark-grey bg-dark-grey ".concat(j.form?"":"hidden")}),o.createElement("h1",{className:"font-bebas pt-12 pb-10 text-left pl-6 text-3xl ".concat(j.form?"":"hidden")},o.createElement("u",null,"READY?")),o.createElement("form",{onSubmit:function(e){e.preventDefault(),t.length<1?T(!0):(T(!1),p(xn({form:!1,training:!0,buttons:!0})),Zn.level=h,Zn.strokes=t,Zn.materials=a,Zn.muscles=f,Zn.meters=b,Zn.pace=E,I(),A())},id:"training-form",className:"flex px-6  flex-col items-start justify-center space-y-10 ".concat(j.form?"":"hidden"),role:"form"},o.createElement("div",{className:"flex flex-col space-y-4 border-2 w-full border-lighter-grey border-opacity-40 py-4 px-4"},o.createElement("h3",{className:"text-left"},"Your level:"),o.createElement("ul",{className:"flex flex-row h-8"},L.levels.map((function(e){return o.createElement("li",{className:"relative w-9",style:{marginRight:"0.05rem"},key:e+"_level"},o.createElement("input",{type:"radio",id:e,name:"levels",value:e,className:"opacity-0",onChange:function(e){return y(e.target.value)}}),o.createElement("label",{htmlFor:e,className:"absolute flex flex-col justify-center inset-0 ".concat(C[e]?"bg-blue-ocean text-white":"bg-light-grey bg-opacity-20")},e))}))),o.createElement("ul",{className:"list-decimal list-inside flex flex-col gap-4 py-4 text-left"},o.createElement("li",null,"I'm still learning how to swim."),o.createElement("li",null,"I'm able to swim 100m freestyle, backstroke & breaststroke."),o.createElement("li",null,"I'm able to swim 200m medley."),o.createElement("li",null,"I'm able to swim 400m medley."),o.createElement("li",null,"I'm able to swim 200m butterfly."))),o.createElement("div",{className:"flex flex-col space-y-16 w-full border-2 border-lighter-grey border-opacity-40 pt-4 pb-5 px-4"},o.createElement("h3",{className:"text-left"},"Set your meters goal:"),o.createElement("div",{className:"relative w-10/12 flex flex-col justify-center"},o.createElement("input",{type:"range",min:"500",max:"4000",step:"100",value:b,id:"meterSlider",name:"meters",className:"w-full h-2",onChange:function(e){return g(e.target.value)}}),o.createElement("output",{htmlFor:"meters",className:"bg-white shadow-sm border-opacity-40 border-lighter-grey w-3/12 text-sm py-1 rounded-md absolute bottom-5 output-meters",style:{borderWidth:"0.5px",left:"".concat(Kn(Xn(b,407.89),36.84),"%"),transform:"translate(-50%, 0)"}},b," m"))),o.createElement("div",{className:"flex flex-col space-y-16 w-full border-2 border-lighter-grey border-opacity-40 pt-4 pb-5 px-4"},o.createElement("h3",{className:"text-left"},"Set your 100m freestyle pace:"),o.createElement("div",{className:"relative w-8/12 flex flex-col justify-center"},o.createElement("input",{type:"range",min:"70",max:"150",step:"5",value:E,id:"paceSlider",name:"pace",className:"w-full h-2",onChange:function(e){return x(e.target.value)}}),o.createElement("output",{htmlFor:"pace",className:"bg-white shadow-sm border-opacity-40 border-lighter-grey text-sm px-3 py-1 rounded-md absolute bottom-5",style:{borderWidth:"0.5px",left:"".concat(Kn(Xn(E,67.8947),.8421),"%"),transform:"translate(-50%, 0)"}},M))),o.createElement("div",{className:"flex flex-col w-full space-y-4 border-2 border-lighter-grey border-opacity-40 py-4 px-4 "},o.createElement("h3",{className:"text-left "},"Strokes for this workout:"),o.createElement("ul",{className:"flex flex-col space-y-2 items-start"},L.strokes.map((function(e){if(h<3&&"butterfly"!=e||h>=3)return o.createElement("li",{className:"flex w-full flex-row items-baseline space-x-2 py-1",key:e},o.createElement("input",{type:"checkbox",id:e,name:e,value:e,style:{transform:"scale(1.2)"},checked:t.includes(e),onChange:D}),o.createElement("label",{htmlFor:e,className:"text-left w-full"},Gn(e)))})))),o.createElement("div",{className:"flex flex-col items-start space-y-4 w-full border-2 border-lighter-grey border-opacity-40 pt-4 pb-6 px-4"},o.createElement("h3",{className:"text-left w-full "},"Materials you are using:"),o.createElement("ul",{className:"grid grid-cols-toggle w-full h-16 gap-1 "},L.materials.map((function(e){return o.createElement("li",{className:"relative rounded-3xl ".concat(a.includes(e)?"bg-blue-ocean":"bg-light-grey bg-opacity-20"),key:e},o.createElement("input",{type:"checkbox",id:e,name:e,value:e,className:"opacity-0",checked:a.includes(e),onChange:z}),o.createElement("label",{className:"absolute flex flex-col justify-center text-sm inset-0 text-black ".concat(a.includes(e)?"text-white":""),htmlFor:e},Gn(e)))})))),o.createElement("div",{className:"flex flex-col items-start space-y-5 w-full border-2 border-lighter-grey border-opacity-40 pt-4 pb-6 px-4"},o.createElement("h3",{className:"text-left w-full"},"Muscles targeted (optional)"),o.createElement("ul",{className:"grid grid-cols-toggle w-full h-16 gap-1 "},L.muscles.map((function(e){return o.createElement("li",{className:"relative rounded-3xl ".concat(f.includes(e)?"bg-blue-ocean":"bg-light-grey bg-opacity-20"),key:e},o.createElement("input",{type:"checkbox",id:e,name:e,value:e,className:"opacity-0",checked:f.includes(e),onChange:R}),o.createElement("label",{htmlFor:e,className:"absolute flex flex-col justify-center text-sm inset-0 text-black ".concat(f.includes(e)?"text-white":"")},Gn(e)))})))),o.createElement("input",{type:"submit",value:"Generate your workout","data-testid":"submit-button",className:" bg-blue-ocean text-lg text-white rounded-md px-3 py-3 w-full",style:{marginTop:"40px"}})),o.createElement("div",{className:"".concat(P?"":"hidden")},o.createElement("h2",{style:{backgroundColor:"#FFDDDC"}},"Please select at least one stroke")),o.createElement("div",{className:"".concat(j.buttons?"":"hidden"," "),"data-testid":"buttons-wrapper"},o.createElement("h1",{className:"font-bebas pt-4 pb-10 text-left pl-6 text-3xl"},o.createElement("u",null,"NOT CONVINCED?")),o.createElement("div",{className:"flex px-6  flex-col items-start justify-center space-y-14"},o.createElement("div",{className:"flex flex-col space-y-6"},o.createElement("p",{className:"text-left"},"If you want, you can generate a new workout keeping your preferences"),o.createElement("button",{onClick:function(){I(),A()},className:"bg-blue-ocean text-white  text-lg rounded-md px-3 py-3 w-full"},"Generate your workout again")),o.createElement("div",{className:"flex flex-col space-y-6"},o.createElement("p",{className:"text-left"},"Or maybe you could try a different workout selecting other options"),o.createElement("button",{onClick:function(){y(3),g(2200),x(100),n(["freestyle"]),c(["kickboard","pullbuoy"]),d([]),T(!1),p(nn({reset:ot})),p(xn({form:!0,training:!1,buttons:!1})),A()},className:"bg-green-herb text-white  text-lg rounded-md px-3 py-3 w-full"},"Reset Options")))))};const er=function(){var e=S((function(e){return e.warmup})),t=S((function(e){return e.sets.warmup.each}));return o.createElement("div",null,o.createElement("h4",{className:"text-left pl-6"},o.createElement("b",null,"Warm up")),o.createElement("div",{className:"flex flex-col pt-4 space-y-2"},e.map((function(e,n){return o.createElement("div",{className:"flex justify-between px-6 ",key:e.id},o.createElement("h3",{className:"flex justify-end ",style:{width:"20%"}},t[n]),o.createElement("h3",{className:"text-left ",style:{width:"75%"}},e.name))}))))};const tr=function(){var e=S((function(e){return e.technique})),t=S((function(e){return e.sets.technique.sets}));return o.createElement("div",null,o.createElement("h4",{className:"text-left pl-6"},o.createElement("b",null,"Technique")),o.createElement("div",{className:"flex flex-col pt-4 space-y-2"},e.map((function(e,n){return o.createElement("div",{className:"flex justify-between px-6 ",key:e.id},o.createElement("h3",{className:"flex justify-end ",style:{width:"20%"}},t[n]),o.createElement("h3",{className:"text-left ",style:{width:"75%"}},e.name))}))))};function nr(e){return e[Math.floor(Math.random()*e.length)]}function rr(e){return e>59?Yn(e):e+"s"}function ar(e){return 5*Math.ceil(e/5)}function lr(e,t,n){return"freestyle"!=n||50!=t&&100!=t&&200!=t?"resting "+function(e){var t={25:[5,10,15],50:[5,10,15],100:[5,10,15,20],150:[10,15,20],200:[10,15,20,25],250:[15,20,25,30],300:[20,25,30,35],400:[30,35,40,45]};return function(e){return nr(t[e])}(e)}(t)+"s":Math.random()>.5?"on less than "+function(e,t){var n={50:[[ar(e/2)," resting 15s"]],100:[[e," resting 15s"],[e+5," resting 20s"]],200:[[2*e+10," resting 40s"],[2*e+15," resting 30s"],[2*e+20," resting 20s"]]};return function(e){var t=nr(n[e]);return rr(t[0])+t[1]}(t)}(Number(e),t):"at "+rr(function(e,t){var n={50:[5,10],100:[5,10,15,20],200:[10,15,20,25,30]};return function(e,t){var r;50==t&&(r=ar(e/2)),100==t&&(r=e),200==t&&(r=2*e);var a=nr(n[t]);return Number(r)+Number(a)}(e,t)}(Number(e),t))}const or=function(){var e=S((function(e){return e.main})),t=S((function(e){return e.sets.main.sets})),n=S((function(e){return e.pace})),r={1:[],2:[]};return o.createElement("div",null,o.createElement("h4",{className:"text-left pl-6"},o.createElement("b",null,"Main Block")),t.every((function(e){return"string"==typeof e}))?o.createElement("div",{className:"flex flex-col pt-4 space-y-2"},e.map((function(e,r){return o.createElement("div",{className:"flex justify-between px-6 ",key:e.id},o.createElement("h3",{className:"flex justify-end ",style:{width:"20%"}},t[r]),o.createElement("h3",{className:"text-left ",style:{width:"75%"}},e.name," ",lr(n,Number(t[r].split("x")[1]),e.stroke)))}))):o.createElement("div",{className:"flex flex-col space-y-3"},t.map((function(t,a){return o.createElement("div",{className:"flex w-full pt-4 px-6 justify-between",key:"".concat(t,"-").concat(a)},o.createElement("div",{className:"flex space-x-1 pt-1",style:{width:"20%"}},o.createElement("span",{className:"flex flex-col justify-center"},t.sets),o.createElement("div",{className:"h-full w-0.5 bg-black"}),o.createElement("div",{className:"h-full w-full flex flex-col space-y-12 "},t.eachSet.map((function(e,t){return r[a+1].push(e.split("x")[1]),o.createElement("h2",{key:e+t,className:"w-full text-sm"},e)})))),o.createElement("div",{className:"flex flex-col space-y-2",style:{width:"75%"}},r[a+1].map((function(t,l){return 0==a?o.createElement("h3",{className:"text-left",key:e[l].id},e[l].name," ",lr(n,Number(r[a+1][l]),e[l].stroke)):1==a?o.createElement("h3",{className:"text-left",key:e[l+2].id},e[l+2].name," ",lr(n,Number(r[a+1][l]),e[l+2].stroke)):void 0}))))}))))};const ir=function(){var e=S((function(e){return e.cooldown})),t=S((function(e){return e.sets.cooldown.each}));return o.createElement("div",null,o.createElement("h4",{className:"text-left pl-6"},o.createElement("b",null,"Cool down")),o.createElement("div",{className:"flex flex-col pt-4 space-y-2"},e.map((function(e,n){return o.createElement("div",{className:"flex justify-between px-6 ",key:e.id},o.createElement("h3",{className:"flex justify-end ",style:{width:"20%"}},t[n]),o.createElement("h3",{className:"text-left",style:{width:"75%"}},e.name))}))))};const ur=function(){var e=S((function(e){return e.display})),t=S((function(e){return e.sets.warmup.total+e.sets.technique.total+e.sets.main.total+e.sets.cooldown.total}));return o.createElement("div",{className:" mb-16 ".concat(e.training?"":"hidden"),"data-testid":"training",id:"training"},o.createElement("hr",{className:"h-1 text-dark-grey bg-dark-grey"}),o.createElement("h1",{className:"font-bebas pt-12 pb-10 text-left pl-6 text-3xl"},o.createElement("u",null,"SWIM WORKOUT")),o.createElement("div",{className:"flex flex-col space-y-12 pb-6"},o.createElement(er,null),o.createElement(tr,null),o.createElement(or,null),o.createElement(ir,null),o.createElement("h2",{className:"text-left text-lg pl-6 pt-6"},o.createElement("b",null,"Total:  ",t," m"))),o.createElement("hr",{className:"h-1 mt-16 text-dark-grey bg-dark-grey"}))};const cr=function(){var e=S((function(e){return e.display}));return o.createElement("div",{id:"scroll-ref"},e.form?o.createElement(o.Fragment,null,o.createElement(Jn,null),o.createElement(ur,null)):o.createElement(o.Fragment,null,o.createElement(ur,null),o.createElement(Jn,null)))},sr=function(e){var t,n=tt(),r=e||{},a=r.reducer,l=void 0===a?void 0:a,o=r.middleware,i=void 0===o?n():o,u=r.devTools,c=void 0===u||u,s=r.preloadedState,f=void 0===s?void 0:s,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof l)t=l;else{if(!Je(l))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=z(l)}var m=i;"function"==typeof m&&(m=m(n));var h=F.apply(void 0,m),y=R;c&&(y=Ze(Ge({trace:!1},"object"==typeof c&&c)));var v=[h];return Array.isArray(p)?v=$e([h],p):"function"==typeof p&&(v=p(v)),D(t,f,y.apply(void 0,v))}({reducer:{exercises:rn,warmup:sn,main:yn,technique:pn,cooldown:gn,display:Sn,sets:Hn,pace:Qn}});const fr=function(){var e=l((0,o.useState)(!0),2),t=e[0],n=e[1];return(0,o.useEffect)((function(){setTimeout((function(){n(!1)}),1e3)}),[]),t?null:o.createElement(h,{store:sr},o.createElement("div",{className:"p-0 m-0 w-full text-center "},o.createElement("header",null,o.createElement("h1",{className:"font-bebas text-left px-6 text-3xl h-20 flex flex-col justify-center"},"SWIMMING WORKOUT GENERATOR"),o.createElement("hr",{className:"h-1 text-dark-grey bg-dark-grey"})),o.createElement("div",{className:"mt-6 mb-10 flex-col flex gap-4"},o.createElement("div",{className:"py-4 flex flex-col gap-5 text-left px-6"},o.createElement("p",null,"Welcome to my swim app!"),o.createElement("p",null,"My name is Mario, I'm a swimmer and I have created this"," ",o.createElement("b",null,"app that generates swimming workouts")," for you.")),o.createElement("div",{className:"py-4 flex flex-col gap-7  text-left px-6"},o.createElement("h3",null,o.createElement("u",null,"How does it work?")),o.createElement("ol",{className:"list-decimal list-inside flex flex-col gap-5"},o.createElement("li",null,o.createElement("b",null,"Fill the form with your training options")," (distance, pace, equipment...)."),o.createElement("li",null,o.createElement("b",null,"Drills are selected")," based on your options."," ",o.createElement("b",null,"Swimming sets are generated")," for each block."),o.createElement("li",null,o.createElement("b",null,"You have your custom workout!"))))),o.createElement(cr,null),o.createElement("footer",null,o.createElement("hr",{className:"h-1 text-dark-grey bg-dark-grey"}),o.createElement("div",{className:"flex w-full h-32 items-center"},o.createElement("h2",{className:"font-play w-6/12 text-left px-6"},o.createElement("u",null,o.createElement("a",{href:"https://github.com/masanpoc/swimming",rel:"noreferrer",target:"_blank"},"Github repo"))),o.createElement("div",{className:"flex items-center w-6/12 justify-center gap-2"},o.createElement("h2",{className:"font-play "},"Contact:"),o.createElement("div",{className:"flex gap-1"},o.createElement("svg",{style:{width:"30px",height:"30px"},viewBox:"0 0 24 24"},o.createElement("a",{href:"mailto:marioscp1998@outlook.es",rel:"noreferrer",target:"_blank"},o.createElement("path",{fill:"currentColor",d:"M13 17H17V14L22 18.5L17 23V20H13V17M20 4H4A2 2 0 0 0 2 6V18A2 2 0 0 0 4 20H11.35A5.8 5.8 0 0 1 11 18A6 6 0 0 1 22 14.69V6A2 2 0 0 0 20 4M20 8L12 13L4 8V6L12 11L20 6Z"}))),o.createElement("svg",{style:{width:"30px",height:"30px"},viewBox:"0 0 24 24"},o.createElement("a",{href:"https://www.linkedin.com/in/mario-cirer/",rel:"noreferrer",target:"_blank"},o.createElement("path",{fill:"currentColor",d:"M19 3A2 2 0 0 1 21 5V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V5A2 2 0 0 1 5 3H19M18.5 18.5V13.2A3.26 3.26 0 0 0 15.24 9.94C14.39 9.94 13.4 10.46 12.92 11.24V10.13H10.13V18.5H12.92V13.57C12.92 12.8 13.54 12.17 14.31 12.17A1.4 1.4 0 0 1 15.71 13.57V18.5H18.5M6.88 8.56A1.68 1.68 0 0 0 8.56 6.88C8.56 5.95 7.81 5.19 6.88 5.19A1.69 1.69 0 0 0 5.19 6.88C5.19 7.81 5.95 8.56 6.88 8.56M8.27 18.5V10.13H5.5V18.5H8.27Z"})))))))))}},579:(e,t,n)=>{"use strict";var r=n(294),a=n(935),l=n(242);n(632);e.hot.accept(),a.render(r.createElement(l.Z,null),document.getElementById("app"))},679:(e,t,n)=>{"use strict";var r=n(864),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},l={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},i={};function u(e){return r.isMemo(e)?o:i[e.$$typeof]||a}i[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},i[r.Memo]=o;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=p(n);a&&a!==m&&e(t,a,r)}var o=s(n);f&&(o=o.concat(f(n)));for(var i=u(t),h=u(n),y=0;y<o.length;++y){var v=o[y];if(!(l[v]||r&&r[v]||h&&h[v]||i&&i[v])){var b=d(n,v);try{c(t,v,b)}catch(e){}}}}return t}},783:(e,t,n)=>{"use strict";var r=n(618),a=Object.create(null),l="undefined"==typeof document,o=Array.prototype.forEach;function i(){}function u(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(f(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function c(e){if(!e)return!1;var t=document.querySelectorAll("link"),n=!1;return o.call(t,(function(t){if(t.href){var a=function(e,t){var n;return e=r(e,{stripWWW:!1}),t.some((function(r){e.indexOf(t)>-1&&(n=r)})),n}(t.href,e);f(a)&&!0!==t.visited&&a&&(u(t,a),n=!0)}})),n}function s(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&u(e)}))}function f(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(l)return console.log("no window.document found, will not HMR CSS"),i;var n,o,u,f=function(e){var t=a[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var n=document.getElementsByTagName("script"),l=n[n.length-1];l&&(t=l.src)}a[e]=t}return function(e){if(!t)return null;var n=t.split(/([^\\/]+)\.js$/),a=n&&n[1];return a&&e?e.split(",").map((function(e){var n=new RegExp("".concat(a,"\\.js$"),"g");return r(t.replace(n,"".concat(e.replace(/{fileName}/g,a),".css")))})):[t.replace(".js",".css")]}}(e);return n=function(){var e=f(t.filename),n=c(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},o=50,u=0,function(){var e=this,t=arguments,r=function(){return n.apply(e,t)};clearTimeout(u),u=setTimeout(r,o)}}},618:e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(t,"i"),"").split("/"),r=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",t+r+n.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},632:(e,t,n)=>{"use strict";var r=n(783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)},418:e=>{"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,l){for(var o,i,u=a(e),c=1;c<arguments.length;c++){for(var s in o=Object(arguments[c]))n.call(o,s)&&(u[s]=o[s]);if(t){i=t(o);for(var f=0;f<i.length;f++)r.call(o,i[f])&&(u[i[f]]=o[i[f]])}}return u}},703:(e,t,n)=>{"use strict";var r=n(414);function a(){}function l(){}l.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,l,o){if(o!==r){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:l,resetWarningCache:a};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(294),a=n(418),l=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));var i=new Set,u={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)i.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,m={},h={};function y(e,t,n,r,a,l,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=l,this.removeEmptyString=o}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function k(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(h,e)||!p.call(m,e)&&(d.test(e)?h[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,g);v[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,x=60106,S=60107,_=60108,C=60114,O=60109,N=60110,P=60112,T=60113,j=60120,M=60115,L=60116,I=60121,A=60128,D=60129,z=60130,R=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;E=F("react.element"),x=F("react.portal"),S=F("react.fragment"),_=F("react.strict_mode"),C=F("react.profiler"),O=F("react.provider"),N=F("react.context"),P=F("react.forward_ref"),T=F("react.suspense"),j=F("react.suspense_list"),M=F("react.memo"),L=F("react.lazy"),I=F("react.block"),F("react.scope"),A=F("react.opaque.id"),D=F("react.debug_trace_mode"),z=F("react.offscreen"),R=F("react.legacy_hidden")}var q,U="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=U&&e[U]||e["@@iterator"])?e:null}function V(e){if(void 0===q)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);q=t&&t[1]||""}return"\n"+q+e}var H=!1;function $(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),l=r.stack.split("\n"),o=a.length-1,i=l.length-1;1<=o&&0<=i&&a[o]!==l[i];)i--;for(;1<=o&&0<=i;o--,i--)if(a[o]!==l[i]){if(1!==o||1!==i)do{if(o--,0>--i||a[o]!==l[i])return"\n"+a[o].replace(" at new "," at ")}while(1<=o&&0<=i);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function W(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return e=$(e.type,!1);case 11:return e=$(e.type.render,!1);case 22:return e=$(e.type._render,!1);case 1:return e=$(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case C:return"Profiler";case _:return"StrictMode";case T:return"Suspense";case j:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return Q(e.type);case I:return Q(e._render);case L:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&k(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function le(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function oe(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function ie(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ce(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function me(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ye,ve=(ye=function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ye(e,t)}))}:ye);function be(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ke=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ge).forEach((function(e){ke.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var xe=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,Ne=null,Pe=null;function Te(e){if(e=ea(e)){if("function"!=typeof Oe)throw Error(o(280));var t=e.stateNode;t&&(t=na(t),Oe(e.stateNode,e.type,t))}}function je(e){Ne?Pe?Pe.push(e):Pe=[e]:Ne=e}function Me(){if(Ne){var e=Ne,t=Pe;if(Pe=Ne=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Le(e,t){return e(t)}function Ie(e,t,n,r,a){return e(t,n,r,a)}function Ae(){}var De=Le,ze=!1,Re=!1;function Fe(){null===Ne&&null===Pe||(Ae(),Me())}function qe(e,t){var n=e.stateNode;if(null===n)return null;var r=na(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Ue=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ye){Ue=!1}function Ve(e,t,n,r,a,l,o,i,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var He=!1,$e=null,We=!1,Qe=null,Ke={onError:function(e){He=!0,$e=e}};function Xe(e,t,n,r,a,l,o,i,u){He=!1,$e=null,Ve.apply(Ke,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ze(e){if(Ye(e)!==e)throw Error(o(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return Ze(a),e;if(l===r)return Ze(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var tt,nt,rt,at,lt=!1,ot=[],it=null,ut=null,ct=null,st=new Map,ft=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function mt(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":ct=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ft.delete(t.pointerId)}}function yt(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e=mt(t,n,r,a,l),null!==t&&(null!==(t=ea(t))&&nt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function vt(e){var t=Jr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void at(e.lanePriority,(function(){l.unstable_runWithPriority(e.priority,(function(){rt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ea(n))&&nt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){bt(e)&&n.delete(t)}function kt(){for(lt=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=ea(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==it&&bt(it)&&(it=null),null!==ut&&bt(ut)&&(ut=null),null!==ct&&bt(ct)&&(ct=null),st.forEach(gt),ft.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,lt||(lt=!0,l.unstable_scheduleCallback(l.unstable_NormalPriority,kt)))}function Et(e){function t(t){return wt(t,e)}if(0<ot.length){wt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==ut&&wt(ut,e),null!==ct&&wt(ct,e),st.forEach(t),ft.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)vt(n),null===n.blockedOn&&dt.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},_t={},Ct={};function Ot(e){if(_t[e])return _t[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return _t[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Nt=Ot("animationend"),Pt=Ot("animationiteration"),Tt=Ot("animationstart"),jt=Ot("transitionend"),Mt=new Map,Lt=new Map,It=["abort","abort",Nt,"animationEnd",Pt,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",jt,"transitionEnd","waiting","waiting"];function At(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Lt.set(r,t),Mt.set(r,a),c(a,[r])}}(0,l.unstable_now)();var Dt=8;function zt(e){if(0!=(1&e))return Dt=15,1;if(0!=(2&e))return Dt=14,2;if(0!=(4&e))return Dt=13,4;var t=24&e;return 0!==t?(Dt=12,t):0!=(32&e)?(Dt=11,32):0!==(t=192&e)?(Dt=10,t):0!=(256&e)?(Dt=9,256):0!==(t=3584&e)?(Dt=8,t):0!=(4096&e)?(Dt=7,4096):0!==(t=4186112&e)?(Dt=6,t):0!==(t=62914560&e)?(Dt=5,t):67108864&e?(Dt=4,67108864):0!=(134217728&e)?(Dt=3,134217728):0!==(t=805306368&e)?(Dt=2,t):0!=(1073741824&e)?(Dt=1,1073741824):(Dt=8,e)}function Rt(e,t){var n=e.pendingLanes;if(0===n)return Dt=0;var r=0,a=0,l=e.expiredLanes,o=e.suspendedLanes,i=e.pingedLanes;if(0!==l)r=l,a=Dt=15;else if(0!==(l=134217727&n)){var u=l&~o;0!==u?(r=zt(u),a=Dt):0!==(i&=l)&&(r=zt(i),a=Dt)}else 0!==(l=n&~o)?(r=zt(l),a=Dt):0!==i&&(r=zt(i),a=Dt);if(0===r)return 0;if(r=n&((0>(r=31-Ht(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&o)){if(zt(t),a<=Dt)return t;Dt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Ht(t)),r|=e[n],t&=~a;return r}function Ft(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function qt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?qt(10,t):e;case 10:return 0===(e=Ut(192&~t))?qt(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&(0===(e=Ut(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(o(358,e))}function Ut(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ht(t)]=n}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/Wt|0)|0},$t=Math.log,Wt=Math.LN2;var Qt=l.unstable_UserBlockingPriority,Kt=l.unstable_runWithPriority,Xt=!0;function Yt(e,t,n,r){ze||Ae();var a=Zt,l=ze;ze=!0;try{Ie(a,e,t,n,r)}finally{(ze=l)||Fe()}}function Gt(e,t,n,r){Kt(Qt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){var a;if(Xt)if((a=0==(4&t))&&0<ot.length&&-1<pt.indexOf(e))e=mt(null,e,t,n,r),ot.push(e);else{var l=Jt(e,t,n,r);if(null===l)a&&ht(e,r);else{if(a){if(-1<pt.indexOf(e))return e=mt(l,e,t,n,r),void ot.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return it=yt(it,e,t,n,r,a),!0;case"dragenter":return ut=yt(ut,e,t,n,r,a),!0;case"mouseover":return ct=yt(ct,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return st.set(l,yt(st.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,ft.set(l,yt(ft.get(l)||null,e,t,n,r,a)),!0}return!1}(l,e,t,n,r))return;ht(e,r)}Mr(e,t,r,null,n)}}}function Jt(e,t,n,r){var a=Ce(r);if(null!==(a=Jr(a))){var l=Ye(a);if(null===l)a=null;else{var o=l.tag;if(13===o){if(null!==(a=Ge(l)))return a;a=null}else if(3===o){if(l.stateNode.hydrate)return 3===l.tag?l.stateNode.containerInfo:null;a=null}else l!==a&&(a=null)}}return Mr(e,t,r,a,n),null}var en=null,tn=null,nn=null;function rn(){if(nn)return nn;var e,t,n=tn,r=n.length,a="value"in en?en.value:en.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[l-t];t++);return nn=a.slice(e,1<t?1-t:void 0)}function an(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function ln(){return!0}function on(){return!1}function un(e){function t(t,n,r,a,l){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?ln:on,this.isPropagationStopped=on,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ln)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ln)},persist:function(){},isPersistent:ln}),t}var cn,sn,fn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},pn=un(dn),mn=a({},dn,{view:0,detail:0}),hn=un(mn),yn=a({},mn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==fn&&(fn&&"mousemove"===e.type?(cn=e.screenX-fn.screenX,sn=e.screenY-fn.screenY):sn=cn=0,fn=e),cn)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=un(yn),bn=un(a({},yn,{dataTransfer:0})),gn=un(a({},mn,{relatedTarget:0})),kn=un(a({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=un(a({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),En=un(a({},dn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=_n[e])&&!!t[e]}function On(){return Cn}var Nn=un(a({},mn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=an(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?an(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?an(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=un(a({},yn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=un(a({},mn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),jn=un(a({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Mn=un(a({},yn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Ln=[9,13,27,32],In=f&&"CompositionEvent"in window,An=null;f&&"documentMode"in document&&(An=document.documentMode);var Dn=f&&"TextEvent"in window&&!An,zn=f&&(!In||An&&8<An&&11>=An),Rn=String.fromCharCode(32),Fn=!1;function qn(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1;var Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function $n(e,t,n,r){je(r),0<(t=Ir(t,"onChange")).length&&(n=new pn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Qn=null;function Kn(e){Cr(e,0)}function Xn(e){if(G(ta(e)))return e}function Yn(e,t){if("change"===e)return t}var Gn=!1;if(f){var Zn;if(f){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Gn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Wn&&(Wn.detachEvent("onpropertychange",nr),Qn=Wn=null)}function nr(e){if("value"===e.propertyName&&Xn(Qn)){var t=[];if($n(t,Qn,e,Ce(e)),e=Kn,ze)e(t);else{ze=!0;try{Le(e,t)}finally{ze=!1,Fe()}}}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(Wn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xn(Qn)}function lr(e,t){if("click"===e)return Xn(t)}function or(e,t){if("input"===e||"change"===e)return Xn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function cr(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function mr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,yr=null,vr=null,br=null,gr=!1;function kr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==yr||yr!==Z(r)||("selectionStart"in(r=yr)&&mr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&cr(br,r)||(br=r,0<(r=Ir(vr,"onSelect")).length&&(t=new pn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}At("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),At("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),At(It,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Er=0;Er<wr.length;Er++)Lt.set(wr[Er],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(xr));function _r(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,i,u,c){if(Xe.apply(this,arguments),He){if(!He)throw Error(o(198));var s=$e;He=!1,$e=null,We||(We=!0,Qe=s)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,c=i.currentTarget;if(i=i.listener,u!==l&&a.isPropagationStopped())break e;_r(a,i,c),l=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,c=i.currentTarget,i=i.listener,u!==l&&a.isPropagationStopped())break e;_r(a,i,c),l=u}}}if(We)throw e=Qe,We=!1,Qe=null,e}function Or(e,t){var n=ra(t),r=e+"__bubble";n.has(r)||(jr(t,e,2,!1),n.add(r))}var Nr="_reactListening"+Math.random().toString(36).slice(2);function Pr(e){e[Nr]||(e[Nr]=!0,i.forEach((function(t){Sr.has(t)||Tr(t,!1,e,null),Tr(t,!0,e,null)})))}function Tr(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,l=n;if("selectionchange"===e&&9!==n.nodeType&&(l=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;a|=2,l=r}var o=ra(l),i=e+"__"+(t?"capture":"bubble");o.has(i)||(t&&(a|=4),jr(l,e,a,t),o.add(i))}function jr(e,t,n,r){var a=Lt.get(t);switch(void 0===a?2:a){case 0:a=Yt;break;case 1:a=Gt;break;default:a=Zt}n=a.bind(null,t,n,e),a=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Mr(e,t,n,r,a){var l=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;o=o.return}for(;null!==i;){if(null===(o=Jr(i)))return;if(5===(u=o.tag)||6===u){r=l=o;continue e}i=i.parentNode}}r=r.return}!function(e,t,n){if(Re)return e(t,n);Re=!0;try{De(e,t,n)}finally{Re=!1,Fe()}}((function(){var r=l,a=Ce(n),o=[];e:{var i=Mt.get(e);if(void 0!==i){var u=pn,c=e;switch(e){case"keypress":if(0===an(n))break e;case"keydown":case"keyup":u=Nn;break;case"focusin":c="focus",u=gn;break;case"focusout":c="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Tn;break;case Nt:case Pt:case Tt:u=kn;break;case jt:u=jn;break;case"scroll":u=hn;break;case"wheel":u=Mn;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==i?i+"Capture":null:i;s=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&(null!=(h=qe(m,d))&&s.push(Lr(m,h,p)))),f)break;m=m.return}0<s.length&&(i=new u(i,c,null,n,a),o.push({event:i,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Jr(c)&&!c[Gr])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?Jr(c):null)&&(c!==(f=Ye(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=vn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(s=Pn,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?i:ta(u),p=null==c?i:ta(c),(i=new s(h,m+"leave",u,n,a)).target=f,i.relatedTarget=p,h=null,Jr(a)===r&&((s=new s(d,m+"enter",c,n,a)).target=p,s.relatedTarget=f,h=s),f=h,u&&c)e:{for(d=c,m=0,p=s=u;p;p=Ar(p))m++;for(p=0,h=d;h;h=Ar(h))p++;for(;0<m-p;)s=Ar(s),m--;for(;0<p-m;)d=Ar(d),p--;for(;m--;){if(s===d||null!==d&&s===d.alternate)break e;s=Ar(s),d=Ar(d)}s=null}else s=null;null!==u&&Dr(o,i,u,s,!1),null!==c&&null!==f&&Dr(o,f,c,s,!0)}if("select"===(u=(i=r?ta(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var y=Yn;else if(Hn(i))if(Gn)y=or;else{y=ar;var v=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(y=lr);switch(y&&(y=y(e,r))?$n(o,y,n,a):(v&&v(e,i,r),"focusout"===e&&(v=i._wrapperState)&&v.controlled&&"number"===i.type&&ae(i,"number",i.value)),v=r?ta(r):window,e){case"focusin":(Hn(v)||"true"===v.contentEditable)&&(yr=v,vr=r,br=null);break;case"focusout":br=vr=yr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,kr(o,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":kr(o,n,a)}var b;if(In)e:{switch(e){case"compositionstart":var g="onCompositionStart";break e;case"compositionend":g="onCompositionEnd";break e;case"compositionupdate":g="onCompositionUpdate";break e}g=void 0}else Bn?qn(e,n)&&(g="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(g="onCompositionStart");g&&(zn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==g?"onCompositionEnd"===g&&Bn&&(b=rn()):(tn="value"in(en=a)?en.value:en.textContent,Bn=!0)),0<(v=Ir(r,g)).length&&(g=new En(g,e,null,n,a),o.push({event:g,listeners:v}),b?g.data=b:null!==(b=Un(n))&&(g.data=b))),(b=Dn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Fn=!0,Rn);case"textInput":return(e=t.data)===Rn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!In&&qn(e,t)?(e=rn(),nn=tn=en=null,Bn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Ir(r,"onBeforeInput")).length&&(a=new En("onBeforeInput","beforeinput",null,n,a),o.push({event:a,listeners:r}),a.data=b))}Cr(o,t)}))}function Lr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ir(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5===a.tag&&null!==l&&(a=l,null!=(l=qe(e,n))&&r.unshift(Lr(e,l,a)),null!=(l=qe(e,t))&&r.push(Lr(e,l,a))),e=e.return}return r}function Ar(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Dr(e,t,n,r,a){for(var l=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,c=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==c&&(i=c,a?null!=(u=qe(n,l))&&o.unshift(Lr(n,u,i)):a||null!=(u=qe(n,l))&&o.push(Lr(n,u,i))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}function zr(){}var Rr=null,Fr=null;function qr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ur(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Br="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function $r(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Wr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Qr=0;var Kr=Math.random().toString(36).slice(2),Xr="__reactFiber$"+Kr,Yr="__reactProps$"+Kr,Gr="__reactContainer$"+Kr,Zr="__reactEvents$"+Kr;function Jr(e){var t=e[Xr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Gr]||n[Xr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Wr(e);null!==e;){if(n=e[Xr])return n;e=Wr(e)}return t}n=(e=n).parentNode}return null}function ea(e){return!(e=e[Xr]||e[Gr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ta(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function na(e){return e[Yr]||null}function ra(e){var t=e[Zr];return void 0===t&&(t=e[Zr]=new Set),t}var aa=[],la=-1;function oa(e){return{current:e}}function ia(e){0>la||(e.current=aa[la],aa[la]=null,la--)}function ua(e,t){la++,aa[la]=e.current,e.current=t}var ca={},sa=oa(ca),fa=oa(!1),da=ca;function pa(e,t){var n=e.type.contextTypes;if(!n)return ca;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,l={};for(a in n)l[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function ma(e){return null!=(e=e.childContextTypes)}function ha(){ia(fa),ia(sa)}function ya(e,t,n){if(sa.current!==ca)throw Error(o(168));ua(sa,t),ua(fa,n)}function va(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var l in r=r.getChildContext())if(!(l in e))throw Error(o(108,Q(t)||"Unknown",l));return a({},n,r)}function ba(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ca,da=sa.current,ua(sa,e),ua(fa,fa.current),!0}function ga(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=va(e,t,da),r.__reactInternalMemoizedMergedChildContext=e,ia(fa),ia(sa),ua(sa,e)):ia(fa),ua(fa,n)}var ka=null,wa=null,Ea=l.unstable_runWithPriority,xa=l.unstable_scheduleCallback,Sa=l.unstable_cancelCallback,_a=l.unstable_shouldYield,Ca=l.unstable_requestPaint,Oa=l.unstable_now,Na=l.unstable_getCurrentPriorityLevel,Pa=l.unstable_ImmediatePriority,Ta=l.unstable_UserBlockingPriority,ja=l.unstable_NormalPriority,Ma=l.unstable_LowPriority,La=l.unstable_IdlePriority,Ia={},Aa=void 0!==Ca?Ca:function(){},Da=null,za=null,Ra=!1,Fa=Oa(),qa=1e4>Fa?Oa:function(){return Oa()-Fa};function Ua(){switch(Na()){case Pa:return 99;case Ta:return 98;case ja:return 97;case Ma:return 96;case La:return 95;default:throw Error(o(332))}}function Ba(e){switch(e){case 99:return Pa;case 98:return Ta;case 97:return ja;case 96:return Ma;case 95:return La;default:throw Error(o(332))}}function Va(e,t){return e=Ba(e),Ea(e,t)}function Ha(e,t,n){return e=Ba(e),xa(e,t,n)}function $a(){if(null!==za){var e=za;za=null,Sa(e)}Wa()}function Wa(){if(!Ra&&null!==Da){Ra=!0;var e=0;try{var t=Da;Va(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Da=null}catch(t){throw null!==Da&&(Da=Da.slice(e+1)),xa(Pa,$a),t}finally{Ra=!1}}}var Qa=w.ReactCurrentBatchConfig;function Ka(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Xa=oa(null),Ya=null,Ga=null,Za=null;function Ja(){Za=Ga=Ya=null}function el(e){var t=Xa.current;ia(Xa),e.type._context._currentValue=t}function tl(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function nl(e,t){Ya=e,Za=Ga=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Io=!0),e.firstContext=null)}function rl(e,t){if(Za!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Za=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ga){if(null===Ya)throw Error(o(308));Ga=t,Ya.dependencies={lanes:0,firstContext:t,responders:null}}else Ga=Ga.next=t;return e._currentValue}var al=!1;function ll(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ol(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function il(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ul(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function cl(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===l?a=l=o:l=l.next=o,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function sl(e,t,n,r){var l=e.updateQueue;al=!1;var o=l.firstBaseUpdate,i=l.lastBaseUpdate,u=l.shared.pending;if(null!==u){l.shared.pending=null;var c=u,s=c.next;c.next=null,null===i?o=s:i.next=s,i=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==i&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==o){for(d=l.baseState,i=0,f=s=c=null;;){u=o.lane;var p=o.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var m=e,h=o;switch(u=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,u);break e}d=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(u="function"==typeof(m=h.payload)?m.call(p,d,u):m))break e;d=a({},d,u);break e;case 2:al=!0}}null!==o.callback&&(e.flags|=32,null===(u=l.effects)?l.effects=[o]:u.push(o))}else p={eventTime:p,lane:u,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,i|=u;if(null===(o=o.next)){if(null===(u=l.shared.pending))break;o=u.next,u.next=null,l.lastBaseUpdate=u,l.shared.pending=null}}null===f&&(c=d),l.baseState=c,l.firstBaseUpdate=s,l.lastBaseUpdate=f,Ri|=i,e.lanes=i,e.memoizedState=d}}function fl(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var dl=(new r.Component).refs;function pl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ml={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=cu(),a=su(e),l=il(r,a);l.payload=t,null!=n&&(l.callback=n),ul(e,l),fu(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=cu(),a=su(e),l=il(r,a);l.tag=1,l.payload=t,null!=n&&(l.callback=n),ul(e,l),fu(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=cu(),r=su(e),a=il(n,r);a.tag=2,null!=t&&(a.callback=t),ul(e,a),fu(e,r,n)}};function hl(e,t,n,r,a,l,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,o):!t.prototype||!t.prototype.isPureReactComponent||(!cr(n,r)||!cr(a,l))}function yl(e,t,n){var r=!1,a=ca,l=t.contextType;return"object"==typeof l&&null!==l?l=rl(l):(a=ma(t)?da:sa.current,l=(r=null!=(r=t.contextTypes))?pa(e,a):ca),t=new t(n,l),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ml,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=l),t}function vl(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ml.enqueueReplaceState(t,t.state,null)}function bl(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=dl,ll(e);var l=t.contextType;"object"==typeof l&&null!==l?a.context=rl(l):(l=ma(t)?da:sa.current,a.context=pa(e,l)),sl(e,n,a,r),a.state=e.memoizedState,"function"==typeof(l=t.getDerivedStateFromProps)&&(pl(e,t,l,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&ml.enqueueReplaceState(a,a.state,null),sl(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var gl=Array.isArray;function kl(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===dl&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function wl(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function El(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Vu(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function i(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Qu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=kl(e,t,n),r.return=e,r):((r=Hu(n.type,n.key,n.props,null,e.mode,r)).ref=kl(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ku(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,l){return null===t||7!==t.tag?((t=$u(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Hu(t.type,t.key,t.props,null,e.mode,n)).ref=kl(e,null,t),n.return=e,n;case x:return(t=Ku(t,e.mode,n)).return=e,t}if(gl(t)||B(t))return(t=$u(t,e.mode,n,null)).return=e,t;wl(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===a?n.type===S?f(e,t,n.props.children,r,a):c(e,t,n,r):null;case x:return n.key===a?s(e,t,n,r):null}if(gl(n)||B(n))return null!==a?null:f(e,t,n,r,null);wl(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,a,r.key):c(t,e,r,a);case x:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(gl(r)||B(r))return f(t,e=e.get(n)||null,r,a,null);wl(t,r)}return null}function h(a,o,i,u){for(var c=null,s=null,f=o,h=o=0,y=null;null!==f&&h<i.length;h++){f.index>h?(y=f,f=null):y=f.sibling;var v=p(a,f,i[h],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(a,f),o=l(v,o,h),null===s?c=v:s.sibling=v,s=v,f=y}if(h===i.length)return n(a,f),c;if(null===f){for(;h<i.length;h++)null!==(f=d(a,i[h],u))&&(o=l(f,o,h),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(a,f);h<i.length;h++)null!==(y=m(f,a,h,i[h],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?h:y.key),o=l(y,o,h),null===s?c=y:s.sibling=y,s=y);return e&&f.forEach((function(e){return t(a,e)})),c}function y(a,i,u,c){var s=B(u);if("function"!=typeof s)throw Error(o(150));if(null==(u=s.call(u)))throw Error(o(151));for(var f=s=null,h=i,y=i=0,v=null,b=u.next();null!==h&&!b.done;y++,b=u.next()){h.index>y?(v=h,h=null):v=h.sibling;var g=p(a,h,b.value,c);if(null===g){null===h&&(h=v);break}e&&h&&null===g.alternate&&t(a,h),i=l(g,i,y),null===f?s=g:f.sibling=g,f=g,h=v}if(b.done)return n(a,h),s;if(null===h){for(;!b.done;y++,b=u.next())null!==(b=d(a,b.value,c))&&(i=l(b,i,y),null===f?s=b:f.sibling=b,f=b);return s}for(h=r(a,h);!b.done;y++,b=u.next())null!==(b=m(h,a,y,b.value,c))&&(e&&null!==b.alternate&&h.delete(null===b.key?y:b.key),i=l(b,i,y),null===f?s=b:f.sibling=b,f=b);return e&&h.forEach((function(e){return t(a,e)})),s}return function(e,r,l,u){var c="object"==typeof l&&null!==l&&l.type===S&&null===l.key;c&&(l=l.props.children);var s="object"==typeof l&&null!==l;if(s)switch(l.$$typeof){case E:e:{for(s=l.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(l.type===S){n(e,c.sibling),(r=a(c,l.props.children)).return=e,e=r;break e}break;default:if(c.elementType===l.type){n(e,c.sibling),(r=a(c,l.props)).ref=kl(e,c,l),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}l.type===S?((r=$u(l.props.children,e.mode,u,l.key)).return=e,e=r):((u=Hu(l.type,l.key,l.props,null,e.mode,u)).ref=kl(e,r,l),u.return=e,e=u)}return i(e);case x:e:{for(c=l.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===l.containerInfo&&r.stateNode.implementation===l.implementation){n(e,r.sibling),(r=a(r,l.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ku(l,e.mode,u)).return=e,e=r}return i(e)}if("string"==typeof l||"number"==typeof l)return l=""+l,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,l)).return=e,e=r):(n(e,r),(r=Qu(l,e.mode,u)).return=e,e=r),i(e);if(gl(l))return h(e,r,l,u);if(B(l))return y(e,r,l,u);if(s&&wl(e,l),void 0===l&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(o(152,Q(e.type)||"Component"))}return n(e,r)}}var xl=El(!0),Sl=El(!1),_l={},Cl=oa(_l),Ol=oa(_l),Nl=oa(_l);function Pl(e){if(e===_l)throw Error(o(174));return e}function Tl(e,t){switch(ua(Nl,t),ua(Ol,e),ua(Cl,_l),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:me(null,"");break;default:t=me(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ia(Cl),ua(Cl,t)}function jl(){ia(Cl),ia(Ol),ia(Nl)}function Ml(e){Pl(Nl.current);var t=Pl(Cl.current),n=me(t,e.type);t!==n&&(ua(Ol,e),ua(Cl,n))}function Ll(e){Ol.current===e&&(ia(Cl),ia(Ol))}var Il=oa(0);function Al(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Dl=null,zl=null,Rl=!1;function Fl(e,t){var n=Uu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ql(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ul(e){if(Rl){var t=zl;if(t){var n=t;if(!ql(e,t)){if(!(t=$r(n.nextSibling))||!ql(e,t))return e.flags=-1025&e.flags|2,Rl=!1,void(Dl=e);Fl(Dl,n)}Dl=e,zl=$r(t.firstChild)}else e.flags=-1025&e.flags|2,Rl=!1,Dl=e}}function Bl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Dl=e}function Vl(e){if(e!==Dl)return!1;if(!Rl)return Bl(e),Rl=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ur(t,e.memoizedProps))for(t=zl;t;)Fl(e,t),t=$r(t.nextSibling);if(Bl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){zl=$r(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}zl=null}}else zl=Dl?$r(e.stateNode.nextSibling):null;return!0}function Hl(){zl=Dl=null,Rl=!1}var $l=[];function Wl(){for(var e=0;e<$l.length;e++)$l[e]._workInProgressVersionPrimary=null;$l.length=0}var Ql=w.ReactCurrentDispatcher,Kl=w.ReactCurrentBatchConfig,Xl=0,Yl=null,Gl=null,Zl=null,Jl=!1,eo=!1;function to(){throw Error(o(321))}function no(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ro(e,t,n,r,a,l){if(Xl=l,Yl=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ql.current=null===e||null===e.memoizedState?To:jo,e=n(r,a),eo){l=0;do{if(eo=!1,!(25>l))throw Error(o(301));l+=1,Zl=Gl=null,t.updateQueue=null,Ql.current=Mo,e=n(r,a)}while(eo)}if(Ql.current=Po,t=null!==Gl&&null!==Gl.next,Xl=0,Zl=Gl=Yl=null,Jl=!1,t)throw Error(o(300));return e}function ao(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Zl?Yl.memoizedState=Zl=e:Zl=Zl.next=e,Zl}function lo(){if(null===Gl){var e=Yl.alternate;e=null!==e?e.memoizedState:null}else e=Gl.next;var t=null===Zl?Yl.memoizedState:Zl.next;if(null!==t)Zl=t,Gl=e;else{if(null===e)throw Error(o(310));e={memoizedState:(Gl=e).memoizedState,baseState:Gl.baseState,baseQueue:Gl.baseQueue,queue:Gl.queue,next:null},null===Zl?Yl.memoizedState=Zl=e:Zl=Zl.next=e}return Zl}function oo(e,t){return"function"==typeof t?t(e):t}function io(e){var t=lo(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=Gl,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}r.baseQueue=a=l,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=i=l=null,c=a;do{var s=c.lane;if((Xl&s)===s)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(i=u=f,l=r):u=u.next=f,Yl.lanes|=s,Ri|=s}c=c.next}while(null!==c&&c!==a);null===u?l=r:u.next=i,ir(r,t.memoizedState)||(Io=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function uo(e){var t=lo(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);ir(l,t.memoizedState)||(Io=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function co(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Xl&e)===e)&&(t._workInProgressVersionPrimary=r,$l.push(t))),e)return n(t._source);throw $l.push(t),Error(o(350))}function so(e,t,n,r){var a=Ti;if(null===a)throw Error(o(349));var l=t._getVersion,i=l(t._source),u=Ql.current,c=u.useState((function(){return co(a,t,n)})),s=c[1],f=c[0];c=Zl;var d=e.memoizedState,p=d.refs,m=p.getSnapshot,h=d.source;d=d.subscribe;var y=Yl;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=s;var e=l(t._source);if(!ir(i,e)){e=n(t._source),ir(f,e)||(s(e),e=su(y),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,o=e;0<o;){var u=31-Ht(o),c=1<<u;r[u]|=e,o&=~c}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=su(y);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(m,n)&&ir(h,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:oo,lastRenderedState:f}).dispatch=s=No.bind(null,Yl,e),c.queue=e,c.baseQueue=null,f=co(a,t,n),c.memoizedState=c.baseState=f),f}function fo(e,t,n){return so(lo(),e,t,n)}function po(e){var t=ao();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:oo,lastRenderedState:e}).dispatch=No.bind(null,Yl,e),[t.memoizedState,e]}function mo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Yl.updateQueue)?(t={lastEffect:null},Yl.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ho(e){return e={current:e},ao().memoizedState=e}function yo(){return lo().memoizedState}function vo(e,t,n,r){var a=ao();Yl.flags|=e,a.memoizedState=mo(1|t,n,void 0,void 0===r?null:r)}function bo(e,t,n,r){var a=lo();r=void 0===r?null:r;var l=void 0;if(null!==Gl){var o=Gl.memoizedState;if(l=o.destroy,null!==r&&no(r,o.deps))return void mo(t,n,l,r)}Yl.flags|=e,a.memoizedState=mo(1|t,n,l,r)}function go(e,t){return vo(516,4,e,t)}function ko(e,t){return bo(516,4,e,t)}function wo(e,t){return bo(4,2,e,t)}function Eo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xo(e,t,n){return n=null!=n?n.concat([e]):null,bo(4,2,Eo.bind(null,t,e),n)}function So(){}function _o(e,t){var n=lo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&no(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Co(e,t){var n=lo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&no(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oo(e,t){var n=Ua();Va(98>n?98:n,(function(){e(!0)})),Va(97<n?97:n,(function(){var n=Kl.transition;Kl.transition=1;try{e(!1),t()}finally{Kl.transition=n}}))}function No(e,t,n){var r=cu(),a=su(e),l={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},o=t.pending;if(null===o?l.next=l:(l.next=o.next,o.next=l),t.pending=l,o=e.alternate,e===Yl||null!==o&&o===Yl)eo=Jl=!0;else{if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,u=o(i,n);if(l.eagerReducer=o,l.eagerState=u,ir(u,i))return}catch(e){}fu(e,a,r)}}var Po={readContext:rl,useCallback:to,useContext:to,useEffect:to,useImperativeHandle:to,useLayoutEffect:to,useMemo:to,useReducer:to,useRef:to,useState:to,useDebugValue:to,useDeferredValue:to,useTransition:to,useMutableSource:to,useOpaqueIdentifier:to,unstable_isNewReconciler:!1},To={readContext:rl,useCallback:function(e,t){return ao().memoizedState=[e,void 0===t?null:t],e},useContext:rl,useEffect:go,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,vo(4,2,Eo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vo(4,2,e,t)},useMemo:function(e,t){var n=ao();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ao();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=No.bind(null,Yl,e),[r.memoizedState,e]},useRef:ho,useState:po,useDebugValue:So,useDeferredValue:function(e){var t=po(e),n=t[0],r=t[1];return go((function(){var t=Kl.transition;Kl.transition=1;try{r(e)}finally{Kl.transition=t}}),[e]),n},useTransition:function(){var e=po(!1),t=e[0];return ho(e=Oo.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ao();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},so(r,e,t,n)},useOpaqueIdentifier:function(){if(Rl){var e=!1,t=function(e){return{$$typeof:A,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Qr++).toString(36))),Error(o(355))})),n=po(t)[1];return 0==(2&Yl.mode)&&(Yl.flags|=516,mo(5,(function(){n("r:"+(Qr++).toString(36))}),void 0,null)),t}return po(t="r:"+(Qr++).toString(36)),t},unstable_isNewReconciler:!1},jo={readContext:rl,useCallback:_o,useContext:rl,useEffect:ko,useImperativeHandle:xo,useLayoutEffect:wo,useMemo:Co,useReducer:io,useRef:yo,useState:function(){return io(oo)},useDebugValue:So,useDeferredValue:function(e){var t=io(oo),n=t[0],r=t[1];return ko((function(){var t=Kl.transition;Kl.transition=1;try{r(e)}finally{Kl.transition=t}}),[e]),n},useTransition:function(){var e=io(oo)[0];return[yo().current,e]},useMutableSource:fo,useOpaqueIdentifier:function(){return io(oo)[0]},unstable_isNewReconciler:!1},Mo={readContext:rl,useCallback:_o,useContext:rl,useEffect:ko,useImperativeHandle:xo,useLayoutEffect:wo,useMemo:Co,useReducer:uo,useRef:yo,useState:function(){return uo(oo)},useDebugValue:So,useDeferredValue:function(e){var t=uo(oo),n=t[0],r=t[1];return ko((function(){var t=Kl.transition;Kl.transition=1;try{r(e)}finally{Kl.transition=t}}),[e]),n},useTransition:function(){var e=uo(oo)[0];return[yo().current,e]},useMutableSource:fo,useOpaqueIdentifier:function(){return uo(oo)[0]},unstable_isNewReconciler:!1},Lo=w.ReactCurrentOwner,Io=!1;function Ao(e,t,n,r){t.child=null===e?Sl(t,null,n,r):xl(t,e.child,n,r)}function Do(e,t,n,r,a){n=n.render;var l=t.ref;return nl(t,a),r=ro(e,t,n,r,l,a),null===e||Io?(t.flags|=1,Ao(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,ni(e,t,a))}function zo(e,t,n,r,a,l){if(null===e){var o=n.type;return"function"!=typeof o||Bu(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Hu(n.type,null,r,t,t.mode,l)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ro(e,t,o,r,a,l))}return o=e.child,0==(a&l)&&(a=o.memoizedProps,(n=null!==(n=n.compare)?n:cr)(a,r)&&e.ref===t.ref)?ni(e,t,l):(t.flags|=1,(e=Vu(o,r)).ref=t.ref,e.return=t,t.child=e)}function Ro(e,t,n,r,a,l){if(null!==e&&cr(e.memoizedProps,r)&&e.ref===t.ref){if(Io=!1,0==(l&a))return t.lanes=e.lanes,ni(e,t,l);0!=(16384&e.flags)&&(Io=!0)}return Uo(e,t,n,r,l)}function Fo(e,t,n){var r=t.pendingProps,a=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},gu(t,n);else{if(0==(1073741824&n))return e=null!==l?l.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},gu(t,e),null;t.memoizedState={baseLanes:0},gu(t,null!==l?l.baseLanes:n)}else null!==l?(r=l.baseLanes|n,t.memoizedState=null):r=n,gu(t,r);return Ao(e,t,a,n),t.child}function qo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Uo(e,t,n,r,a){var l=ma(n)?da:sa.current;return l=pa(t,l),nl(t,a),n=ro(e,t,n,r,l,a),null===e||Io?(t.flags|=1,Ao(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,ni(e,t,a))}function Bo(e,t,n,r,a){if(ma(n)){var l=!0;ba(t)}else l=!1;if(nl(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),yl(t,n,r),bl(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,i=t.memoizedProps;o.props=i;var u=o.context,c=n.contextType;"object"==typeof c&&null!==c?c=rl(c):c=pa(t,c=ma(n)?da:sa.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof o.getSnapshotBeforeUpdate;f||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i!==r||u!==c)&&vl(t,o,r,c),al=!1;var d=t.memoizedState;o.state=d,sl(t,r,o,a),u=t.memoizedState,i!==r||d!==u||fa.current||al?("function"==typeof s&&(pl(t,n,s,r),u=t.memoizedState),(i=al||hl(t,n,i,r,d,u,c))?(f||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4)):("function"==typeof o.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=c,r=i):("function"==typeof o.componentDidMount&&(t.flags|=4),r=!1)}else{o=t.stateNode,ol(e,t),i=t.memoizedProps,c=t.type===t.elementType?i:Ka(t.type,i),o.props=c,f=t.pendingProps,d=o.context,"object"==typeof(u=n.contextType)&&null!==u?u=rl(u):u=pa(t,u=ma(n)?da:sa.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i!==f||d!==u)&&vl(t,o,r,u),al=!1,d=t.memoizedState,o.state=d,sl(t,r,o,a);var m=t.memoizedState;i!==f||d!==m||fa.current||al?("function"==typeof p&&(pl(t,n,p,r),m=t.memoizedState),(c=al||hl(t,n,c,r,d,m,u))?(s||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,m,u),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=m),o.props=r,o.state=m,o.context=u,r=c):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Vo(e,t,n,r,l,a)}function Vo(e,t,n,r,a,l){qo(e,t);var o=0!=(64&t.flags);if(!r&&!o)return a&&ga(t,n,!1),ni(e,t,l);r=t.stateNode,Lo.current=t;var i=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=xl(t,e.child,null,l),t.child=xl(t,null,i,l)):Ao(e,t,i,l),t.memoizedState=r.state,a&&ga(t,n,!0),t.child}function Ho(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),Tl(e,t.containerInfo)}var $o,Wo,Qo,Ko={dehydrated:null,retryLane:0};function Xo(e,t,n){var r,a=t.pendingProps,l=Il.current,o=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&l)),r?(o=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(l|=1),ua(Il,1&l),null===e?(void 0!==a.fallback&&Ul(t),e=a.children,l=a.fallback,o?(e=Yo(t,e,l,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ko,e):"number"==typeof a.unstable_expectedLoadTime?(e=Yo(t,e,l,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ko,t.lanes=33554432,e):((n=Wu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,o?(a=Zo(e,t,a.children,a.fallback,n),o=t.child,l=e.child.memoizedState,o.memoizedState=null===l?{baseLanes:n}:{baseLanes:l.baseLanes|n},o.childLanes=e.childLanes&~n,t.memoizedState=Ko,a):(n=Go(e,t,a.children,n),t.memoizedState=null,n))}function Yo(e,t,n,r){var a=e.mode,l=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==l?(l.childLanes=0,l.pendingProps=t):l=Wu(t,a,0,null),n=$u(n,a,r,null),l.return=e,n.return=e,l.sibling=n,e.child=l,n}function Go(e,t,n,r){var a=e.child;return e=a.sibling,n=Vu(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Zo(e,t,n,r,a){var l=t.mode,o=e.child;e=o.sibling;var i={mode:"hidden",children:n};return 0==(2&l)&&t.child!==o?((n=t.child).childLanes=0,n.pendingProps=i,null!==(o=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=o,o.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Vu(o,i),null!==e?r=Vu(e,r):(r=$u(r,l,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Jo(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),tl(e.return,t)}function ei(e,t,n,r,a,l){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:l}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a,o.lastEffect=l)}function ti(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if(Ao(e,t,r.children,n),0!=(2&(r=Il.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Jo(e,n);else if(19===e.tag)Jo(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ua(Il,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Al(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),ei(t,!1,a,n,l,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Al(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}ei(t,!0,n,null,l,t.lastEffect);break;case"together":ei(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ni(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ri|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Vu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Vu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function ri(e,t){if(!Rl)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ai(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ma(t.type)&&ha(),null;case 3:return jl(),ia(fa),ia(sa),Wl(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vl(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ll(t);var l=Pl(Nl.current);if(n=t.type,null!==e&&null!=t.stateNode)Wo(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=Pl(Cl.current),Vl(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[Xr]=t,r[Yr]=i,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<xr.length;e++)Or(xr[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,i),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Or("invalid",r);break;case"textarea":ue(r,i),Or("invalid",r)}for(var c in Se(n,i),e=null,i)i.hasOwnProperty(c)&&(l=i[c],"children"===c?"string"==typeof l?r.textContent!==l&&(e=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(e=["children",""+l]):u.hasOwnProperty(c)&&null!=l&&"onScroll"===c&&Or("scroll",r));switch(n){case"input":Y(r),re(r,i,!0);break;case"textarea":Y(r),se(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=zr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===l.nodeType?l:l.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Xr]=t,e[Yr]=r,$o(e,t),t.stateNode=e,c=_e(n,r),n){case"dialog":Or("cancel",e),Or("close",e),l=r;break;case"iframe":case"object":case"embed":Or("load",e),l=r;break;case"video":case"audio":for(l=0;l<xr.length;l++)Or(xr[l],e);l=r;break;case"source":Or("error",e),l=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),l=r;break;case"details":Or("toggle",e),l=r;break;case"input":ee(e,r),l=J(e,r),Or("invalid",e);break;case"option":l=le(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=a({},r,{value:void 0}),Or("invalid",e);break;case"textarea":ue(e,r),l=ie(e,r),Or("invalid",e);break;default:l=r}Se(n,l);var s=l;for(i in s)if(s.hasOwnProperty(i)){var f=s[i];"style"===i?Ee(e,f):"dangerouslySetInnerHTML"===i?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===i?"string"==typeof f?("textarea"!==n||""!==f)&&be(e,f):"number"==typeof f&&be(e,""+f):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(u.hasOwnProperty(i)?null!=f&&"onScroll"===i&&Or("scroll",e):null!=f&&k(e,i,f,c))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?oe(e,!!r.multiple,i,!1):null!=r.defaultValue&&oe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=zr)}qr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Qo(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));n=Pl(Nl.current),Pl(Cl.current),Vl(t)?(r=t.stateNode,n=t.memoizedProps,r[Xr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Xr]=t,t.stateNode=r)}return null;case 13:return ia(Il),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vl(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Il.current)?0===Ai&&(Ai=3):(0!==Ai&&3!==Ai||(Ai=4),null===Ti||0==(134217727&Ri)&&0==(134217727&Fi)||hu(Ti,Mi))),(r||n)&&(t.flags|=4),null);case 4:return jl(),null===e&&Pr(t.stateNode.containerInfo),null;case 10:return el(t),null;case 17:return ma(t.type)&&ha(),null;case 19:if(ia(Il),null===(r=t.memoizedState))return null;if(i=0!=(64&t.flags),null===(c=r.rendering))if(i)ri(r,!1);else{if(0!==Ai||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Al(e))){for(t.flags|=64,ri(r,!1),null!==(i=c.updateQueue)&&(t.updateQueue=i,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(c=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=c.childLanes,i.lanes=c.lanes,i.child=c.child,i.memoizedProps=c.memoizedProps,i.memoizedState=c.memoizedState,i.updateQueue=c.updateQueue,i.type=c.type,e=c.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ua(Il,1&Il.current|2),t.child}e=e.sibling}null!==r.tail&&qa()>Vi&&(t.flags|=64,i=!0,ri(r,!1),t.lanes=33554432)}else{if(!i)if(null!==(e=Al(c))){if(t.flags|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),ri(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Rl)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*qa()-r.renderingStartTime>Vi&&1073741824!==n&&(t.flags|=64,i=!0,ri(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=qa(),n.sibling=null,t=Il.current,ua(Il,i?1&t|2:1&t),n):null;case 23:case 24:return ku(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(o(156,t.tag))}function li(e){switch(e.tag){case 1:ma(e.type)&&ha();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(jl(),ia(fa),ia(sa),Wl(),0!=(64&(t=e.flags)))throw Error(o(285));return e.flags=-4097&t|64,e;case 5:return Ll(e),null;case 13:return ia(Il),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ia(Il),null;case 4:return jl(),null;case 10:return el(e),null;case 23:case 24:return ku(),null;default:return null}}function oi(e,t){try{var n="",r=t;do{n+=W(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ii(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}$o=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wo=function(e,t,n,r){var l=e.memoizedProps;if(l!==r){e=t.stateNode,Pl(Cl.current);var o,i=null;switch(n){case"input":l=J(e,l),r=J(e,r),i=[];break;case"option":l=le(e,l),r=le(e,r),i=[];break;case"select":l=a({},l,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":l=ie(e,l),r=ie(e,r),i=[];break;default:"function"!=typeof l.onClick&&"function"==typeof r.onClick&&(e.onclick=zr)}for(f in Se(n,r),n=null,l)if(!r.hasOwnProperty(f)&&l.hasOwnProperty(f)&&null!=l[f])if("style"===f){var c=l[f];for(o in c)c.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?i||(i=[]):(i=i||[]).push(f,null));for(f in r){var s=r[f];if(c=null!=l?l[f]:void 0,r.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(o in c)!c.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&c[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(f,n)),n=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(i=i||[]).push(f,s)):"children"===f?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Or("scroll",e),i||c===s||(i=[])):"object"==typeof s&&null!==s&&s.$$typeof===A?s.toString():(i=i||[]).push(f,s))}n&&(i=i||[]).push("style",n);var f=i;(t.updateQueue=f)&&(t.flags|=4)}},Qo=function(e,t,n,r){n!==r&&(t.flags|=4)};var ui="function"==typeof WeakMap?WeakMap:Map;function ci(e,t,n){(n=il(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Qi||(Qi=!0,Ki=r),ii(0,t)},n}function si(e,t,n){(n=il(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return ii(0,t),r(a)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Xi?Xi=new Set([this]):Xi.add(this),ii(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fi="function"==typeof WeakSet?WeakSet:Set;function di(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){zu(e,t)}else t.current=null}function pi(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ka(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(o(163))}function mi(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(Iu(n,e),Lu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ka(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fl(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fl(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&qr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Et(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(o(163))}function hi(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=we("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function yi(e,t){if(wa&&"function"==typeof wa.onCommitFiberUnmount)try{wa.onCommitFiberUnmount(ka,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))Iu(t,n);else{r=t;try{a()}catch(e){zu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(di(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){zu(t,e)}break;case 5:di(t);break;case 4:Ei(e,t)}}function vi(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function bi(e){return 5===e.tag||3===e.tag||4===e.tag}function gi(e){e:{for(var t=e.return;null!==t;){if(bi(t))break e;t=t.return}throw Error(o(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.flags&&(be(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||bi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?ki(e,n,t):wi(e,n,t)}function ki(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=zr));else if(4!==r&&null!==(e=e.child))for(ki(e,t,n),e=e.sibling;null!==e;)ki(e,t,n),e=e.sibling}function wi(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(wi(e,t,n),e=e.sibling;null!==e;)wi(e,t,n),e=e.sibling}function Ei(e,t){for(var n,r,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(o(160));switch(n=l.stateNode,l.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var i=e,u=a,c=u;;)if(yi(i,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(i=n,u=a.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(yi(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function xi(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var l=t.updateQueue;if(t.updateQueue=null,null!==l){for(n[Yr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),_e(e,a),t=_e(e,r),a=0;a<l.length;a+=2){var i=l[a],u=l[a+1];"style"===i?Ee(n,u):"dangerouslySetInnerHTML"===i?ve(n,u):"children"===i?be(n,u):k(n,i,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(l=r.value)?oe(n,!!r.multiple,l,!1):e!==!!r.multiple&&(null!=r.defaultValue?oe(n,!!r.multiple,r.defaultValue,!0):oe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Et(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bi=qa(),hi(t.child,!0)),void Si(t);case 19:return void Si(t);case 17:return;case 23:case 24:return void hi(t,null!==t.memoizedState)}throw Error(o(163))}function Si(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fi),t.forEach((function(t){var r=Fu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function _i(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Ci=Math.ceil,Oi=w.ReactCurrentDispatcher,Ni=w.ReactCurrentOwner,Pi=0,Ti=null,ji=null,Mi=0,Li=0,Ii=oa(0),Ai=0,Di=null,zi=0,Ri=0,Fi=0,qi=0,Ui=null,Bi=0,Vi=1/0;function Hi(){Vi=qa()+500}var $i,Wi=null,Qi=!1,Ki=null,Xi=null,Yi=!1,Gi=null,Zi=90,Ji=[],eu=[],tu=null,nu=0,ru=null,au=-1,lu=0,ou=0,iu=null,uu=!1;function cu(){return 0!=(48&Pi)?qa():-1!==au?au:au=qa()}function su(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ua()?1:2;if(0===lu&&(lu=zi),0!==Qa.transition){0!==ou&&(ou=null!==Ui?Ui.pendingLanes:0),e=lu;var t=4186112&~ou;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Ua(),0!=(4&Pi)&&98===e?e=qt(12,lu):e=qt(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),lu),e}function fu(e,t,n){if(50<nu)throw nu=0,ru=null,Error(o(185));if(null===(e=du(e,t)))return null;Vt(e,t,n),e===Ti&&(Fi|=t,4===Ai&&hu(e,Mi));var r=Ua();1===t?0!=(8&Pi)&&0==(48&Pi)?yu(e):(pu(e,n),0===Pi&&(Hi(),$a())):(0==(4&Pi)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,n)),Ui=e}function du(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,l=e.expirationTimes,i=e.pendingLanes;0<i;){var u=31-Ht(i),c=1<<u,s=l[u];if(-1===s){if(0==(c&r)||0!=(c&a)){s=t,zt(c);var f=Dt;l[u]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);i&=~c}if(r=Rt(e,e===Ti?Mi:0),t=Dt,0===r)null!==n&&(n!==Ia&&Sa(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ia&&Sa(n)}15===t?(n=yu.bind(null,e),null===Da?(Da=[n],za=xa(Pa,Wa)):Da.push(n),n=Ia):14===t?n=Ha(99,yu.bind(null,e)):n=Ha(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(o(358,e))}}(t),mu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function mu(e){if(au=-1,ou=lu=0,0!=(48&Pi))throw Error(o(327));var t=e.callbackNode;if(Mu()&&e.callbackNode!==t)return null;var n=Rt(e,e===Ti?Mi:0);if(0===n)return null;var r=n,a=Pi;Pi|=16;var l=xu();for(Ti===e&&Mi===r||(Hi(),wu(e,r));;)try{Cu();break}catch(t){Eu(e,t)}if(Ja(),Oi.current=l,Pi=a,null!==ji?r=0:(Ti=null,Mi=0,r=Ai),0!=(zi&Fi))wu(e,0);else if(0!==r){if(2===r&&(Pi|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=Ft(e))&&(r=Su(e,n))),1===r)throw t=Di,wu(e,0),hu(e,n),pu(e,qa()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(o(345));case 2:Pu(e);break;case 3:if(hu(e,n),(62914560&n)===n&&10<(r=Bi+500-qa())){if(0!==Rt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){cu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Br(Pu.bind(null,e),r);break}Pu(e);break;case 4:if(hu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var i=31-Ht(n);l=1<<i,(i=r[i])>a&&(a=i),n&=~l}if(n=a,10<(n=(120>(n=qa()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ci(n/1960))-n)){e.timeoutHandle=Br(Pu.bind(null,e),n);break}Pu(e);break;case 5:Pu(e);break;default:throw Error(o(329))}}return pu(e,qa()),e.callbackNode===t?mu.bind(null,e):null}function hu(e,t){for(t&=~qi,t&=~Fi,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ht(t),r=1<<n;e[n]=-1,t&=~r}}function yu(e){if(0!=(48&Pi))throw Error(o(327));if(Mu(),e===Ti&&0!=(e.expiredLanes&Mi)){var t=Mi,n=Su(e,t);0!=(zi&Fi)&&(n=Su(e,t=Rt(e,t)))}else n=Su(e,t=Rt(e,0));if(0!==e.tag&&2===n&&(Pi|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=Ft(e))&&(n=Su(e,t))),1===n)throw n=Di,wu(e,0),hu(e,t),pu(e,qa()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),pu(e,qa()),null}function vu(e,t){var n=Pi;Pi|=1;try{return e(t)}finally{0===(Pi=n)&&(Hi(),$a())}}function bu(e,t){var n=Pi;Pi&=-2,Pi|=8;try{return e(t)}finally{0===(Pi=n)&&(Hi(),$a())}}function gu(e,t){ua(Ii,Li),Li|=t,zi|=t}function ku(){Li=Ii.current,ia(Ii)}function wu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Vr(n)),null!==ji)for(n=ji.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ha();break;case 3:jl(),ia(fa),ia(sa),Wl();break;case 5:Ll(r);break;case 4:jl();break;case 13:case 19:ia(Il);break;case 10:el(r);break;case 23:case 24:ku()}n=n.return}Ti=e,ji=Vu(e.current,null),Mi=Li=zi=t,Ai=0,Di=null,qi=Fi=Ri=0}function Eu(e,t){for(;;){var n=ji;try{if(Ja(),Ql.current=Po,Jl){for(var r=Yl.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}Jl=!1}if(Xl=0,Zl=Gl=Yl=null,eo=!1,Ni.current=null,null===n||null===n.return){Ai=1,Di=t,ji=null;break}e:{var l=e,o=n.return,i=n,u=t;if(t=Mi,i.flags|=2048,i.firstEffect=i.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u;if(0==(2&i.mode)){var s=i.alternate;s?(i.updateQueue=s.updateQueue,i.memoizedState=s.memoizedState,i.lanes=s.lanes):(i.updateQueue=null,i.memoizedState=null)}var f=0!=(1&Il.current),d=o;do{var p;if(p=13===d.tag){var m=d.memoizedState;if(null!==m)p=null!==m.dehydrated;else{var h=d.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!f)}}if(p){var y=d.updateQueue;if(null===y){var v=new Set;v.add(c),d.updateQueue=v}else y.add(c);if(0==(2&d.mode)){if(d.flags|=64,i.flags|=16384,i.flags&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var b=il(-1,1);b.tag=2,ul(i,b)}i.lanes|=1;break e}u=void 0,i=t;var g=l.pingCache;if(null===g?(g=l.pingCache=new ui,u=new Set,g.set(c,u)):void 0===(u=g.get(c))&&(u=new Set,g.set(c,u)),!u.has(i)){u.add(i);var k=Ru.bind(null,l,c,i);c.then(k,k)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Q(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ai&&(Ai=2),u=oi(u,i),d=o;do{switch(d.tag){case 3:l=u,d.flags|=4096,t&=-t,d.lanes|=t,cl(d,ci(0,l,t));break e;case 1:l=u;var w=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Xi||!Xi.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,cl(d,si(d,l,t));break e}}d=d.return}while(null!==d)}Nu(n)}catch(e){t=e,ji===n&&null!==n&&(ji=n=n.return);continue}break}}function xu(){var e=Oi.current;return Oi.current=Po,null===e?Po:e}function Su(e,t){var n=Pi;Pi|=16;var r=xu();for(Ti===e&&Mi===t||wu(e,t);;)try{_u();break}catch(t){Eu(e,t)}if(Ja(),Pi=n,Oi.current=r,null!==ji)throw Error(o(261));return Ti=null,Mi=0,Ai}function _u(){for(;null!==ji;)Ou(ji)}function Cu(){for(;null!==ji&&!_a();)Ou(ji)}function Ou(e){var t=$i(e.alternate,e,Li);e.memoizedProps=e.pendingProps,null===t?Nu(e):ji=t,Ni.current=null}function Nu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ai(n,t,Li)))return void(ji=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Li)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=li(t)))return n.flags&=2047,void(ji=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(ji=t);ji=t=e}while(null!==t);0===Ai&&(Ai=5)}function Pu(e){var t=Ua();return Va(99,Tu.bind(null,e,t)),null}function Tu(e,t){do{Mu()}while(null!==Gi);if(0!=(48&Pi))throw Error(o(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,l=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var i=e.eventTimes,u=e.expirationTimes;0<l;){var c=31-Ht(l),s=1<<c;a[c]=0,i[c]=-1,u[c]=-1,l&=~s}if(null!==tu&&0==(24&r)&&tu.has(e)&&tu.delete(e),e===Ti&&(ji=Ti=null,Mi=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=Pi,Pi|=32,Ni.current=null,Rr=Xt,mr(i=pr())){if("selectionStart"in i)u={start:i.selectionStart,end:i.selectionEnd};else e:if(u=(u=i.ownerDocument)&&u.defaultView||window,(s=u.getSelection&&u.getSelection())&&0!==s.rangeCount){u=s.anchorNode,l=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,m=0,h=0,y=i,v=null;t:for(;;){for(var b;y!==u||0!==l&&3!==y.nodeType||(d=f+l),y!==c||0!==s&&3!==y.nodeType||(p=f+s),3===y.nodeType&&(f+=y.nodeValue.length),null!==(b=y.firstChild);)v=y,y=b;for(;;){if(y===i)break t;if(v===u&&++m===l&&(d=f),v===c&&++h===s&&(p=f),null!==(b=y.nextSibling))break;v=(y=v).parentNode}y=b}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Fr={focusedElem:i,selectionRange:u},Xt=!1,iu=null,uu=!1,Wi=r;do{try{ju()}catch(e){if(null===Wi)throw Error(o(330));zu(Wi,e),Wi=Wi.nextEffect}}while(null!==Wi);iu=null,Wi=r;do{try{for(i=e;null!==Wi;){var g=Wi.flags;if(16&g&&be(Wi.stateNode,""),128&g){var k=Wi.alternate;if(null!==k){var w=k.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&g){case 2:gi(Wi),Wi.flags&=-3;break;case 6:gi(Wi),Wi.flags&=-3,xi(Wi.alternate,Wi);break;case 1024:Wi.flags&=-1025;break;case 1028:Wi.flags&=-1025,xi(Wi.alternate,Wi);break;case 4:xi(Wi.alternate,Wi);break;case 8:Ei(i,u=Wi);var E=u.alternate;vi(u),null!==E&&vi(E)}Wi=Wi.nextEffect}}catch(e){if(null===Wi)throw Error(o(330));zu(Wi,e),Wi=Wi.nextEffect}}while(null!==Wi);if(w=Fr,k=pr(),g=w.focusedElem,i=w.selectionRange,k!==g&&g&&g.ownerDocument&&dr(g.ownerDocument.documentElement,g)){null!==i&&mr(g)&&(k=i.start,void 0===(w=i.end)&&(w=k),"selectionStart"in g?(g.selectionStart=k,g.selectionEnd=Math.min(w,g.value.length)):(w=(k=g.ownerDocument||document)&&k.defaultView||window).getSelection&&(w=w.getSelection(),u=g.textContent.length,E=Math.min(i.start,u),i=void 0===i.end?E:Math.min(i.end,u),!w.extend&&E>i&&(u=i,i=E,E=u),u=fr(g,E),l=fr(g,i),u&&l&&(1!==w.rangeCount||w.anchorNode!==u.node||w.anchorOffset!==u.offset||w.focusNode!==l.node||w.focusOffset!==l.offset)&&((k=k.createRange()).setStart(u.node,u.offset),w.removeAllRanges(),E>i?(w.addRange(k),w.extend(l.node,l.offset)):(k.setEnd(l.node,l.offset),w.addRange(k))))),k=[];for(w=g;w=w.parentNode;)1===w.nodeType&&k.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof g.focus&&g.focus(),g=0;g<k.length;g++)(w=k[g]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Xt=!!Rr,Fr=Rr=null,e.current=n,Wi=r;do{try{for(g=e;null!==Wi;){var x=Wi.flags;if(36&x&&mi(g,Wi.alternate,Wi),128&x){k=void 0;var S=Wi.ref;if(null!==S){var _=Wi.stateNode;switch(Wi.tag){case 5:k=_;break;default:k=_}"function"==typeof S?S(k):S.current=k}}Wi=Wi.nextEffect}}catch(e){if(null===Wi)throw Error(o(330));zu(Wi,e),Wi=Wi.nextEffect}}while(null!==Wi);Wi=null,Aa(),Pi=a}else e.current=n;if(Yi)Yi=!1,Gi=e,Zi=t;else for(Wi=r;null!==Wi;)t=Wi.nextEffect,Wi.nextEffect=null,8&Wi.flags&&((x=Wi).sibling=null,x.stateNode=null),Wi=t;if(0===(r=e.pendingLanes)&&(Xi=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,wa&&"function"==typeof wa.onCommitFiberRoot)try{wa.onCommitFiberRoot(ka,n,void 0,64==(64&n.current.flags))}catch(e){}if(pu(e,qa()),Qi)throw Qi=!1,e=Ki,Ki=null,e;return 0!=(8&Pi)||$a(),null}function ju(){for(;null!==Wi;){var e=Wi.alternate;uu||null===iu||(0!=(8&Wi.flags)?et(Wi,iu)&&(uu=!0):13===Wi.tag&&_i(e,Wi)&&et(Wi,iu)&&(uu=!0));var t=Wi.flags;0!=(256&t)&&pi(e,Wi),0==(512&t)||Yi||(Yi=!0,Ha(97,(function(){return Mu(),null}))),Wi=Wi.nextEffect}}function Mu(){if(90!==Zi){var e=97<Zi?97:Zi;return Zi=90,Va(e,Au)}return!1}function Lu(e,t){Ji.push(t,e),Yi||(Yi=!0,Ha(97,(function(){return Mu(),null})))}function Iu(e,t){eu.push(t,e),Yi||(Yi=!0,Ha(97,(function(){return Mu(),null})))}function Au(){if(null===Gi)return!1;var e=Gi;if(Gi=null,0!=(48&Pi))throw Error(o(331));var t=Pi;Pi|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var a=n[r],l=n[r+1],i=a.destroy;if(a.destroy=void 0,"function"==typeof i)try{i()}catch(e){if(null===l)throw Error(o(330));zu(l,e)}}for(n=Ji,Ji=[],r=0;r<n.length;r+=2){a=n[r],l=n[r+1];try{var u=a.create;a.destroy=u()}catch(e){if(null===l)throw Error(o(330));zu(l,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pi=t,$a(),!0}function Du(e,t,n){ul(e,t=ci(0,t=oi(n,t),1)),t=cu(),null!==(e=du(e,1))&&(Vt(e,1,t),pu(e,t))}function zu(e,t){if(3===e.tag)Du(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Du(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Xi||!Xi.has(r))){var a=si(n,e=oi(t,e),1);if(ul(n,a),a=cu(),null!==(n=du(n,1)))Vt(n,1,a),pu(n,a);else if("function"==typeof r.componentDidCatch&&(null===Xi||!Xi.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ru(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=cu(),e.pingedLanes|=e.suspendedLanes&n,Ti===e&&(Mi&n)===n&&(4===Ai||3===Ai&&(62914560&Mi)===Mi&&500>qa()-Bi?wu(e,0):qi|=n),pu(e,t)}function Fu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ua()?1:2:(0===lu&&(lu=zi),0===(t=Ut(62914560&~lu))&&(t=4194304))),n=cu(),null!==(e=du(e,t))&&(Vt(e,t,n),pu(e,n))}function qu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Uu(e,t,n,r){return new qu(e,t,n,r)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vu(e,t){var n=e.alternate;return null===n?((n=Uu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Hu(e,t,n,r,a,l){var i=2;if(r=e,"function"==typeof e)Bu(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case S:return $u(n.children,a,l,t);case D:i=8,a|=16;break;case _:i=8,a|=1;break;case C:return(e=Uu(12,n,t,8|a)).elementType=C,e.type=C,e.lanes=l,e;case T:return(e=Uu(13,n,t,a)).type=T,e.elementType=T,e.lanes=l,e;case j:return(e=Uu(19,n,t,a)).elementType=j,e.lanes=l,e;case z:return Wu(n,a,l,t);case R:return(e=Uu(24,n,t,a)).elementType=R,e.lanes=l,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:i=10;break e;case N:i=9;break e;case P:i=11;break e;case M:i=14;break e;case L:i=16,r=null;break e;case I:i=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Uu(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function $u(e,t,n,r){return(e=Uu(7,e,r,t)).lanes=n,e}function Wu(e,t,n,r){return(e=Uu(23,e,r,t)).elementType=z,e.lanes=n,e}function Qu(e,t,n){return(e=Uu(6,e,null,t)).lanes=n,e}function Ku(e,t,n){return(t=Uu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Xu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Yu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gu(e,t,n,r){var a=t.current,l=cu(),i=su(a);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(o(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ma(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(o(171))}if(1===n.tag){var c=n.type;if(ma(c)){n=va(n,c,u);break e}}n=u}else n=ca;return null===t.context?t.context=n:t.pendingContext=n,(t=il(l,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ul(a,t),fu(a,i,l),i}function Zu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Ju(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function ec(e,t){Ju(e,t),(e=e.alternate)&&Ju(e,t)}function tc(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Xu(e,t,null!=n&&!0===n.hydrate),t=Uu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ll(t),e[Gr]=n.current,Pr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function nc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rc(e,t,n,r,a){var l=n._reactRootContainer;if(l){var o=l._internalRoot;if("function"==typeof a){var i=a;a=function(){var e=Zu(o);i.call(e)}}Gu(t,o,e,a)}else{if(l=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tc(e,0,t?{hydrate:!0}:void 0)}(n,r),o=l._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Zu(o);u.call(e)}}bu((function(){Gu(t,o,e,a)}))}return Zu(o)}function ac(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nc(t))throw Error(o(200));return Yu(e,t,null,n)}$i=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fa.current)Io=!0;else{if(0==(n&r)){switch(Io=!1,t.tag){case 3:Ho(t),Hl();break;case 5:Ml(t);break;case 1:ma(t.type)&&ba(t);break;case 4:Tl(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;ua(Xa,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Xo(e,t,n):(ua(Il,1&Il.current),null!==(t=ni(e,t,n))?t.sibling:null);ua(Il,1&Il.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ti(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),ua(Il,Il.current),r)break;return null;case 23:case 24:return t.lanes=0,Fo(e,t,n)}return ni(e,t,n)}Io=0!=(16384&e.flags)}else Io=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=pa(t,sa.current),nl(t,n),a=ro(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ma(r)){var l=!0;ba(t)}else l=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ll(t);var i=r.getDerivedStateFromProps;"function"==typeof i&&pl(t,r,i,e),a.updater=ml,t.stateNode=a,a._reactInternals=t,bl(t,r,e,n),t=Vo(null,t,r,!0,l,n)}else t.tag=0,Ao(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(l=a._init)(a._payload),t.type=a,l=t.tag=function(e){if("function"==typeof e)return Bu(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===M)return 14}return 2}(a),e=Ka(a,e),l){case 0:t=Uo(null,t,a,e,n);break e;case 1:t=Bo(null,t,a,e,n);break e;case 11:t=Do(null,t,a,e,n);break e;case 14:t=zo(null,t,a,Ka(a.type,e),r,n);break e}throw Error(o(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Uo(e,t,r,a=t.elementType===r?a:Ka(r,a),n);case 1:return r=t.type,a=t.pendingProps,Bo(e,t,r,a=t.elementType===r?a:Ka(r,a),n);case 3:if(Ho(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,ol(e,t),sl(t,r,null,n),(r=t.memoizedState.element)===a)Hl(),t=ni(e,t,n);else{if((l=(a=t.stateNode).hydrate)&&(zl=$r(t.stateNode.containerInfo.firstChild),Dl=t,l=Rl=!0),l){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(l=e[a])._workInProgressVersionPrimary=e[a+1],$l.push(l);for(n=Sl(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ao(e,t,r,n),Hl();t=t.child}return t;case 5:return Ml(t),null===e&&Ul(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,i=a.children,Ur(r,a)?i=null:null!==l&&Ur(r,l)&&(t.flags|=16),qo(e,t),Ao(e,t,i,n),t.child;case 6:return null===e&&Ul(t),null;case 13:return Xo(e,t,n);case 4:return Tl(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xl(t,null,r,n):Ao(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Do(e,t,r,a=t.elementType===r?a:Ka(r,a),n);case 7:return Ao(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ao(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value;var u=t.type._context;if(ua(Xa,u._currentValue),u._currentValue=l,null!==i)if(u=i.value,0===(l=ir(u,l)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,l):1073741823))){if(i.children===a.children&&!fa.current){t=ni(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){i=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&l)){1===u.tag&&((s=il(-1,n&-n)).tag=2,ul(u,s)),u.lanes|=n,null!==(s=u.alternate)&&(s.lanes|=n),tl(u.return,n),c.lanes|=n;break}s=s.next}}else i=10===u.tag&&u.type===t.type?null:u.child;if(null!==i)i.return=u;else for(i=u;null!==i;){if(i===t){i=null;break}if(null!==(u=i.sibling)){u.return=i.return,i=u;break}i=i.return}u=i}Ao(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(l=t.pendingProps).children,nl(t,n),r=r(a=rl(a,l.unstable_observedBits)),t.flags|=1,Ao(e,t,r,n),t.child;case 14:return l=Ka(a=t.type,t.pendingProps),zo(e,t,a,l=Ka(a.type,l),r,n);case 15:return Ro(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ka(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ma(r)?(e=!0,ba(t)):e=!1,nl(t,n),yl(t,r,a),bl(t,r,a,n),Vo(null,t,r,!0,e,n);case 19:return ti(e,t,n);case 23:case 24:return Fo(e,t,n)}throw Error(o(156,t.tag))},tc.prototype.render=function(e){Gu(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gu(null,e,null,(function(){t[Gr]=null}))},tt=function(e){13===e.tag&&(fu(e,4,cu()),ec(e,4))},nt=function(e){13===e.tag&&(fu(e,67108864,cu()),ec(e,67108864))},rt=function(e){if(13===e.tag){var t=cu(),n=su(e);fu(e,n,t),ec(e,n)}},at=function(e,t){return t()},Oe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=na(r);if(!a)throw Error(o(90));G(r),ne(r,a)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&oe(e,!!n.multiple,t,!1)}},Le=vu,Ie=function(e,t,n,r,a){var l=Pi;Pi|=4;try{return Va(98,e.bind(null,t,n,r,a))}finally{0===(Pi=l)&&(Hi(),$a())}},Ae=function(){0==(49&Pi)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,qa())}))}$a()}(),Mu())},De=function(e,t){var n=Pi;Pi|=2;try{return e(t)}finally{0===(Pi=n)&&(Hi(),$a())}};var lc={Events:[ea,ta,na,je,Me,Mu,{current:!1}]},oc={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ic={bundleType:oc.bundleType,version:oc.version,rendererPackageName:oc.rendererPackageName,rendererConfig:oc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:oc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var uc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!uc.isDisabled&&uc.supportsFiber)try{ka=uc.inject(ic),wa=uc}catch(ye){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lc,t.createPortal=ac,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return e=null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Pi;if(0!=(48&n))return e(t);Pi|=1;try{if(e)return Va(99,e.bind(null,t))}finally{Pi=n,$a()}},t.hydrate=function(e,t,n){if(!nc(t))throw Error(o(200));return rc(null,e,t,!0,n)},t.render=function(e,t,n){if(!nc(t))throw Error(o(200));return rc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nc(e))throw Error(o(40));return!!e._reactRootContainer&&(bu((function(){rc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Gr]=null}))})),!0)},t.unstable_batchedUpdates=vu,t.unstable_createPortal=function(e,t){return ac(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nc(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return rc(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,l=n?Symbol.for("react.fragment"):60107,o=n?Symbol.for("react.strict_mode"):60108,i=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,b=n?Symbol.for("react.fundamental"):60117,g=n?Symbol.for("react.responder"):60118,k=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case l:case i:case o:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case y:case h:case u:return e;default:return t}}case a:return t}}}function E(e){return w(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=l,t.Lazy=y,t.Memo=h,t.Portal=a,t.Profiler=i,t.StrictMode=o,t.Suspense=p,t.isAsyncMode=function(e){return E(e)||w(e)===s},t.isConcurrentMode=E,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===d},t.isFragment=function(e){return w(e)===l},t.isLazy=function(e){return w(e)===y},t.isMemo=function(e){return w(e)===h},t.isPortal=function(e){return w(e)===a},t.isProfiler=function(e){return w(e)===i},t.isStrictMode=function(e){return w(e)===o},t.isSuspense=function(e){return w(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===l||e===f||e===i||e===o||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===h||e.$$typeof===u||e.$$typeof===c||e.$$typeof===d||e.$$typeof===b||e.$$typeof===g||e.$$typeof===k||e.$$typeof===v)},t.typeOf=w},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(418),a=60103,l=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var o=60109,i=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;a=f("react.element"),l=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),o=f("react.provider"),i=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function y(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var g=b.prototype=new v;g.constructor=b,r(g,y.prototype),g.isPureReactComponent=!0;var k={current:null},w=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,l={},o=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(o=""+t.key),t)w.call(t,r)&&!E.hasOwnProperty(r)&&(l[r]=t[r]);var u=arguments.length-2;if(1===u)l.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];l.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===l[r]&&(l[r]=u[r]);return{$$typeof:a,type:e,key:o,ref:i,props:l,_owner:k.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var _=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,n,r,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case a:case l:u=!0}}if(u)return o=o(u=e),e=""===r?"."+C(u,0):r,Array.isArray(o)?(n="",null!=e&&(n=e.replace(_,"$&/")+"/"),O(o,t,n,"",(function(e){return e}))):null!=o&&(S(o)&&(o=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,n+(!o.key||u&&u.key===o.key?"":(""+o.key).replace(_,"$&/")+"/")+e)),t.push(o)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=r+C(i=e[c],c);u+=O(i,t,n,s,o)}else if("function"==typeof(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(i=e.next()).done;)u+=O(i=i.value,t,n,s=r+C(i,c++),o);else if("object"===i)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return O(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function j(){var e=T.current;if(null===e)throw Error(p(321));return e}var M={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=y,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var l=r({},e.props),o=e.key,i=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,u=k.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)w.call(t,s)&&!E.hasOwnProperty(s)&&(l[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)l.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];l.children=c}return{$$typeof:a,type:e.type,key:o,ref:i,props:l,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:i,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return j().useCallback(e,t)},t.useContext=function(e,t){return j().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return j().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return j().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return j().useLayoutEffect(e,t)},t.useMemo=function(e,t){return j().useMemo(e,t)},t.useReducer=function(e,t,n){return j().useReducer(e,t,n)},t.useRef=function(e){return j().useRef(e)},t.useState=function(e){return j().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n,r,a,l;if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,s=null,f=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(f,0))},r=function(e,t){s=setTimeout(e,t)},a=function(){clearTimeout(s)},t.unstable_shouldYield=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,y=null,v=-1,b=5,g=0;t.unstable_shouldYield=function(){return t.unstable_now()>=g},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,w=k.port2;k.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();g=e+b;try{y(!0,e)?w.postMessage(null):(h=!1,y=null)}catch(e){throw w.postMessage(null),e}}else h=!1},n=function(e){y=e,h||(h=!0,w.postMessage(null))},r=function(e,n){v=d((function(){e(t.unstable_now())}),n)},a=function(){p(v),v=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<_(a,t)))break e;e[r]=t,e[n]=a,n=r}}function x(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var l=2*(r+1)-1,o=e[l],i=l+1,u=e[i];if(void 0!==o&&0>_(o,n))void 0!==u&&0>_(u,o)?(e[r]=u,e[i]=n,r=i):(e[r]=o,e[l]=n,r=l);else{if(!(void 0!==u&&0>_(u,n)))break e;e[r]=u,e[i]=n,r=i}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],O=[],N=1,P=null,T=3,j=!1,M=!1,L=!1;function I(e){for(var t=x(O);null!==t;){if(null===t.callback)S(O);else{if(!(t.startTime<=e))break;S(O),t.sortIndex=t.expirationTime,E(C,t)}t=x(O)}}function A(e){if(L=!1,I(e),!M)if(null!==x(C))M=!0,n(D);else{var t=x(O);null!==t&&r(A,t.startTime-e)}}function D(e,n){M=!1,L&&(L=!1,a()),j=!0;var l=T;try{for(I(n),P=x(C);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var o=P.callback;if("function"==typeof o){P.callback=null,T=P.priorityLevel;var i=o(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?P.callback=i:P===x(C)&&S(C),I(n)}else S(C);P=x(C)}if(null!==P)var u=!0;else{var c=x(O);null!==c&&r(A,c.startTime-n),u=!1}return u}finally{P=null,T=l,j=!1}}var z=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||j||(M=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return x(C)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,l,o){var i=t.unstable_now();switch("object"==typeof o&&null!==o?o="number"==typeof(o=o.delay)&&0<o?i+o:i:o=i,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:N++,callback:l,priorityLevel:e,startTime:o,expirationTime:u=o+u,sortIndex:-1},o>i?(e.sortIndex=o,E(O,e),null===x(C)&&e===x(O)&&(L?a():L=!0,r(A,o-i))):(e.sortIndex=u,E(C,e),M||j||(M=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},877:(e,t,n)=>{var r=n(570),a=n(171),l=a;l.v1=r,l.v4=a,e.exports=l},327:e=>{for(var t=[],n=0;n<256;++n)t[n]=(n+256).toString(16).substr(1);e.exports=function(e,n){var r=n||0,a=t;return[a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]]].join("")}},217:e=>{var t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(t){var n=new Uint8Array(16);e.exports=function(){return t(n),n}}else{var r=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),r[t]=e>>>((3&t)<<3)&255;return r}}},570:(e,t,n)=>{var r,a,l=n(217),o=n(327),i=0,u=0;e.exports=function(e,t,n){var c=t&&n||0,s=t||[],f=(e=e||{}).node||r,d=void 0!==e.clockseq?e.clockseq:a;if(null==f||null==d){var p=l();null==f&&(f=r=[1|p[0],p[1],p[2],p[3],p[4],p[5]]),null==d&&(d=a=16383&(p[6]<<8|p[7]))}var m=void 0!==e.msecs?e.msecs:(new Date).getTime(),h=void 0!==e.nsecs?e.nsecs:u+1,y=m-i+(h-u)/1e4;if(y<0&&void 0===e.clockseq&&(d=d+1&16383),(y<0||m>i)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");i=m,u=h,a=d;var v=(1e4*(268435455&(m+=122192928e5))+h)%4294967296;s[c++]=v>>>24&255,s[c++]=v>>>16&255,s[c++]=v>>>8&255,s[c++]=255&v;var b=m/4294967296*1e4&268435455;s[c++]=b>>>8&255,s[c++]=255&b,s[c++]=b>>>24&15|16,s[c++]=b>>>16&255,s[c++]=d>>>8|128,s[c++]=255&d;for(var g=0;g<6;++g)s[c+g]=f[g];return t||o(s)}},171:(e,t,n)=>{var r=n(217),a=n(327);e.exports=function(e,t,n){var l=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var o=(e=e||{}).random||(e.rng||r)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t)for(var i=0;i<16;++i)t[l+i]=o[i];return t||a(o)}}},u={};function c(e){var t=u[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var n=u[e]={id:e,exports:{}};try{var r={id:e,module:n,factory:i[e],require:c};c.i.forEach((function(e){e(r)})),n=r.module,r.factory.call(n.exports,n,n.exports,r.require)}catch(e){throw n.error=e,e}return n.exports}c.m=i,c.c=u,c.i=[],c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.hu=e=>e+"."+c.h()+".hot-update.js",c.miniCssF=e=>{},c.hmrF=()=>"main."+c.h()+".hot-update.json",c.h=()=>"e9e8e63942ce4a948f14",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="swimming_generator:",c.l=(n,r,a,l)=>{if(e[n])e[n].push(r);else{var o,i;if(void 0!==a)for(var u=document.getElementsByTagName("script"),s=0;s<u.length;s++){var f=u[s];if(f.getAttribute("src")==n||f.getAttribute("data-webpack")==t+a){o=f;break}}o||(i=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,c.nc&&o.setAttribute("nonce",c.nc),o.setAttribute("data-webpack",t+a),o.src=n),e[n]=[r];var d=(t,r)=>{o.onerror=o.onload=null,clearTimeout(p);var a=e[n];if(delete e[n],o.parentNode&&o.parentNode.removeChild(o),a&&a.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=d.bind(null,o.onerror),o.onload=d.bind(null,o.onload),i&&document.head.appendChild(o)}},(()=>{var e,t,n,r,a={},l=c.c,o=[],i=[],u="idle";function s(e){u=e;for(var t=0;t<i.length;t++)i[t].call(null,e)}function f(e){if(0===t.length)return e();var n=t;return t=[],Promise.all(n).then((function(){return f(e)}))}function d(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return s("check"),c.hmrM().then((function(r){if(!r)return s(h()?"ready":"idle"),null;s("prepare");var a=[];return t=[],n=[],Promise.all(Object.keys(c.hmrC).reduce((function(e,t){return c.hmrC[t](r.c,r.r,r.m,e,n,a),e}),[])).then((function(){return f((function(){return e?m(e):(s("ready"),a)}))}))}))}function p(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):m(e)}function m(e){e=e||{},h();var t=n.map((function(t){return t(e)}));n=void 0;var a,l=t.map((function(e){return e.error})).filter(Boolean);if(l.length>0)return s("abort"),Promise.resolve().then((function(){throw l[0]}));s("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),s("apply");var o=function(e){a||(a=e)},i=[];return t.forEach((function(e){if(e.apply){var t=e.apply(o);if(t)for(var n=0;n<t.length;n++)i.push(t[n])}})),a?(s("fail"),Promise.resolve().then((function(){throw a}))):r?m(e).then((function(e){return i.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(s("idle"),Promise.resolve(i))}function h(){if(r)return n||(n=[]),Object.keys(c.hmrI).forEach((function(e){r.forEach((function(t){c.hmrI[e](t,n)}))})),r=void 0,!0}c.hmrD=a,c.i.push((function(m){var h,y,v,b,g=m.module,k=function(n,r){var a=l[r];if(!a)return n;var i=function(t){if(a.hot.active){if(l[t]){var i=l[t].parents;-1===i.indexOf(r)&&i.push(r)}else o=[r],e=t;-1===a.children.indexOf(t)&&a.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+r),o=[];return n(t)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t}}};for(var d in n)Object.prototype.hasOwnProperty.call(n,d)&&"e"!==d&&Object.defineProperty(i,d,c(d));return i.e=function(e){return function(e){switch(u){case"ready":return s("prepare"),t.push(e),f((function(){s("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(n.e(e))},i}(m.require,m.id);g.hot=(h=m.id,y=g,b={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==h,_requireSelf:function(){o=y.parents.slice(),e=v?void 0:h,c(h)},active:!0,accept:function(e,t,n){if(void 0===e)b._selfAccepted=!0;else if("function"==typeof e)b._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)b._acceptedDependencies[e[r]]=t||function(){},b._acceptedErrorHandlers[e[r]]=n;else b._acceptedDependencies[e]=t||function(){},b._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)b._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)b._declinedDependencies[e[t]]=!0;else b._declinedDependencies[e]=!0},dispose:function(e){b._disposeHandlers.push(e)},addDisposeHandler:function(e){b._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=b._disposeHandlers.indexOf(e);t>=0&&b._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":n=[],Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](h,n)})),s("ready");break;case"ready":Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](h,n)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(h)}},check:d,apply:p,status:function(e){if(!e)return u;i.push(e)},addStatusHandler:function(e){i.push(e)},removeStatusHandler:function(e){var t=i.indexOf(e);t>=0&&i.splice(t,1)},data:a[h]},e=void 0,b),g.parents=o,g.children=[],o=[],m.require=k})),c.hmrC={},c.hmrI={}})(),(()=>{var e;c.g.importScripts&&(e=c.g.location+"");var t=c.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=e})(),n=(e,t,n,r)=>{var a=document.createElement("link");return a.rel="stylesheet",a.type="text/css",a.onerror=a.onload=l=>{if(a.onerror=a.onload=null,"load"===l.type)n();else{var o=l&&("load"===l.type?"missing":l.type),i=l&&l.target&&l.target.href||t,u=new Error("Loading CSS chunk "+e+" failed.\n("+i+")");u.code="CSS_CHUNK_LOAD_FAILED",u.type=o,u.request=i,a.parentNode.removeChild(a),r(u)}},a.href=t,document.head.appendChild(a),a},r=(e,t)=>{for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var a=(o=n[r]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(a===e||a===t))return o}var l=document.getElementsByTagName("style");for(r=0;r<l.length;r++){var o;if((a=(o=l[r]).getAttribute("data-href"))===e||a===t)return o}},a=[],l=[],o=e=>({dispose:()=>{for(var e=0;e<a.length;e++){var t=a[e];t.parentNode&&t.parentNode.removeChild(t)}a.length=0},apply:()=>{for(var e=0;e<l.length;e++)l[e].rel="stylesheet";l.length=0}}),c.hmrC.miniCss=(e,t,i,u,s,f)=>{s.push(o),e.forEach((e=>{var t=c.miniCssF(e),o=c.p+t,i=r(t,o);i&&u.push(new Promise(((t,r)=>{var u=n(e,o,(()=>{u.as="style",u.rel="preload",t()}),r);a.push(i),l.push(u)})))}))},(()=>{var e,t,n,r,a={179:0},l={};function o(e){return new Promise(((t,n)=>{l[e]=t;var r=c.p+c.hu(e),a=new Error;c.l(r,(t=>{if(l[e]){l[e]=void 0;var r=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;a.message="Loading hot update chunk "+e+" failed.\n("+r+": "+o+")",a.name="ChunkLoadError",a.type=r,a.request=o,n(a)}}))}))}function i(l){function o(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var a=r.pop(),l=a.id,o=a.chain,u=c.c[l];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:l};if(u.hot._main)return{type:"unaccepted",chain:o,moduleId:l};for(var s=0;s<u.parents.length;s++){var f=u.parents[s],d=c.c[f];if(d){if(d.hot._declinedDependencies[l])return{type:"declined",chain:o.concat([f]),moduleId:l,parentId:f};-1===t.indexOf(f)&&(d.hot._acceptedDependencies[l]?(n[f]||(n[f]=[]),i(n[f],[l])):(delete n[f],t.push(f),r.push({chain:o.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}c.f&&delete c.f.jsonpHmr,e=void 0;var u={},s=[],f={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(c.o(t,p)){var m,h=t[p],y=!1,v=!1,b=!1,g="";switch((m=h?o(p):{type:"disposed",moduleId:p}).chain&&(g="\nUpdate propagation: "+m.chain.join(" -> ")),m.type){case"self-declined":l.onDeclined&&l.onDeclined(m),l.ignoreDeclined||(y=new Error("Aborted because of self decline: "+m.moduleId+g));break;case"declined":l.onDeclined&&l.onDeclined(m),l.ignoreDeclined||(y=new Error("Aborted because of declined dependency: "+m.moduleId+" in "+m.parentId+g));break;case"unaccepted":l.onUnaccepted&&l.onUnaccepted(m),l.ignoreUnaccepted||(y=new Error("Aborted because "+p+" is not accepted"+g));break;case"accepted":l.onAccepted&&l.onAccepted(m),v=!0;break;case"disposed":l.onDisposed&&l.onDisposed(m),b=!0;break;default:throw new Error("Unexception type "+m.type)}if(y)return{error:y};if(v)for(p in f[p]=h,i(s,m.outdatedModules),m.outdatedDependencies)c.o(m.outdatedDependencies,p)&&(u[p]||(u[p]=[]),i(u[p],m.outdatedDependencies[p]));b&&(i(s,[m.moduleId]),f[p]=d)}t=void 0;for(var k,w=[],E=0;E<s.length;E++){var x=s[E],S=c.c[x];S&&(S.hot._selfAccepted||S.hot._main)&&f[x]!==d&&!S.hot._selfInvalidated&&w.push({module:x,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete a[e]})),n=void 0;for(var t,r=s.slice();r.length>0;){var l=r.pop(),o=c.c[l];if(o){var i={},f=o.hot._disposeHandlers;for(E=0;E<f.length;E++)f[E].call(null,i);for(c.hmrD[l]=i,o.hot.active=!1,delete c.c[l],delete u[l],E=0;E<o.children.length;E++){var d=c.c[o.children[E]];d&&((e=d.parents.indexOf(l))>=0&&d.parents.splice(e,1))}}}for(var p in u)if(c.o(u,p)&&(o=c.c[p]))for(k=u[p],E=0;E<k.length;E++)t=k[E],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(e){for(var t in f)c.o(f,t)&&(c.m[t]=f[t]);for(var n=0;n<r.length;n++)r[n](c);for(var a in u)if(c.o(u,a)){var o=c.c[a];if(o){k=u[a];for(var i=[],d=[],p=[],m=0;m<k.length;m++){var h=k[m],y=o.hot._acceptedDependencies[h],v=o.hot._acceptedErrorHandlers[h];if(y){if(-1!==i.indexOf(y))continue;i.push(y),d.push(v),p.push(h)}}for(var b=0;b<i.length;b++)try{i[b].call(null,k)}catch(t){if("function"==typeof d[b])try{d[b](t,{moduleId:a,dependencyId:p[b]})}catch(n){l.onErrored&&l.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:p[b],error:n,originalError:t}),l.ignoreErrored||(e(n),e(t))}else l.onErrored&&l.onErrored({type:"accept-errored",moduleId:a,dependencyId:p[b],error:t}),l.ignoreErrored||e(t)}}}for(var g=0;g<w.length;g++){var E=w[g],x=E.module;try{E.require(x)}catch(t){if("function"==typeof E.errorHandler)try{E.errorHandler(t,{moduleId:x,module:c.c[x]})}catch(n){l.onErrored&&l.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:n,originalError:t}),l.ignoreErrored||(e(n),e(t))}else l.onErrored&&l.onErrored({type:"self-accept-errored",moduleId:x,error:t}),l.ignoreErrored||e(t)}}return s}}}self.webpackHotUpdateswimming_generator=(e,n,a)=>{for(var o in n)c.o(n,o)&&(t[o]=n[o]);a&&r.push(a),l[e]&&(l[e](),l[e]=void 0)},c.hmrI.jsonp=function(e,a){t||(t={},r=[],n=[],a.push(i)),c.o(t,e)||(t[e]=c.m[e])},c.hmrC.jsonp=function(l,u,s,f,d,p){d.push(i),e={},n=u,t=s.reduce((function(e,t){return e[t]=!1,e}),{}),r=[],l.forEach((function(t){c.o(a,t)&&void 0!==a[t]&&(f.push(o(t)),e[t]=!0)})),c.f&&(c.f.jsonpHmr=function(t,n){e&&!c.o(e,t)&&c.o(a,t)&&void 0!==a[t]&&(n.push(o(t)),e[t]=!0)})},c.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(c.p+c.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})();c(579)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3Ivd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3Jlc2VsZWN0L2VzL2luZGV4LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2ltbWVyLmVzbS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3JlZHV4LXRvb2xraXQuZXNtLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9saXN0cy9leGVyY2lzZXNMaXN0LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faXNQbGFjZWhvbGRlci5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2N1cnJ5MS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2N1cnJ5Mi5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2FycmF5RnJvbUl0ZXJhdG9yLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faW5jbHVkZXNXaXRoLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faGFzLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fb2JqZWN0SXMuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMva2V5cy5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvdHlwZS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2VxdWFscy5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2Z1bmN0aW9uTmFtZS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvZXF1YWxzLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19pbmRleE9mLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fU2V0LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9kaWZmZXJlbmNlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fY29uY2F0LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fYXJpdHkuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19waXBlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fY3VycnkzLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faXNBcnJheS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2lzU3RyaW5nLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL194d3JhcC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvYmluZC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX3JlZHVjZS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvcmVkdWNlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fY2hlY2tGb3JNZXRob2QuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL3RhaWwuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL3NsaWNlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9waXBlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9yZXZlcnNlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9jb21wb3NlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2lkZW50aXR5LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy91bmlvbi5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvdW5pcUJ5LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy91bmlxLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9zbGljZXMvZXhlcmNpc2VzU2xpY2UuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL2Z1bmN0aW9ucy9yYW5kb21JbnRGcm9tSW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL2Z1bmN0aW9ucy9zaHVmZmxlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9mdW5jdGlvbnMvcmFuZG9tVmFsdWUuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL3NsaWNlcy93YXJtdXBTbGljZS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9zcmMvc2xpY2VzL3RlY2huaXF1ZVNsaWNlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9zbGljZXMvbWFpblNsaWNlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9zbGljZXMvY29vbGRvd25TbGljZS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX29iamVjdEFzc2lnbi5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvbWVyZ2VSaWdodC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9zcmMvc2xpY2VzL2Rpc3BsYXlTbGljZS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2N1cnJ5Ti5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvY3VycnlOLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9hZGRJbmRleC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2lzVHJhbnNmb3JtZXIuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19kaXNwYXRjaGFibGUuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL194ZkJhc2UuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL194bWFwLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9tYXAuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19tYXAuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL2Z1bmN0aW9ucy9nZW5lcmF0ZVRvdGFsLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9saXN0cy9wb3NzaWJsZUVhY2hMaXN0LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9mdW5jdGlvbnMvZ2VuZXJhdGVFYWNoLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9mdW5jdGlvbnMvZ2VuZXJhdGVUcmFpbmluZ1NldC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9zcmMvc2xpY2VzL3NldHNTbGljZS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9zcmMvc2xpY2VzL3BhY2VTbGljZS5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvZGl2aWRlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9zdWJ0cmFjdC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9zcmMvZnVuY3Rpb25zL2Zvcm1hdFBhY2UuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL2Z1bmN0aW9ucy9jYXBpdGFsaXplRmlyc3RMZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL2NvbXBvbmVudHMvSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL2NvbXBvbmVudHMvVHJhaW5pbmcvY29tcG9uZW50cy9XYXJtdXAuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL2NvbXBvbmVudHMvVHJhaW5pbmcvY29tcG9uZW50cy9UZWNobmlxdWUuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL2Z1bmN0aW9ucy9nZW5lcmF0ZVRpbWVzLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9jb21wb25lbnRzL1RyYWluaW5nL2NvbXBvbmVudHMvTWFpbi5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9zcmMvY29tcG9uZW50cy9UcmFpbmluZy9jb21wb25lbnRzL0Nvb2xkb3duLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9jb21wb25lbnRzL1RyYWluaW5nL1RyYWluaW5nLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9jb21wb25lbnRzL1dyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vc3JjL3N0b3JlLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL3NyYy9jb21wb25lbnRzL0FwcC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvbm9ybWFsaXplLXVybC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9zcmMvaW5kZXguY3NzPzk5YzkiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvdXVpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanMiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL3JuZy1icm93c2VyLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy91dWlkL3YxLmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci8uL25vZGVfbW9kdWxlcy91dWlkL3Y0LmpzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3Ivd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgdXBkYXRlIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci93ZWJwYWNrL3J1bnRpbWUvZ2V0IHVwZGF0ZSBtYW5pZmVzdCBmaWxlbmFtZSIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3Ivd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly9zd2ltbWluZ19nZW5lcmF0b3Ivd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vc3dpbW1pbmdfZ2VuZXJhdG9yL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3N3aW1taW5nX2dlbmVyYXRvci93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiY3JlYXRlU3R5bGVzaGVldCIsImZpbmRTdHlsZXNoZWV0Iiwib2xkVGFncyIsIm5ld1RhZ3MiLCJhcHBseUhhbmRsZXIiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImxlbmd0aCIsImkiLCJhcnIyIiwiQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJvIiwibWluTGVuIiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfc2xpY2VkVG9BcnJheSIsImlzQXJyYXkiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwibmV4dCIsImRvbmUiLCJwdXNoIiwidmFsdWUiLCJlcnIiLCJUeXBlRXJyb3IiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJpdGVyIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJiYXRjaCIsImNhbGxiYWNrIiwiZ2V0QmF0Y2giLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwic3RvcmUiLCJwYXJlbnRTdWIiLCJ0aGlzIiwidW5zdWJzY3JpYmUiLCJsaXN0ZW5lcnMiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiYmluZCIsIl9wcm90byIsImFkZE5lc3RlZFN1YiIsImxpc3RlbmVyIiwidHJ5U3Vic2NyaWJlIiwic3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJpc1N1YnNjcmliZWQiLCJCb29sZWFuIiwiZmlyc3QiLCJsYXN0IiwiY2xlYXIiLCJnZXQiLCJwcmV2IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwidHJ5VW5zdWJzY3JpYmUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VFZmZlY3QiLCJfcmVmIiwiY29udGV4dCIsImNoaWxkcmVuIiwiY29udGV4dFZhbHVlIiwidXNlTWVtbyIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIkNvbnRleHQiLCJQcm92aWRlciIsInVzZUNvbnRleHQiLCJjcmVhdGVTdG9yZUhvb2siLCJ1c2VSZWR1eENvbnRleHQiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsImRpc3BhdGNoIiwidXNlRGlzcGF0Y2giLCJyZWZFcXVhbGl0eSIsImEiLCJiIiwiY3JlYXRlU2VsZWN0b3JIb29rIiwic2VsZWN0b3IiLCJlcXVhbGl0eUZuIiwiX3VzZVJlZHV4Q29udGV4dCIsInNlbGVjdGVkU3RhdGUiLCJjb250ZXh0U3ViIiwiZm9yY2VSZW5kZXIiLCJ1c2VSZWR1Y2VyIiwicyIsImxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IiLCJ1c2VSZWYiLCJsYXRlc3RTZWxlY3RvciIsImxhdGVzdFN0b3JlU3RhdGUiLCJsYXRlc3RTZWxlY3RlZFN0YXRlIiwic3RvcmVTdGF0ZSIsImN1cnJlbnQiLCJuZXdTZWxlY3RlZFN0YXRlIiwidW5kZWZpbmVkIiwibWVzc2FnZSIsInN0YWNrIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3U3RvcmVTdGF0ZSIsIl9uZXdTZWxlY3RlZFN0YXRlIiwidXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24iLCJ1c2VEZWJ1Z1ZhbHVlIiwibmV3QmF0Y2giLCJ1c2VTZWxlY3RvciIsImRlZmF1bHRFcXVhbGl0eUNoZWNrIiwiYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwiLCJlcXVhbGl0eUNoZWNrIiwiZ2V0RGVwZW5kZW5jaWVzIiwiZnVuY3MiLCJkZXBlbmRlbmNpZXMiLCJldmVyeSIsImRlcCIsImRlcGVuZGVuY3lUeXBlcyIsIm1hcCIsImpvaW4iLCJFcnJvciIsIm1lbW9pemUiLCJfbGVuIiwiYXJndW1lbnRzIiwibWVtb2l6ZU9wdGlvbnMiLCJfa2V5IiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yIiwiZnVuYyIsImxhc3RBcmdzIiwibGFzdFJlc3VsdCIsImFwcGx5Iiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsInNvdXJjZSIsImZvckVhY2giLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCJjb2RlIiwiJCRvYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsInJhbmRvbVN0cmluZyIsIk1hdGgiLCJyYW5kb20iLCJzdWJzdHJpbmciLCJzcGxpdCIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiYWN0aW9uIiwidHlwZSIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImUiLCJzdGF0ZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiY29tcG9zZSIsImFyZyIsInJlZHVjZSIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwidCIsInIiLCJRIiwiaGFzT3duUHJvcGVydHkiLCJGdW5jdGlvbiIsIloiLCJMIiwidiIsIm5uIiwidSIsImhhcyIsImYiLCJzZXQiLCJkZWxldGUiLCJhZGQiLCJjIiwiWCIsIk1hcCIsInEiLCJTZXQiLCJwIiwibCIsInRuIiwiY3JlYXRlIiwiZCIsInkiLCJoIiwiZnJlZXplIiwiaXNGcm96ZW4iLCJybiIsIm0iLCJfIiwiVSIsImoiLCJPIiwiZyIsIlMiLCJ3IiwiUCIsIk0iLCJ4IiwiSCIsIkEiLCJJIiwiayIsIlIiLCJEIiwiY29uY2F0IiwiRiIsInoiLCJFIiwiTiIsIlQiLCJDIiwiZW4iLCJvbiIsIlByb3h5IiwicmV2b2NhYmxlIiwicmV2b2tlIiwicHJveHkiLCJKIiwiSyIsIm1pbiIsIkciLCJXIiwiQiIsIlJlZmxlY3QiLCJmb3IiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZGVsZXRlUHJvcGVydHkiLCJzZXRQcm90b3R5cGVPZiIsImFuIiwicHJvZHVjZSIsIlByb21pc2UiLCJ0aGVuIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwidXNlUHJveGllcyIsInNldFVzZVByb3hpZXMiLCJhdXRvRnJlZXplIiwic2V0QXV0b0ZyZWV6ZSIsImNyZWF0ZURyYWZ0IiwiZmluaXNoRHJhZnQiLCJhcHBseVBhdGNoZXMiLCJwYXRoIiwib3AiLCIkIiwiZm4iLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX19wcm90b19fIiwiU3RyaW5nIiwiX18iLCJfX3NwcmVhZEFycmF5IiwidG8iLCJpbCIsIl9fZGVmUHJvcCIsIl9faGFzT3duUHJvcCIsIl9fZ2V0T3duUHJvcFN5bWJvbHMiLCJfX3Byb3BJc0VudW0iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fZGVmTm9ybWFsUHJvcCIsIl9fb2JqU3ByZWFkIiwicHJvcCIsIl9iIiwiY29tcG9zZVdpdGhEZXZUb29scyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJNaWRkbGV3YXJlQXJyYXkiLCJfc3VwZXIiLCJhcmdzIiwiX3RoaXMiLCJzcGVjaWVzIiwicHJlcGVuZCIsImN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJvcHRpb25zIiwibWlkZGxld2FyZUFycmF5IiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsImlzQm9vbGVhbiIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiY3JlYXRlQWN0aW9uIiwicHJlcGFyZUFjdGlvbiIsImFjdGlvbkNyZWF0b3IiLCJwcmVwYXJlZCIsInBheWxvYWQiLCJtZXRhIiwiZXJyb3IiLCJtYXRjaCIsImV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrIiwiYnVpbGRlckNhbGxiYWNrIiwiZGVmYXVsdENhc2VSZWR1Y2VyIiwiYWN0aW9uc01hcCIsImFjdGlvbk1hdGNoZXJzIiwiYnVpbGRlciIsImFkZENhc2UiLCJ0eXBlT3JBY3Rpb25DcmVhdG9yIiwiYWRkTWF0Y2hlciIsIm1hdGNoZXIiLCJhZGREZWZhdWx0Q2FzZSIsImNyZWF0ZVNsaWNlIiwiaW5pdGlhbFN0YXRlIiwiZXh0cmFSZWR1Y2VycyIsIl9jIiwicmVkdWNlck5hbWVzIiwic2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSIsImFjdGlvbkNyZWF0b3JzIiwicmVkdWNlck5hbWUiLCJjYXNlUmVkdWNlciIsInByZXBhcmVDYWxsYmFjayIsIm1heWJlUmVkdWNlcldpdGhQcmVwYXJlIiwiYWN0aW9uS2V5IiwiZ2V0VHlwZTIiLCJwcmVwYXJlIiwibWFwT3JCdWlsZGVyQ2FsbGJhY2siLCJmaW5hbEFjdGlvbk1hdGNoZXJzIiwiZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXIiLCJmcm96ZW5Jbml0aWFsU3RhdGUiLCJjYXNlUmVkdWNlcnMiLCJjciIsInJlc3VsdCIsImRyYWZ0IiwiY3JlYXRlUmVkdWNlciIsImFjdGlvbnMiLCJpZCIsInV1aWR2NCIsImxldmVsIiwic3Ryb2tlIiwiYmxvY2siLCJtdXNjbGUiLCJtYXRlcmlhbCIsIl9pc1BsYWNlaG9sZGVyIiwiX2N1cnJ5MSIsImYxIiwiX2N1cnJ5MiIsImYyIiwiX2EiLCJfYXJyYXlGcm9tSXRlcmF0b3IiLCJsaXN0IiwiX2luY2x1ZGVzV2l0aCIsInByZWQiLCJpZHgiLCJfaGFzIiwiaXMiLCJoYXNFbnVtQnVnIiwibm9uRW51bWVyYWJsZVByb3BzIiwiaGFzQXJnc0VudW1CdWciLCJjb250YWlucyIsIml0ZW0iLCJuSWR4Iiwia3MiLCJjaGVja0FyZ3NMZW5ndGgiLCJ2YWwiLCJfdW5pcUNvbnRlbnRFcXVhbHMiLCJhSXRlcmF0b3IiLCJiSXRlcmF0b3IiLCJzdGFja0EiLCJzdGFja0IiLCJlcSIsIl9lcXVhbHMiLCJhSXRlbSIsInR5cGVBIiwiZXF1YWxzIiwiX2Z1bmN0aW9uTmFtZSIsInZhbHVlT2YiLCJnbG9iYWwiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwic3RpY2t5IiwidW5pY29kZSIsInNpemUiLCJlbnRyaWVzIiwidmFsdWVzIiwia2V5c0EiLCJleHRlbmRlZFN0YWNrQSIsImV4dGVuZGVkU3RhY2tCIiwiX2luY2x1ZGVzIiwiaW5mIiwiX2luZGV4T2YiLCJoYXNPckFkZCIsInNob3VsZEFkZCIsInByZXZTaXplIiwiSW5maW5pdHkiLCJfaXRlbXMiLCJfbmF0aXZlU2V0IiwiYklkeCIsIl9TZXQiLCJzZWNvbmQiLCJvdXQiLCJmaXJzdExlbiIsInNlY29uZExlbiIsInRvRmlsdGVyT3V0IiwiX2NvbmNhdCIsInNldDEiLCJzZXQyIiwibGVuMSIsImxlbjIiLCJfYXJpdHkiLCJhMCIsImExIiwiYTIiLCJhMyIsImE0IiwiYTUiLCJhNiIsImE3IiwiYTgiLCJhOSIsIl9waXBlIiwiX2N1cnJ5MyIsImYzIiwiX2lzU3RyaW5nIiwiX2lzQXJyYXkiLCJub2RlVHlwZSIsIlhXcmFwIiwiYWNjIiwidGhpc09iaiIsIl9pdGVyYWJsZVJlZHVjZSIsInhmIiwic3RlcCIsIl9tZXRob2RSZWR1Y2UiLCJtZXRob2ROYW1lIiwic3ltSXRlcmF0b3IiLCJfcmVkdWNlIiwiX3h3cmFwIiwiX2FycmF5UmVkdWNlIiwiX2NoZWNrRm9yTWV0aG9kIiwibWV0aG9kbmFtZSIsImZyb21JbmRleCIsInRvSW5kZXgiLCJwaXBlIiwicmV2ZXJzZSIsIl9pZGVudGl0eSIsImFwcGxpZWRJdGVtIiwiZXhlcmNpc2VzUmVkdWNlciIsImV4ZXJjaXNlc0xpc3QiLCJmaWx0ZXJCeUxldmVsIiwiZXgiLCJmaWx0ZXJCeVN0cm9rZSIsInN0cm9rZXNUYXJnZXRlZCIsIm5ld1N0YXRlIiwiaW5jbHVkZXMiLCJzdHJva2VzVG9SZW1vdmUiLCJzdHJva2VUb1JlbW92ZSIsImZpbHRlckJ5TWF0ZXJpYWwiLCJtYXRlcmlhbHNOb3RVc2VkIiwibWF0ZXJpYWxOb3RVc2VkIiwicmVzZXRMaXN0IiwicmVzZXQiLCJyYW5kb21JbnRGcm9tSW50ZXJ2YWwiLCJtYXgiLCJmbG9vciIsInNodWZmbGUiLCJhcnJheSIsInJhbmRvbUluZGV4IiwiY3VycmVudEluZGV4IiwicmFuZG9tVmFsdWUiLCJ3YXJtdXBSZWR1Y2VyIiwiY29weV9maWx0ZXJfc2VsZWN0X3dhcm11cEV4ZXJjaXNlcyIsIm51bWJlckV4ZXJjaXNlcyIsImZpbHRlcmVkRXhlcmNpc2VzIiwibWV0ZXJzIiwid2FybXVwRXhlcmNpc2VzIiwicGVuZGluZ0V4ZXJjaXNlcyIsImV4c19tYXRlcmlhbCIsInNvbWUiLCJ0b29sIiwid2FybXVwVG9vbCIsImNvdW50ZXIiLCJhcnJheVRvU2VsZWN0RnJvbSIsInNlbGVjdGVkIiwiaW5kZXgyIiwiZmluZEluZGV4IiwiZWwiLCJuX211c2NsZSIsImV4c19tdXNjbGUiLCJwYXJ0IiwiZXhzX2xlZnQiLCJ0ZWNobmlxdWVSZWR1Y2VyIiwiY29weV9maWx0ZXJfc2VsZWN0X3RlY2huaXF1ZUV4ZXJjaXNlcyIsInRlY2huaXF1ZUV4ZXJjaXNlcyIsInRlY2huaXF1ZVRvb2wiLCJtYWluUmVkdWNlciIsImNvcHlfZmlsdGVyX3NlbGVjdF9tYWluRXhlcmNpc2VzIiwibWFpbkV4ZXJjaXNlcyIsIm1haW5Ub29sIiwiY29vbGRvd25SZWR1Y2VyIiwiY29weV9maWx0ZXJfc2VsZWN0X2Nvb2xkb3duRXhlcmNpc2VzIiwiY29vbGRvd25FeGVyY2lzZXMiLCJjb29sZG93blRvb2wiLCJhc3NpZ24iLCJvdXRwdXQiLCJuZXh0S2V5IiwiZGlzcGxheVJlZHVjZXIiLCJmb3JtIiwidHJhaW5pbmciLCJidXR0b25zIiwiZGlzcGxheUhpZGUiLCJwYXJ0c1RvRGlzcGxheUhpZGUiLCJfY3VycnlOIiwicmVjZWl2ZWQiLCJjb21iaW5lZCIsImFyZ3NJZHgiLCJsZWZ0IiwiY29tYmluZWRJZHgiLCJvcmlnRm4iLCJfaXNUcmFuc2Zvcm1lciIsIl9kaXNwYXRjaGFibGUiLCJtZXRob2ROYW1lcyIsInBvcCIsInRyYW5zZHVjZXIiLCJYTWFwIiwiX3hmQmFzZSIsImlucHV0IiwiZnVuY3RvciIsIl9tYXAiLCJnZW5lcmF0ZUVhY2giLCJleHMiLCJlYWNoQXJyIiwicG9zc2libGVFYWNoTGlzdCIsImdlbmVyYXRlVHJhaW5pbmdTZXQiLCJzZXRzIiwicG9zc2libGVTZXRzIiwiZWFjaCIsInRvdGFsIiwiY2FsY3VsYXRlU2V0Iiwic2V0c1JlZHVjZXIiLCJ3YXJtdXAiLCJ0ZWNobmlxdWUiLCJtYWluIiwiY29vbGRvd24iLCJnZW5lcmF0ZU1ldGVyQmxvY2tzIiwicmVmIiwic3VidHJhY3RUZWNobmlxdWUiLCJzdWJ0cmFjdENvb2xkb3duIiwidG90YWxXYXJtdXAiLCJ0b3RhbFRlY2huaXF1ZSIsInRvdGFsQ29vbGRvd24iLCJ0b3RhbE1haW4iLCJhcnJDb3JyZWN0ZWQiLCJhcnJNZXRlcnMiLCJhcnJDb3JyZWN0IiwiYXJyVG9Db3JyZWN0IiwicmFuZG9tSW5kZXhUb0FkZE1ldGVycyIsInRvQWRkIiwibWFwSW5kZXhlZCIsInNvcnQiLCJnZW5lcmF0ZVRvdGFsIiwiZ2VuZXJhdGVNZXRlckV4ZXJjaXNlcyIsIndhcm11cEV4cyIsInRlY2huaXF1ZUV4cyIsIm1haW5FeHMiLCJjb29sZG93bkV4cyIsImdlbmVyYXRlTWFpblNldHMiLCJlYWNoTGlzdCIsImluZGV4ZXMiLCJjdXRJbmRleCIsImVhY2hMaXN0MSIsImVhY2hMaXN0MiIsInNldExpc3QiLCJlYWNoU2V0IiwiZ2VuZXJhdGVUZWNobmlxdWVTZXRzIiwicGFjZVJlZHVjZXIiLCJzZXRSZWR1eFBhY2UiLCJwYWNlIiwiTnVtYmVyIiwiZm9ybWF0UGFjZSIsImR1cmF0aW9uIiwibWludXRlcyIsInNlY29uZHMiLCJjYXBpdGFsaXplRmlyc3RMZXR0ZXIiLCJzdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImlucHV0RGF0YSIsInVzZVN0YXRlIiwic3Ryb2tlcyIsInNldFN0cm9rZXMiLCJtYXRlcmlhbHMiLCJzZXRNYXRlcmlhbHMiLCJtdXNjbGVzIiwic2V0TXVzY2xlcyIsInNldExldmVsIiwic2V0TWV0ZXJzIiwic2V0UGFjZSIsInNldFNlbGVjdGVkIiwic2hvd01lc3NhZ2UiLCJzZXRTaG93TWVzc2FnZSIsImRpc3BsYXkiLCJwYWNlVGltZSIsImxpc3RUb01hcCIsImxldmVscyIsImZpbHRlckV4ZXJjaXNlcyIsImZpbHRlcmVkTGlzdCIsImV4ZXJjaXNlcyIsInRlY2huaXF1ZUVhY2hMaXN0IiwibWFpbkVhY2hMaXN0IiwiZXhlY3V0ZVNjcm9sbCIsImdldEVsZW1lbnRCeUlkIiwic2Nyb2xsSW50b1ZpZXciLCJiZWhhdmlvciIsImhhbmRsZVN0cm9rZXMiLCJjaGVja2VkIiwiaGFuZGxlTWF0ZXJpYWxzIiwiaGFuZGxlTXVzY2xlcyIsImNsYXNzTmFtZSIsIm9uU3VibWl0IiwicHJldmVudERlZmF1bHQiLCJyb2xlIiwic3R5bGUiLCJtYXJnaW5SaWdodCIsIm9uQ2hhbmdlIiwiaHRtbEZvciIsImJvcmRlcldpZHRoIiwidHJhbnNmb3JtIiwibWFyZ2luVG9wIiwib25DbGljayIsIndhcm11cEVhY2giLCJ3aWR0aCIsInRlY2huaXF1ZVNldHMiLCJjb25kaXRpb25hbEZvcm1hdCIsInRvRm9ybWF0Iiwicm91bmQ1IiwiY2VpbCIsImdlbmVyYXRlVGltZXMiLCJpbnRlcnZhbHMiLCJnZW5lcmF0ZVRpbWluZ1Jlc3RCeU1ldGVycyIsInNlbGVjdFJlc3RUaW1pbmciLCJvblRpbWluZ0FyciIsImdlbmVyYXRlVGltaW5nT25MZXNzQnlNZXRlcnMiLCJzZWxlY3RPbkxlc3NUaW1pbmciLCJhdFRpbWluZyIsImdlbmVyYXRlQnlNZXRlcnMiLCJzZWxlY3RBdFRpbWluZyIsIm1haW5TZXRzIiwiZWFjaFNldE1ldGVyc0xpc3QiLCJibG9ja1NldCIsInNpbmdsZVNldCIsImNvb2xkb3duRWFjaCIsInJvb3RSZWR1Y2VyIiwiY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlIiwiZGV2VG9vbHMiLCJfZiIsIl9nIiwiZW5oYW5jZXJzIiwiZmluYWxNaWRkbGV3YXJlIiwibWlkZGxld2FyZUVuaGFuY2VyIiwiZmluYWxDb21wb3NlIiwidHJhY2UiLCJzdG9yZUVuaGFuY2VycyIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwic2V0VGltZW91dCIsImhyZWYiLCJyZWwiLCJoZWlnaHQiLCJ2aWV3Qm94IiwiZmlsbCIsIm1vZHVsZSIsImhvdCIsImFjY2VwdCIsIlJlYWN0RE9NIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwib2JqZWN0UHJvdG90eXBlIiwiZXhwb3J0cyIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwibm9ybWFsaXplVXJsIiwic3JjQnlNb2R1bGVJZCIsIm5vRG9jdW1lbnQiLCJub29wIiwidXBkYXRlQ3NzIiwidXJsIiwiaXNVcmxSZXF1ZXN0IiwiaXNMb2FkZWQiLCJ2aXNpdGVkIiwibmV3RWwiLCJjbG9uZU5vZGUiLCJhZGRFdmVudExpc3RlbmVyIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiRGF0ZSIsIm5vdyIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJyZWxvYWRTdHlsZSIsInNyYyIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImxvYWRlZCIsInJldCIsInN0cmlwV1dXIiwiZ2V0UmVsb2FkVXJsIiwicmVsb2FkQWxsIiwibW9kdWxlSWQiLCJjb25zb2xlIiwibG9nIiwidGltZSIsInRpbWVvdXQiLCJnZXRTY3JpcHRTcmMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGFzdFNjcmlwdFRhZyIsImZpbGVNYXAiLCJzcGxpdFJlc3VsdCIsImZpbGVuYW1lIiwibWFwUnVsZSIsInJlZyIsIlJlZ0V4cCIsInJlcGxhY2UiLCJnZXRDdXJyZW50U2NyaXB0VXJsIiwicmVsb2FkZWQiLCJsb2NhbHMiLCJzZWxmIiwiZnVuY3Rpb25DYWxsIiwiY2xlYXJUaW1lb3V0IiwidXJsU3RyaW5nIiwidHJpbSIsInByb3RvY29sIiwiY29tcG9uZW50cyIsImhvc3QiLCJ0b0xvd2VyQ2FzZSIsImFjY3VtdWxhdG9yIiwiY3NzUmVsb2FkIiwiZGlzcG9zZSIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJudW1iZXIiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJlbmNvZGVVUklDb21wb25lbnQiLCJiYSIsImNhIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsIm9hIiwicGEiLCJxYSIsIm1hIiwiaXNOYU4iLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwiY29uc3RydWN0IiwiUWEiLCJ0YWciLCJfcmVuZGVyIiwiUmEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCIkYSIsImFiIiwiYmIiLCJjYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsIkNoaWxkcmVuIiwiZGIiLCJmYiIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJzYiIsInRiIiwic2V0UHJvcGVydHkiLCJ1YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInZiIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk9iIiwiUGIiLCJRYiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSYiIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJiYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsInBvaW50ZXJJZCIsInRjIiwidmMiLCJ3YyIsImxhbmVQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJ4YyIsInljIiwic2hpZnQiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiY2x6MzIiLCJiZCIsImNkIiwiTE4yIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwidWMiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJKZCIsImNsaXBib2FyZERhdGEiLCJMZCIsImRhdGEiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUmQiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlRkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJvZmZzZXQiLCJNZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsImluc3RhbmNlIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiTmIiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkNvbXBvbmVudCIsInJlZnMiLCJHZyIsIktnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSGciLCJJZyIsIkpnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJNZyIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiVGciLCJVZyIsIm1vZGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIndoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJnZXRTbmFwc2hvdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsImJhc2VMYW5lcyIsIm5pIiwib2kiLCJwaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInFpIiwicmkiLCJwZW5kaW5nQ29udGV4dCIsIkJpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlYiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiYmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJZIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJjayIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiU2MiLCJLaiIsIkxqIiwiTWoiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiVGMiLCJOaiIsIk9qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJVaiIsInRpbWVvdXRIYW5kbGUiLCJXaiIsIlhqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsImV4dGVuZCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJrayIsImxrIiwibWsiLCJuayIsIm9rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJoayIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJKU09OIiwic3RyaW5naWZ5IiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIkNvbnN1bWVyIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ2MSIsInY0IiwidXVpZCIsImJ5dGVUb0hleCIsInN1YnN0ciIsImJ1ZiIsImJ0aCIsImdldFJhbmRvbVZhbHVlcyIsImNyeXB0byIsIm1zQ3J5cHRvIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5kcyIsIl9ub2RlSWQiLCJfY2xvY2tzZXEiLCJybmciLCJieXRlc1RvVXVpZCIsIl9sYXN0TVNlY3MiLCJfbGFzdE5TZWNzIiwiY2xvY2tzZXEiLCJzZWVkQnl0ZXMiLCJtc2VjcyIsImdldFRpbWUiLCJuc2VjcyIsImR0IiwidGwiLCJ0bWgiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiY2FjaGVkTW9kdWxlIiwiZXhlY09wdGlvbnMiLCJmYWN0b3J5IiwiX193ZWJwYWNrX21vZHVsZXNfXyIsInJlcXVpcmUiLCJoYW5kbGVyIiwiZGVmaW5pdGlvbiIsImh1IiwiY2h1bmtJZCIsIm1pbmlDc3NGIiwiaG1yRiIsImdsb2JhbFRoaXMiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwiZ2V0QXR0cmlidXRlIiwiY2hhcnNldCIsIm9uU2NyaXB0Q29tcGxldGUiLCJvbmVycm9yIiwib25sb2FkIiwiZG9uZUZucyIsImhlYWQiLCJjdXJyZW50Q2hpbGRNb2R1bGUiLCJibG9ja2luZ1Byb21pc2VzIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJ3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyIsImJsb2NrZXIiLCJhbGwiLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJobXJNIiwidXBkYXRlIiwiYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMiLCJ1cGRhdGVkTW9kdWxlcyIsImhtckMiLCJwcm9taXNlcyIsImludGVybmFsQXBwbHkiLCJob3RBcHBseSIsInJlc29sdmUiLCJyZXN1bHRzIiwiZXJyb3JzIiwicmVwb3J0RXJyb3IiLCJvdXRkYXRlZE1vZHVsZXMiLCJtb2R1bGVzIiwiaG1ySSIsImhtckQiLCJfbWFpbiIsInJlcXVlc3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwid2FybiIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInByb21pc2UiLCJ0cmFja0Jsb2NraW5nUHJvbWlzZSIsImNyZWF0ZVJlcXVpcmUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfYWNjZXB0ZWRFcnJvckhhbmRsZXJzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9yZXF1aXJlU2VsZiIsImVycm9ySGFuZGxlciIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaW52YWxpZGF0ZSIsImNoZWNrIiwic3RhdHVzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiZnVsbGhyZWYiLCJyZWplY3QiLCJsaW5rVGFnIiwiZXJyb3JUeXBlIiwicmVhbEhyZWYiLCJleGlzdGluZ0xpbmtUYWdzIiwiZGF0YUhyZWYiLCJleGlzdGluZ1N0eWxlVGFncyIsIm9sZFRhZyIsIm1pbmlDc3MiLCJjaHVua0lkcyIsInJlbW92ZWRDaHVua3MiLCJyZW1vdmVkTW9kdWxlcyIsImFwcGx5SGFuZGxlcnMiLCJ1cGRhdGVkTW9kdWxlc0xpc3QiLCJhcyIsImN1cnJlbnRVcGRhdGVDaHVua3MiLCJjdXJyZW50VXBkYXRlIiwiY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MiLCJjdXJyZW50VXBkYXRlUnVudGltZSIsImluc3RhbGxlZENodW5rcyIsIndhaXRpbmdVcGRhdGVSZXNvbHZlcyIsImxvYWRVcGRhdGVDaHVuayIsInJlYWxTcmMiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWVJdGVtIiwicGFyZW50SWQiLCJwYXJlbnQiLCJhZGRBbGxUb1NldCIsImpzb25wSG1yIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsIm5ld01vZHVsZUZhY3RvcnkiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwib3V0ZGF0ZWRNb2R1bGVJZCIsImRlcGVuZGVuY3kiLCJkaXNwb3NlSGFuZGxlcnMiLCJjYWxsYmFja3MiLCJlcnJvckhhbmRsZXJzIiwiZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzIiwiYWNjZXB0Q2FsbGJhY2siLCJkZXBlbmRlbmN5SWQiLCJlcnIyIiwib25FcnJvcmVkIiwib3JpZ2luYWxFcnJvciIsImlnbm9yZUVycm9yZWQiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJqc29ucCIsImZldGNoIiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwianNvbiJdLCJtYXBwaW5ncyI6IlVBQUlBLEVBQ0FDLEVDREFDLEVBMkJBQyxFQXdCQUMsRUFDQUMsRUFDQUMsRSw4QkNyRFcsU0FBU0MsRUFBa0JDLEVBQUtDLElBQ2xDLE1BQVBBLEdBQWVBLEVBQU1ELEVBQUlFLFVBQVFELEVBQU1ELEVBQUlFLFFBRS9DLElBQUssSUFBSUMsRUFBSSxFQUFHQyxFQUFPLElBQUlDLE1BQU1KLEdBQU1FLEVBQUlGLEVBQUtFLElBQzlDQyxFQUFLRCxHQUFLSCxFQUFJRyxHQUdoQixPQUFPQyxFQ05NLFNBQVNFLEVBQTRCQyxFQUFHQyxHQUNyRCxHQUFLRCxFQUFMLENBQ0EsR0FBaUIsaUJBQU5BLEVBQWdCLE9BQU8sRUFBaUJBLEVBQUdDLEdBQ3RELElBQUlDLEVBQUlDLE9BQU9DLFVBQVVDLFNBQVNDLEtBQUtOLEdBQUdPLE1BQU0sR0FBSSxHQUVwRCxNQURVLFdBQU5MLEdBQWtCRixFQUFFUSxjQUFhTixFQUFJRixFQUFFUSxZQUFZQyxNQUM3QyxRQUFOUCxHQUFxQixRQUFOQSxFQUFvQkosTUFBTVksS0FBS1YsR0FDeEMsY0FBTkUsR0FBcUIsMkNBQTJDUyxLQUFLVCxHQUFXLEVBQWlCRixFQUFHQyxRQUF4RyxHQ0hh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SyxNQUNWLEVBQUcsQ0FDRCxDQUFDLEdBQUksSUFBSyxLQUNWLENBQUMsSUFBSyxJQUFLLE1BRWIsRUFBRyxDQUFDLENBQUMsR0FBSSxJQUFLLElBQUssT0FFckIsSUFBSyxDQUNILEVBQUcsQ0FBQyxDQUFDLE1BQ0wsRUFBRyxDQUFDLENBQUMsSUFBSyxNQUNWLEVBQUcsQ0FDRCxDQUFDLElBQUssR0FBSSxLQUNWLENBQUMsSUFBSyxJQUFLLE1BRWIsRUFBRyxDQUFDLENBQUMsR0FBSSxJQUFLLElBQUssT0FFckIsSUFBSyxDQUNILEVBQUcsQ0FBQyxDQUFDLE1BQ0wsRUFBRyxDQUNELENBQUMsSUFBSyxLQUNOLENBQUMsSUFBSyxNQUVSLEVBQUcsQ0FBQyxDQUFDLElBQUssSUFBSyxNQUNmLEVBQUcsQ0FDRCxDQUFDLElBQUssSUFBSyxJQUFLLEtBQ2hCLENBQUMsR0FBSSxJQUFLLEdBQUksT0FHbEIsSUFBSyxDQUNILEVBQUcsQ0FBQyxDQUFDLE1BQ0wsRUFBRyxDQUNELENBQUMsSUFBSyxLQUNOLENBQUMsSUFBSyxNQUVSLEVBQUcsQ0FBQyxDQUFDLElBQUssSUFBSyxNQUNmLEVBQUcsQ0FDRCxDQUFDLElBQUssSUFBSyxJQUFLLEtBQ2hCLENBQUMsR0FBSSxJQUFLLEdBQUksT0FHbEIsSUFBSyxDQUNILEVBQUcsQ0FBQyxDQUFDLE1BQ0wsRUFBRyxDQUNELENBQUMsSUFBSyxLQUNOLENBQUMsSUFBSyxNQUVSLEVBQUcsQ0FBQyxDQUFDLElBQUssSUFBSyxNQUNmLEVBQUcsQ0FDRCxDQUFDLElBQUssSUFBSyxJQUFLLEtBQ2hCLENBQUMsSUFBSyxJQUFLLEdBQUksT0FHbkIsSUFBSyxDQUNILEVBQUcsQ0FBQyxDQUFDLE1BQ0wsRUFBRyxDQUNELENBQUMsSUFBSyxLQUNOLENBQUMsSUFBSyxNQUVSLEVBQUcsQ0FBQyxDQUFDLElBQUssSUFBSyxNQUNmLEVBQUcsQ0FDRCxDQUFDLElBQUssSUFBSyxJQUFLLEtBQ2hCLENBQUMsSUFBSyxJQUFLLEdBQUksT0FHbkIsSUFBSyxDQUNILEVBQUcsQ0FB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QyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3BCLElBQUssQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3RCLEVBQUcsQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3BCLElBQUssQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3RCLEVBQUcsQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3BCLElBQUssQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3RCLEVBQUcsQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3BCLElBQUssQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3RCLEVBQUcsQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3BCLElBQUssQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3RCLEdBQUksQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3JCLEtBQU0sQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3ZCLEdBQUksQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3JCLEtBQU0sQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3ZCLEdBQUksQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3JCLEtBQU0sQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3ZCLEdBQUksQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3JCLEtBQU0sQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3ZCLEdBQUksQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3JCLEtBQU0sQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3ZCLEdBQUksQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3JCLEtBQU0sQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQ3ZCLEdBQUksQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3JCLEtBQU0sQ0FBQyxJQUFLLEVBQUcsSUFBSyxFQUFHLEtBQ3ZCLEdBQUksQ0FBQyxFQUFHLElBQUssRUFBRyxJQUFLLElBQ3JCLEtBQU0sQ0FB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QUFFNCtELEVBQWlCN0YsU0FDVm55RCxJQUE3Qmc0RCxFQUFnQjdGLEtBRWhCa0MsRUFBU3o1RCxLQUFLczlELEVBQWdCL0YsSUFDOUJ5RixFQUFvQnpGLElBQVcsTUFNbkNULEVBQW9Cc0MsS0FBTyxLQUMxQixHQUFxQixvQkFBVjBHLE1BQXVCLE1BQU0sSUFBSXI1RCxNQUFNLHNDQUNsRCxPQUFPcTVELE1BQU1oSixFQUFvQnhwRCxFQUFJd3BELEVBQW9CVyxRQUFRN21ELE1BQU1tdkQsSUFDdEUsR0FBdUIsTUFBcEJBLEVBQVNwRSxPQUFaLENBQ0EsSUFBSW9FLEVBQVN4UyxHQUFJLE1BQU0sSUFBSTltRCxNQUFNLG1DQUFxQ3M1RCxFQUFTQyxZQUMvRSxPQUFPRCxFQUFTRSxhLEdDbmZRbkosRUFBb0IsTSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJzd2ltbWluZ19nZW5lcmF0b3I6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJ2YXIgY3JlYXRlU3R5bGVzaGVldCA9IChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHRyZXR1cm4gbGlua1RhZztcbn07XG52YXIgZmluZFN0eWxlc2hlZXQgPSAoaHJlZiwgZnVsbGhyZWYpID0+IHtcblx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHRhZztcblx0fVxuXHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcblx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiB0YWc7XG5cdH1cbn07XG52YXIgbG9hZFN0eWxlc2hlZXQgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGlmKGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcblx0XHRjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpO1xuXHR9KTtcbn1cbi8vIG5vIGNodW5rIGxvYWRpbmdcblxudmFyIG9sZFRhZ3MgPSBbXTtcbnZhciBuZXdUYWdzID0gW107XG52YXIgYXBwbHlIYW5kbGVyID0gKG9wdGlvbnMpID0+IHtcblx0cmV0dXJuIHsgZGlzcG9zZTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvbGRUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgb2xkVGFnID0gb2xkVGFnc1tpXTtcblx0XHRcdGlmKG9sZFRhZy5wYXJlbnROb2RlKSBvbGRUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRUYWcpO1xuXHRcdH1cblx0XHRvbGRUYWdzLmxlbmd0aCA9IDA7XG5cdH0sIGFwcGx5OiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5ld1RhZ3MubGVuZ3RoOyBpKyspIG5ld1RhZ3NbaV0ucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdFx0bmV3VGFncy5sZW5ndGggPSAwO1xuXHR9IH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMubWluaUNzcyA9IChjaHVua0lkcywgcmVtb3ZlZENodW5rcywgcmVtb3ZlZE1vZHVsZXMsIHByb21pc2VzLCBhcHBseUhhbmRsZXJzLCB1cGRhdGVkTW9kdWxlc0xpc3QpID0+IHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGNodW5rSWRzLmZvckVhY2goKGNodW5rSWQpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHR2YXIgb2xkVGFnID0gZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpO1xuXHRcdGlmKCFvbGRUYWcpIHJldHVybjtcblx0XHRwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciB0YWcgPSBjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCAoKSA9PiB7XG5cdFx0XHRcdHRhZy5hcyA9IFwic3R5bGVcIjtcblx0XHRcdFx0dGFnLnJlbCA9IFwicHJlbG9hZFwiO1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9LCByZWplY3QpO1xuXHRcdFx0b2xkVGFncy5wdXNoKG9sZFRhZyk7XG5cdFx0XHRuZXdUYWdzLnB1c2godGFnKTtcblx0XHR9KSk7XG5cdH0pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlO1xuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VTdG9yZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVTdG9yZUhvb2soKTsiLCJpbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdG9yZSBhcyB1c2VEZWZhdWx0U3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vdXNlU3RvcmUnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVN0b3JlID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0U3RvcmUgOiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaDtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBgZGlzcGF0Y2hgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xyXG4gKiAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxyXG4gKiAgIGNvbnN0IGluY3JlYXNlQ291bnRlciA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ2luY3JlYXNlLWNvdW50ZXInIH0pLCBbXSlcclxuICogICByZXR1cm4gKFxyXG4gKiAgICAgPGRpdj5cclxuICogICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cclxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZWFzZUNvdW50ZXJ9PkluY3JlYXNlIGNvdW50ZXI8L2J1dHRvbj5cclxuICogICAgIDwvZGl2PlxyXG4gKiAgIClcclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VEaXNwYXRjaCA9IC8qI19fUFVSRV9fKi9jcmVhdGVEaXNwYXRjaEhvb2soKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IHN0b3JlU3RhdGUgIT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmVTdGF0ZSk7IC8vIGVuc3VyZSBsYXRlc3Qgc2VsZWN0ZWQgc3RhdGUgaXMgcmV1c2VkIHNvIHRoYXQgYSBjdXN0b20gZXF1YWxpdHkgZnVuY3Rpb24gY2FuIHJlc3VsdCBpbiBpZGVudGljYWwgcmVmZXJlbmNlc1xuXG4gICAgICBpZiAobGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID09PSB1bmRlZmluZWQgfHwgIWVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICBzZWxlY3RlZFN0YXRlID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnIubWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcblwiO1xuICAgIH1cblxuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgPSBzdG9yZVN0YXRlO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1N0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIHZhciBfbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQobmV3U3RvcmVTdGF0ZSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4oX25ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBfbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgICAgbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50ID0gbmV3U3RvcmVTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcigpO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVxdWFsaXR5Rm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGFuIGVxdWFsaXR5IGZ1bmN0aW9uIHRvIHVzZVNlbGVjdG9yXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZSxcbiAgICAgICAgY29udGV4dFN1YiA9IF91c2VSZWR1eENvbnRleHQuc3Vic2NyaXB0aW9uO1xuXG4gICAgdmFyIHNlbGVjdGVkU3RhdGUgPSB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICAgIHVzZURlYnVnVmFsdWUoc2VsZWN0ZWRTdGF0ZSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXHJcbiAqXHJcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXHJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXHJcbiAqIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBuZWVkcyB0byBiZSByZS1yZW5kZXJlZC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBlcXVhbGl0eUZuIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgZXF1YWxpdHlcclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXHJcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZnVuY3Rpb24gZGVmYXVsdEVxdWFsaXR5Q2hlY2soYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuZnVuY3Rpb24gYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgcHJldiwgbmV4dCkge1xuICBpZiAocHJldiA9PT0gbnVsbCB8fCBuZXh0ID09PSBudWxsIHx8IHByZXYubGVuZ3RoICE9PSBuZXh0Lmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIERvIHRoaXMgaW4gYSBmb3IgbG9vcCAoYW5kIG5vdCBhIGBmb3JFYWNoYCBvciBhbiBgZXZlcnlgKSBzbyB3ZSBjYW4gZGV0ZXJtaW5lIGVxdWFsaXR5IGFzIGZhc3QgYXMgcG9zc2libGUuXG4gIHZhciBsZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICghZXF1YWxpdHlDaGVjayhwcmV2W2ldLCBuZXh0W2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYykge1xuICB2YXIgZXF1YWxpdHlDaGVjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdEVxdWFsaXR5Q2hlY2s7XG5cbiAgdmFyIGxhc3RBcmdzID0gbnVsbDtcbiAgdmFyIGxhc3RSZXN1bHQgPSBudWxsO1xuICAvLyB3ZSByZWZlcmVuY2UgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIHRoZW0gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIGxhc3RBcmdzLCBhcmd1bWVudHMpKSB7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgbGFzdFJlc3VsdCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNzWzBdKSA/IGZ1bmNzWzBdIDogZnVuY3M7XG5cbiAgaWYgKCFkZXBlbmRlbmNpZXMuZXZlcnkoZnVuY3Rpb24gKGRlcCkge1xuICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nO1xuICB9KSkge1xuICAgIHZhciBkZXBlbmRlbmN5VHlwZXMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZGVwO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZWxlY3RvciBjcmVhdG9ycyBleHBlY3QgYWxsIGlucHV0LXNlbGVjdG9ycyB0byBiZSBmdW5jdGlvbnMsICcgKyAoJ2luc3RlYWQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogWycgKyBkZXBlbmRlbmN5VHlwZXMgKyAnXScpKTtcbiAgfVxuXG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvckNyZWF0b3IobWVtb2l6ZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVtb2l6ZU9wdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWVtb2l6ZU9wdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGZ1bmNzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIHJlY29tcHV0YXRpb25zID0gMDtcbiAgICB2YXIgcmVzdWx0RnVuYyA9IGZ1bmNzLnBvcCgpO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBnZXREZXBlbmRlbmNpZXMoZnVuY3MpO1xuXG4gICAgdmFyIG1lbW9pemVkUmVzdWx0RnVuYyA9IG1lbW9pemUuYXBwbHkodW5kZWZpbmVkLCBbZnVuY3Rpb24gKCkge1xuICAgICAgcmVjb21wdXRhdGlvbnMrKztcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1dLmNvbmNhdChtZW1vaXplT3B0aW9ucykpO1xuXG4gICAgLy8gSWYgYSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgZXhhY3Qgc2FtZSBhcmd1bWVudHMgd2UgZG9uJ3QgbmVlZCB0byB0cmF2ZXJzZSBvdXIgZGVwZW5kZW5jaWVzIGFnYWluLlxuICAgIHZhciBzZWxlY3RvciA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgICAgdmFyIGxlbmd0aCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGFuZCBtdXRhdGUgYSBsb2NhbCBsaXN0IG9mIHBhcmFtcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgIHBhcmFtcy5wdXNoKGRlcGVuZGVuY2llc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiBtZW1vaXplZFJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgcGFyYW1zKTtcbiAgICB9KTtcblxuICAgIHNlbGVjdG9yLnJlc3VsdEZ1bmMgPSByZXN1bHRGdW5jO1xuICAgIHNlbGVjdG9yLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICBzZWxlY3Rvci5yZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucztcbiAgICB9O1xuICAgIHNlbGVjdG9yLnJlc2V0UmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGNyZWF0ZVNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKGRlZmF1bHRNZW1vaXplKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcihzZWxlY3RvcnMpIHtcbiAgdmFyIHNlbGVjdG9yQ3JlYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY3JlYXRlU2VsZWN0b3I7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArICgnd2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgJyArIHR5cGVvZiBzZWxlY3RvcnMpKTtcbiAgfVxuICB2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdG9ycyk7XG4gIHJldHVybiBzZWxlY3RvckNyZWF0b3Iob2JqZWN0S2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzZWxlY3RvcnNba2V5XTtcbiAgfSksIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICB2YWx1ZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoY29tcG9zaXRpb24sIHZhbHVlLCBpbmRleCkge1xuICAgICAgY29tcG9zaXRpb25bb2JqZWN0S2V5c1tpbmRleF1dID0gdmFsdWU7XG4gICAgICByZXR1cm4gY29tcG9zaXRpb247XG4gICAgfSwge30pO1xuICB9KTtcbn0iLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGlmIChlbnVtZXJhYmxlT25seSkge1xuICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyJztcblxuLyoqXG4gKiBBZGFwdGVkIGZyb20gUmVhY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9wYWNrYWdlcy9zaGFyZWQvZm9ybWF0UHJvZEVycm9yTWVzc2FnZS5qc1xuICpcbiAqIERvIG5vdCByZXF1aXJlIHRoaXMgbW9kdWxlIGRpcmVjdGx5ISBVc2Ugbm9ybWFsIHRocm93IGVycm9yIGNhbGxzLiBUaGVzZSBtZXNzYWdlcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggZXJyb3IgY29kZXNcbiAqIGR1cmluZyBidWlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gXCJNaW5pZmllZCBSZWR1eCBlcnJvciAjXCIgKyBjb2RlICsgXCI7IHZpc2l0IGh0dHBzOi8vcmVkdXguanMub3JnL0Vycm9ycz9jb2RlPVwiICsgY29kZSArIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIFwiICsgJ3VzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuICc7XG59XG5cbi8vIElubGluZWQgdmVyc2lvbiBvZiB0aGUgYHN5bWJvbC1vYnNlcnZhYmxlYCBwb2x5ZmlsbFxudmFyICQkb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnO1xufSkoKTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbmZ1bmN0aW9uIGtpbmRPZih2YWwpIHtcbiAgdmFyIHR5cGVPZlZhbCA9IHR5cGVvZiB2YWw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBJbmxpbmVkIC8gc2hvcnRlbmVkIHZlcnNpb24gb2YgYGtpbmRPZmAgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9raW5kLW9mXG4gICAgZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgICAgIGlmICh2YWwgPT09IHZvaWQgMCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSByZXR1cm4gJ2FycmF5JztcbiAgICAgIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgICAgIGlmIChpc0Vycm9yKHZhbCkpIHJldHVybiAnZXJyb3InO1xuICAgICAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGN0b3JOYW1lKHZhbCk7XG5cbiAgICAgIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgICAgIGNhc2UgJ1N5bWJvbCc6XG4gICAgICAgIGNhc2UgJ1Byb21pc2UnOlxuICAgICAgICBjYXNlICdXZWFrTWFwJzpcbiAgICAgICAgY2FzZSAnV2Vha1NldCc6XG4gICAgICAgIGNhc2UgJ01hcCc6XG4gICAgICAgIGNhc2UgJ1NldCc6XG4gICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yTmFtZTtcbiAgICAgIH0gLy8gb3RoZXJcblxuXG4gICAgICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN0b3JOYW1lKHZhbCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwudG9EYXRlU3RyaW5nID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuZ2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLnNldERhdGUgPT09ICdmdW5jdGlvbic7XG4gICAgfVxuXG4gICAgdHlwZU9mVmFsID0gbWluaUtpbmRPZih2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVPZlZhbDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiAnSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjY3JlYXRpbmctYS1zdG9yZS13aXRoLWVuaGFuY2VycyBmb3IgYW4gZXhhbXBsZS4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEpIDogXCJFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihlbmhhbmNlcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyKSA6IFwiRXhwZWN0ZWQgdGhlIHJvb3QgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKHJlZHVjZXIpICsgXCInXCIpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzKSA6ICdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQpIDogXCJFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihsaXN0ZW5lcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiAnWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBcIkFjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiBJbnN0ZWFkLCB0aGUgYWN0dWFsIHR5cGUgd2FzOiAnXCIgKyBraW5kT2YoYWN0aW9uKSArIFwiJy4gWW91IG1heSBuZWVkIHRvIGFkZCBtaWRkbGV3YXJlIHRvIHlvdXIgc3RvcmUgc2V0dXAgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIG90aGVyIHZhbHVlcywgc3VjaCBhcyAncmVkdXgtdGh1bmsnIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBmdW5jdGlvbnMuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNtaWRkbGV3YXJlIGFuZCBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNi1hc3luYy1sb2dpYyN1c2luZy10aGUtcmVkdXgtdGh1bmstbWlkZGxld2FyZSBmb3IgZXhhbXBsZXMuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg4KSA6ICdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGFuIGFjdGlvbiB0eXBlIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOSkgOiAnUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEwKSA6IFwiRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YobmV4dFJlZHVjZXIpKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTEpIDogXCJFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKG9ic2VydmVyKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsImZ1bmN0aW9uIG4obil7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheSh0PjE/dC0xOjApLGU9MTtlPHQ7ZSsrKXJbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwscik6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisoci5sZW5ndGg/XCIgXCIrci5tYXAoKGZ1bmN0aW9uKG4pe3JldHVyblwiJ1wiK24rXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gdChuKXtyZXR1cm4hIW4mJiEhbltRXX1mdW5jdGlvbiByKG4pe3JldHVybiEhbiYmKGZ1bmN0aW9uKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4hMTt2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7aWYobnVsbD09PXQpcmV0dXJuITA7dmFyIHI9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodCxcImNvbnN0cnVjdG9yXCIpJiZ0LmNvbnN0cnVjdG9yO3JldHVybiByPT09T2JqZWN0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHIpPT09Wn0obil8fEFycmF5LmlzQXJyYXkobil8fCEhbltMXXx8ISFuLmNvbnN0cnVjdG9yW0xdfHxzKG4pfHx2KG4pKX1mdW5jdGlvbiBlKHIpe3JldHVybiB0KHIpfHxuKDIzLHIpLHJbUV0udH1mdW5jdGlvbiBpKG4sdCxyKXt2b2lkIDA9PT1yJiYocj0hMSksMD09PW8obik/KHI/T2JqZWN0LmtleXM6bm4pKG4pLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ImJlwic3ltYm9sXCI9PXR5cGVvZiBlfHx0KGUsbltlXSxuKX0pKTpuLmZvckVhY2goKGZ1bmN0aW9uKHIsZSl7cmV0dXJuIHQoZSxyLG4pfSkpfWZ1bmN0aW9uIG8obil7dmFyIHQ9bltRXTtyZXR1cm4gdD90Lmk+Mz90LmktNDp0Lmk6QXJyYXkuaXNBcnJheShuKT8xOnMobik/Mjp2KG4pPzM6MH1mdW5jdGlvbiB1KG4sdCl7cmV0dXJuIDI9PT1vKG4pP24uaGFzKHQpOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHQpfWZ1bmN0aW9uIGEobix0KXtyZXR1cm4gMj09PW8obik/bi5nZXQodCk6blt0XX1mdW5jdGlvbiBmKG4sdCxyKXt2YXIgZT1vKG4pOzI9PT1lP24uc2V0KHQscik6Mz09PWU/KG4uZGVsZXRlKHQpLG4uYWRkKHIpKTpuW3RdPXJ9ZnVuY3Rpb24gYyhuLHQpe3JldHVybiBuPT09dD8wIT09bnx8MS9uPT0xL3Q6biE9biYmdCE9dH1mdW5jdGlvbiBzKG4pe3JldHVybiBYJiZuIGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHYobil7cmV0dXJuIHEmJm4gaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gcChuKXtyZXR1cm4gbi5vfHxuLnR9ZnVuY3Rpb24gbChuKXtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKTt2YXIgdD10bihuKTtkZWxldGUgdFtRXTtmb3IodmFyIHI9bm4odCksZT0wO2U8ci5sZW5ndGg7ZSsrKXt2YXIgaT1yW2VdLG89dFtpXTshMT09PW8ud3JpdGFibGUmJihvLndyaXRhYmxlPSEwLG8uY29uZmlndXJhYmxlPSEwKSwoby5nZXR8fG8uc2V0KSYmKHRbaV09e2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCxlbnVtZXJhYmxlOm8uZW51bWVyYWJsZSx2YWx1ZTpuW2ldfSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pLHQpfWZ1bmN0aW9uIGQobixlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHkobil8fHQobil8fCFyKG4pP246KG8obik+MSYmKG4uc2V0PW4uYWRkPW4uY2xlYXI9bi5kZWxldGU9aCksT2JqZWN0LmZyZWV6ZShuKSxlJiZpKG4sKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGQodCwhMCl9KSwhMCksbil9ZnVuY3Rpb24gaCgpe24oMil9ZnVuY3Rpb24geShuKXtyZXR1cm4gbnVsbD09bnx8XCJvYmplY3RcIiE9dHlwZW9mIG58fE9iamVjdC5pc0Zyb3plbihuKX1mdW5jdGlvbiBiKHQpe3ZhciByPXJuW3RdO3JldHVybiByfHxuKDE4LHQpLHJ9ZnVuY3Rpb24gbShuLHQpe3JuW25dfHwocm5bbl09dCl9ZnVuY3Rpb24gXygpe3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fFV8fG4oMCksVX1mdW5jdGlvbiBqKG4sdCl7dCYmKGIoXCJQYXRjaGVzXCIpLG4udT1bXSxuLnM9W10sbi52PXQpfWZ1bmN0aW9uIE8obil7ZyhuKSxuLnAuZm9yRWFjaChTKSxuLnA9bnVsbH1mdW5jdGlvbiBnKG4pe249PT1VJiYoVT1uLmwpfWZ1bmN0aW9uIHcobil7cmV0dXJuIFU9e3A6W10sbDpVLGg6bixtOiEwLF86MH19ZnVuY3Rpb24gUyhuKXt2YXIgdD1uW1FdOzA9PT10Lml8fDE9PT10Lmk/dC5qKCk6dC5PPSEwfWZ1bmN0aW9uIFAodCxlKXtlLl89ZS5wLmxlbmd0aDt2YXIgaT1lLnBbMF0sbz12b2lkIDAhPT10JiZ0IT09aTtyZXR1cm4gZS5oLmd8fGIoXCJFUzVcIikuUyhlLHQsbyksbz8oaVtRXS5QJiYoTyhlKSxuKDQpKSxyKHQpJiYodD1NKGUsdCksZS5sfHx4KGUsdCkpLGUudSYmYihcIlBhdGNoZXNcIikuTShpW1FdLHQsZS51LGUucykpOnQ9TShlLGksW10pLE8oZSksZS51JiZlLnYoZS51LGUucyksdCE9PUg/dDp2b2lkIDB9ZnVuY3Rpb24gTShuLHQscil7aWYoeSh0KSlyZXR1cm4gdDt2YXIgZT10W1FdO2lmKCFlKXJldHVybiBpKHQsKGZ1bmN0aW9uKGksbyl7cmV0dXJuIEEobixlLHQsaSxvLHIpfSksITApLHQ7aWYoZS5BIT09bilyZXR1cm4gdDtpZighZS5QKXJldHVybiB4KG4sZS50LCEwKSxlLnQ7aWYoIWUuSSl7ZS5JPSEwLGUuQS5fLS07dmFyIG89ND09PWUuaXx8NT09PWUuaT9lLm89bChlLmspOmUubztpKDM9PT1lLmk/bmV3IFNldChvKTpvLChmdW5jdGlvbih0LGkpe3JldHVybiBBKG4sZSxvLHQsaSxyKX0pKSx4KG4sbywhMSksciYmbi51JiZiKFwiUGF0Y2hlc1wiKS5SKGUscixuLnUsbi5zKX1yZXR1cm4gZS5vfWZ1bmN0aW9uIEEoZSxpLG8sYSxjLHMpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmM9PT1vJiZuKDUpLHQoYykpe3ZhciB2PU0oZSxjLHMmJmkmJjMhPT1pLmkmJiF1KGkuRCxhKT9zLmNvbmNhdChhKTp2b2lkIDApO2lmKGYobyxhLHYpLCF0KHYpKXJldHVybjtlLm09ITF9aWYocihjKSYmIXkoYykpe2lmKCFlLmguRiYmZS5fPDEpcmV0dXJuO00oZSxjKSxpJiZpLkEubHx8eChlLGMpfX1mdW5jdGlvbiB4KG4sdCxyKXt2b2lkIDA9PT1yJiYocj0hMSksbi5oLkYmJm4ubSYmZCh0LHIpfWZ1bmN0aW9uIHoobix0KXt2YXIgcj1uW1FdO3JldHVybihyP3Aocik6bilbdF19ZnVuY3Rpb24gSShuLHQpe2lmKHQgaW4gbilmb3IodmFyIHI9T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO3I7KXt2YXIgZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsdCk7aWYoZSlyZXR1cm4gZTtyPU9iamVjdC5nZXRQcm90b3R5cGVPZihyKX19ZnVuY3Rpb24gayhuKXtuLlB8fChuLlA9ITAsbi5sJiZrKG4ubCkpfWZ1bmN0aW9uIEUobil7bi5vfHwobi5vPWwobi50KSl9ZnVuY3Rpb24gUihuLHQscil7dmFyIGU9cyh0KT9iKFwiTWFwU2V0XCIpLk4odCxyKTp2KHQpP2IoXCJNYXBTZXRcIikuVCh0LHIpOm4uZz9mdW5jdGlvbihuLHQpe3ZhciByPUFycmF5LmlzQXJyYXkobiksZT17aTpyPzE6MCxBOnQ/dC5BOl8oKSxQOiExLEk6ITEsRDp7fSxsOnQsdDpuLGs6bnVsbCxvOm51bGwsajpudWxsLEM6ITF9LGk9ZSxvPWVuO3ImJihpPVtlXSxvPW9uKTt2YXIgdT1Qcm94eS5yZXZvY2FibGUoaSxvKSxhPXUucmV2b2tlLGY9dS5wcm94eTtyZXR1cm4gZS5rPWYsZS5qPWEsZn0odCxyKTpiKFwiRVM1XCIpLkoodCxyKTtyZXR1cm4ocj9yLkE6XygpKS5wLnB1c2goZSksZX1mdW5jdGlvbiBEKGUpe3JldHVybiB0KGUpfHxuKDIyLGUpLGZ1bmN0aW9uIG4odCl7aWYoIXIodCkpcmV0dXJuIHQ7dmFyIGUsdT10W1FdLGM9byh0KTtpZih1KXtpZighdS5QJiYodS5pPDR8fCFiKFwiRVM1XCIpLksodSkpKXJldHVybiB1LnQ7dS5JPSEwLGU9Rih0LGMpLHUuST0hMX1lbHNlIGU9Rih0LGMpO3JldHVybiBpKGUsKGZ1bmN0aW9uKHQscil7dSYmYSh1LnQsdCk9PT1yfHxmKGUsdCxuKHIpKX0pKSwzPT09Yz9uZXcgU2V0KGUpOmV9KGUpfWZ1bmN0aW9uIEYobix0KXtzd2l0Y2godCl7Y2FzZSAyOnJldHVybiBuZXcgTWFwKG4pO2Nhc2UgMzpyZXR1cm4gQXJyYXkuZnJvbShuKX1yZXR1cm4gbChuKX1mdW5jdGlvbiBOKCl7ZnVuY3Rpb24gcihuLHQpe3ZhciByPXNbbl07cmV0dXJuIHI/ci5lbnVtZXJhYmxlPXQ6c1tuXT1yPXtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTp0LGdldDpmdW5jdGlvbigpe3ZhciB0PXRoaXNbUV07cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZih0KSxlbi5nZXQodCxuKX0sc2V0OmZ1bmN0aW9uKHQpe3ZhciByPXRoaXNbUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZihyKSxlbi5zZXQocixuLHQpfX0scn1mdW5jdGlvbiBlKG4pe2Zvcih2YXIgdD1uLmxlbmd0aC0xO3Q+PTA7dC0tKXt2YXIgcj1uW3RdW1FdO2lmKCFyLlApc3dpdGNoKHIuaSl7Y2FzZSA1OmEocikmJmsocik7YnJlYWs7Y2FzZSA0Om8ocikmJmsocil9fX1mdW5jdGlvbiBvKG4pe2Zvcih2YXIgdD1uLnQscj1uLmssZT1ubihyKSxpPWUubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBvPWVbaV07aWYobyE9PVEpe3ZhciBhPXRbb107aWYodm9pZCAwPT09YSYmIXUodCxvKSlyZXR1cm4hMDt2YXIgZj1yW29dLHM9ZiYmZltRXTtpZihzP3MudCE9PWE6IWMoZixhKSlyZXR1cm4hMH19dmFyIHY9ISF0W1FdO3JldHVybiBlLmxlbmd0aCE9PW5uKHQpLmxlbmd0aCsodj8wOjEpfWZ1bmN0aW9uIGEobil7dmFyIHQ9bi5rO2lmKHQubGVuZ3RoIT09bi50Lmxlbmd0aClyZXR1cm4hMDt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsdC5sZW5ndGgtMSk7cmV0dXJuISghcnx8ci5nZXQpfWZ1bmN0aW9uIGYodCl7dC5PJiZuKDMsSlNPTi5zdHJpbmdpZnkocCh0KSkpfXZhciBzPXt9O20oXCJFUzVcIix7SjpmdW5jdGlvbihuLHQpe3ZhciBlPUFycmF5LmlzQXJyYXkobiksaT1mdW5jdGlvbihuLHQpe2lmKG4pe2Zvcih2YXIgZT1BcnJheSh0Lmxlbmd0aCksaT0wO2k8dC5sZW5ndGg7aSsrKU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiXCIraSxyKGksITApKTtyZXR1cm4gZX12YXIgbz10bih0KTtkZWxldGUgb1tRXTtmb3IodmFyIHU9bm4obyksYT0wO2E8dS5sZW5ndGg7YSsrKXt2YXIgZj11W2FdO29bZl09cihmLG58fCEhb1tmXS5lbnVtZXJhYmxlKX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodCksbyl9KGUsbiksbz17aTplPzU6NCxBOnQ/dC5BOl8oKSxQOiExLEk6ITEsRDp7fSxsOnQsdDpuLGs6aSxvOm51bGwsTzohMSxDOiExfTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGksUSx7dmFsdWU6byx3cml0YWJsZTohMH0pLGl9LFM6ZnVuY3Rpb24obixyLG8pe28/dChyKSYmcltRXS5BPT09biYmZShuLnApOihuLnUmJmZ1bmN0aW9uIG4odCl7aWYodCYmXCJvYmplY3RcIj09dHlwZW9mIHQpe3ZhciByPXRbUV07aWYocil7dmFyIGU9ci50LG89ci5rLGY9ci5ELGM9ci5pO2lmKDQ9PT1jKWkobywoZnVuY3Rpb24odCl7dCE9PVEmJih2b2lkIDAhPT1lW3RdfHx1KGUsdCk/Zlt0XXx8bihvW3RdKTooZlt0XT0hMCxrKHIpKSl9KSksaShlLChmdW5jdGlvbihuKXt2b2lkIDAhPT1vW25dfHx1KG8sbil8fChmW25dPSExLGsocikpfSkpO2Vsc2UgaWYoNT09PWMpe2lmKGEocikmJihrKHIpLGYubGVuZ3RoPSEwKSxvLmxlbmd0aDxlLmxlbmd0aClmb3IodmFyIHM9by5sZW5ndGg7czxlLmxlbmd0aDtzKyspZltzXT0hMTtlbHNlIGZvcih2YXIgdj1lLmxlbmd0aDt2PG8ubGVuZ3RoO3YrKylmW3ZdPSEwO2Zvcih2YXIgcD1NYXRoLm1pbihvLmxlbmd0aCxlLmxlbmd0aCksbD0wO2w8cDtsKyspdm9pZCAwPT09ZltsXSYmbihvW2xdKX19fX0obi5wWzBdKSxlKG4ucCkpfSxLOmZ1bmN0aW9uKG4pe3JldHVybiA0PT09bi5pP28obik6YShuKX19KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gZShuKXtpZighcihuKSlyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChlKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0sZShuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAoZSkpO3ZhciB0PU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGkgaW4gbil0W2ldPWUobltpXSk7cmV0dXJuIHUobixMKSYmKHRbTF09bltMXSksdH1mdW5jdGlvbiBmKG4pe3JldHVybiB0KG4pP2Uobik6bn12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24odCxyKXtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbihyKXtmb3IodmFyIGk9ci5wYXRoLHU9ci5vcCxmPXQscz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1pW3NdOzAhPT12JiYxIT09dnx8XCJfX3Byb3RvX19cIiE9PXAmJlwiY29uc3RydWN0b3JcIiE9PXB8fG4oMjQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGYmJlwicHJvdG90eXBlXCI9PT1wJiZuKDI0KSxcIm9iamVjdFwiIT10eXBlb2YoZj1hKGYscCkpJiZuKDE1LGkuam9pbihcIi9cIikpfXZhciBsPW8oZiksZD1lKHIudmFsdWUpLGg9aVtpLmxlbmd0aC0xXTtzd2l0Y2godSl7Y2FzZVwicmVwbGFjZVwiOnN3aXRjaChsKXtjYXNlIDI6cmV0dXJuIGYuc2V0KGgsZCk7Y2FzZSAzOm4oMTYpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlIGM6c3dpdGNoKGwpe2Nhc2UgMTpyZXR1cm4gZi5zcGxpY2UoaCwwLGQpO2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6cmV0dXJuIGYuYWRkKGQpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlXCJyZW1vdmVcIjpzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBmLnNwbGljZShoLDEpO2Nhc2UgMjpyZXR1cm4gZi5kZWxldGUoaCk7Y2FzZSAzOnJldHVybiBmLmRlbGV0ZShyLnZhbHVlKTtkZWZhdWx0OnJldHVybiBkZWxldGUgZltoXX1kZWZhdWx0Om4oMTcsdSl9fSkpLHR9LFI6ZnVuY3Rpb24obix0LHIsZSl7c3dpdGNoKG4uaSl7Y2FzZSAwOmNhc2UgNDpjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKG4sdCxyLGUpe3ZhciBvPW4udCxzPW4ubztpKG4uRCwoZnVuY3Rpb24obixpKXt2YXIgdj1hKG8sbikscD1hKHMsbiksbD1pP3UobyxuKT9cInJlcGxhY2VcIjpjOlwicmVtb3ZlXCI7aWYodiE9PXB8fFwicmVwbGFjZVwiIT09bCl7dmFyIGQ9dC5jb25jYXQobik7ci5wdXNoKFwicmVtb3ZlXCI9PT1sP3tvcDpsLHBhdGg6ZH06e29wOmwscGF0aDpkLHZhbHVlOnB9KSxlLnB1c2gobD09PWM/e29wOlwicmVtb3ZlXCIscGF0aDpkfTpcInJlbW92ZVwiPT09bD97b3A6YyxwYXRoOmQsdmFsdWU6Zih2KX06e29wOlwicmVwbGFjZVwiLHBhdGg6ZCx2YWx1ZTpmKHYpfSl9fSkpfShuLHQscixlKTtjYXNlIDU6Y2FzZSAxOnJldHVybiBmdW5jdGlvbihuLHQscixlKXt2YXIgaT1uLnQsbz1uLkQsdT1uLm87aWYodS5sZW5ndGg8aS5sZW5ndGgpe3ZhciBhPVt1LGldO2k9YVswXSx1PWFbMV07dmFyIHM9W2Uscl07cj1zWzBdLGU9c1sxXX1mb3IodmFyIHY9MDt2PGkubGVuZ3RoO3YrKylpZihvW3ZdJiZ1W3ZdIT09aVt2XSl7dmFyIHA9dC5jb25jYXQoW3ZdKTtyLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKHVbdl0pfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnAsdmFsdWU6ZihpW3ZdKX0pfWZvcih2YXIgbD1pLmxlbmd0aDtsPHUubGVuZ3RoO2wrKyl7dmFyIGQ9dC5jb25jYXQoW2xdKTtyLnB1c2goe29wOmMscGF0aDpkLHZhbHVlOmYodVtsXSl9KX1pLmxlbmd0aDx1Lmxlbmd0aCYmZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnQuY29uY2F0KFtcImxlbmd0aFwiXSksdmFsdWU6aS5sZW5ndGh9KX0obix0LHIsZSk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbihuLHQscixlKXt2YXIgaT1uLnQsbz1uLm8sdT0wO2kuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoIW8uaGFzKG4pKXt2YXIgaT10LmNvbmNhdChbdV0pO3IucHVzaCh7b3A6XCJyZW1vdmVcIixwYXRoOmksdmFsdWU6bn0pLGUudW5zaGlmdCh7b3A6YyxwYXRoOmksdmFsdWU6bn0pfXUrK30pKSx1PTAsby5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighaS5oYXMobikpe3ZhciBvPXQuY29uY2F0KFt1XSk7ci5wdXNoKHtvcDpjLHBhdGg6byx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpcInJlbW92ZVwiLHBhdGg6byx2YWx1ZTpufSl9dSsrfSkpfShuLHQscixlKX19LE06ZnVuY3Rpb24obix0LHIsZSl7ci5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOnR9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6bi50fSl9fSl9ZnVuY3Rpb24gQygpe2Z1bmN0aW9uIHQobix0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1ufWEobix0KSxuLnByb3RvdHlwZT0oci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfWZ1bmN0aW9uIGUobil7bi5vfHwobi5EPW5ldyBNYXAsbi5vPW5ldyBNYXAobi50KSl9ZnVuY3Rpb24gbyhuKXtuLm98fChuLm89bmV3IFNldCxuLnQuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYocih0KSl7dmFyIGU9UihuLkEuaCx0LG4pO24ucC5zZXQodCxlKSxuLm8uYWRkKGUpfWVsc2Ugbi5vLmFkZCh0KX0pKSl9ZnVuY3Rpb24gdSh0KXt0Lk8mJm4oMyxKU09OLnN0cmluZ2lmeShwKHQpKSl9dmFyIGE9ZnVuY3Rpb24obix0KXtyZXR1cm4oYT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24obix0KXtuLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24obix0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYobltyXT10W3JdKX0pKG4sdCl9LGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4sdCl7cmV0dXJuIHRoaXNbUV09e2k6MixsOnQsQTp0P3QuQTpfKCksUDohMSxJOiExLG86dm9pZCAwLEQ6dm9pZCAwLHQ6bixrOnRoaXMsQzohMSxPOiExfSx0aGlzfXQobixNYXApO3ZhciBvPW4ucHJvdG90eXBlO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpc1tRXSkuc2l6ZX19KSxvLmhhcz1mdW5jdGlvbihuKXtyZXR1cm4gcCh0aGlzW1FdKS5oYXMobil9LG8uc2V0PWZ1bmN0aW9uKG4sdCl7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxwKHIpLmhhcyhuKSYmcChyKS5nZXQobik9PT10fHwoZShyKSxrKHIpLHIuRC5zZXQobiwhMCksci5vLnNldChuLHQpLHIuRC5zZXQobiwhMCkpLHRoaXN9LG8uZGVsZXRlPWZ1bmN0aW9uKG4pe2lmKCF0aGlzLmhhcyhuKSlyZXR1cm4hMTt2YXIgdD10aGlzW1FdO3JldHVybiB1KHQpLGUodCksayh0KSx0LkQuc2V0KG4sITEpLHQuby5kZWxldGUobiksITB9LG8uY2xlYXI9ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3UobikscChuKS5zaXplJiYoZShuKSxrKG4pLG4uRD1uZXcgTWFwLGkobi50LChmdW5jdGlvbih0KXtuLkQuc2V0KHQsITEpfSkpLG4uby5jbGVhcigpKX0sby5mb3JFYWNoPWZ1bmN0aW9uKG4sdCl7dmFyIHI9dGhpcztwKHRoaXNbUV0pLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7bi5jYWxsKHQsci5nZXQoaSksaSxyKX0pKX0sby5nZXQ9ZnVuY3Rpb24obil7dmFyIHQ9dGhpc1tRXTt1KHQpO3ZhciBpPXAodCkuZ2V0KG4pO2lmKHQuSXx8IXIoaSkpcmV0dXJuIGk7aWYoaSE9PXQudC5nZXQobikpcmV0dXJuIGk7dmFyIG89Uih0LkEuaCxpLHQpO3JldHVybiBlKHQpLHQuby5zZXQobixvKSxvfSxvLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5rZXlzKCl9LG8udmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG4sdD10aGlzLHI9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHQudmFsdWVzKCl9LG4ubmV4dD1mdW5jdGlvbigpe3ZhciBuPXIubmV4dCgpO3JldHVybiBuLmRvbmU/bjp7ZG9uZTohMSx2YWx1ZTp0LmdldChuLnZhbHVlKX19LG59LG8uZW50cmllcz1mdW5jdGlvbigpe3ZhciBuLHQ9dGhpcyxyPXRoaXMua2V5cygpO3JldHVybihuPXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiB0LmVudHJpZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49ci5uZXh0KCk7aWYobi5kb25lKXJldHVybiBuO3ZhciBlPXQuZ2V0KG4udmFsdWUpO3JldHVybntkb25lOiExLHZhbHVlOltuLnZhbHVlLGVdfX0sbn0sb1tWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudHJpZXMoKX0sbn0oKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHQpe3JldHVybiB0aGlzW1FdPXtpOjMsbDp0LEE6dD90LkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCx0Om4sazp0aGlzLHA6bmV3IE1hcCxPOiExLEM6ITF9LHRoaXN9dChuLFNldCk7dmFyIHI9bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLHIuaGFzPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksdC5vPyEhdC5vLmhhcyhuKXx8ISghdC5wLmhhcyhuKXx8IXQuby5oYXModC5wLmdldChuKSkpOnQudC5oYXMobil9LHIuYWRkPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksdGhpcy5oYXMobil8fChvKHQpLGsodCksdC5vLmFkZChuKSksdGhpc30sci5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksbyh0KSxrKHQpLHQuby5kZWxldGUobil8fCEhdC5wLmhhcyhuKSYmdC5vLmRlbGV0ZSh0LnAuZ2V0KG4pKX0sci5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihvKG4pLGsobiksbi5vLmNsZWFyKCkpfSxyLnZhbHVlcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8udmFsdWVzKCl9LHIuZW50cmllcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8uZW50cmllcygpfSxyLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0scltWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSxyLmZvckVhY2g9ZnVuY3Rpb24obix0KXtmb3IodmFyIHI9dGhpcy52YWx1ZXMoKSxlPXIubmV4dCgpOyFlLmRvbmU7KW4uY2FsbCh0LGUudmFsdWUsZS52YWx1ZSx0aGlzKSxlPXIubmV4dCgpfSxufSgpO20oXCJNYXBTZXRcIix7TjpmdW5jdGlvbihuLHQpe3JldHVybiBuZXcgZihuLHQpfSxUOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIG5ldyBjKG4sdCl9fSl9ZnVuY3Rpb24gSigpe04oKSxDKCksVCgpfWZ1bmN0aW9uIEsobil7cmV0dXJuIG59ZnVuY3Rpb24gJChuKXtyZXR1cm4gbn12YXIgRyxVLFc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcInhcIiksWD1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwLHE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCxCPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm94eSYmdm9pZCAwIT09UHJveHkucmV2b2NhYmxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCxIPVc/U3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIik6KChHPXt9KVtcImltbWVyLW5vdGhpbmdcIl09ITAsRyksTD1XP1N5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik6XCJfXyRpbW1lcl9kcmFmdGFibGVcIixRPVc/U3ltYm9sLmZvcihcImltbWVyLXN0YXRlXCIpOlwiX18kaW1tZXJfc3RhdGVcIixWPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsWT17MDpcIklsbGVnYWwgc3RhdGVcIiwxOlwiSW1tZXIgZHJhZnRzIGNhbm5vdCBoYXZlIGNvbXB1dGVkIHByb3BlcnRpZXNcIiwyOlwiVGhpcyBvYmplY3QgaGFzIGJlZW4gZnJvemVuIGFuZCBzaG91bGQgbm90IGJlIG11dGF0ZWRcIiwzOmZ1bmN0aW9uKG4pe3JldHVyblwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIitufSw0OlwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIiw1OlwiSW1tZXIgZm9yYmlkcyBjaXJjdWxhciByZWZlcmVuY2VzXCIsNjpcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLDc6XCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIiw4OlwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiLDk6XCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsMTA6XCJUaGUgZ2l2ZW4gZHJhZnQgaXMgYWxyZWFkeSBmaW5hbGl6ZWRcIiwxMTpcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTI6XCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEzOlwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIsMTQ6XCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIsMTU6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIitufSwxNjonU2V0cyBjYW5ub3QgaGF2ZSBcInJlcGxhY2VcIiBwYXRjaGVzLicsMTc6ZnVuY3Rpb24obil7cmV0dXJuXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiK259LDE4OmZ1bmN0aW9uKG4pe3JldHVyblwiVGhlIHBsdWdpbiBmb3IgJ1wiK24rXCInIGhhcyBub3QgYmVlbiBsb2FkZWQgaW50byBJbW1lci4gVG8gZW5hYmxlIHRoZSBwbHVnaW4sIGltcG9ydCBhbmQgY2FsbCBgZW5hYmxlXCIrbitcIigpYCB3aGVuIGluaXRpYWxpemluZyB5b3VyIGFwcGxpY2F0aW9uLlwifSwyMDpcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIiwyMTpmdW5jdGlvbihuKXtyZXR1cm5cInByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJ1wiK24rXCInXCJ9LDIyOmZ1bmN0aW9uKG4pe3JldHVyblwiJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIitufSwyMzpmdW5jdGlvbihuKXtyZXR1cm5cIidvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDI0OlwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwifSxaPVwiXCIrT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcixubj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5vd25LZXlzP1JlZmxlY3Qub3duS2V5czp2b2lkIDAhPT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKG4pe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuKSl9Ok9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLHRuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzfHxmdW5jdGlvbihuKXt2YXIgdD17fTtyZXR1cm4gbm4obikuZm9yRWFjaCgoZnVuY3Rpb24ocil7dFtyXT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4scil9KSksdH0scm49e30sZW49e2dldDpmdW5jdGlvbihuLHQpe2lmKHQ9PT1RKXJldHVybiBuO3ZhciBlPXAobik7aWYoIXUoZSx0KSlyZXR1cm4gZnVuY3Rpb24obix0LHIpe3ZhciBlLGk9SSh0LHIpO3JldHVybiBpP1widmFsdWVcImluIGk/aS52YWx1ZTpudWxsPT09KGU9aS5nZXQpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNhbGwobi5rKTp2b2lkIDB9KG4sZSx0KTt2YXIgaT1lW3RdO3JldHVybiBuLkl8fCFyKGkpP2k6aT09PXoobi50LHQpPyhFKG4pLG4ub1t0XT1SKG4uQS5oLGksbikpOml9LGhhczpmdW5jdGlvbihuLHQpe3JldHVybiB0IGluIHAobil9LG93bktleXM6ZnVuY3Rpb24obil7cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwKG4pKX0sc2V0OmZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1JKHAobiksdCk7aWYobnVsbD09ZT92b2lkIDA6ZS5zZXQpcmV0dXJuIGUuc2V0LmNhbGwobi5rLHIpLCEwO2lmKCFuLlApe3ZhciBpPXoocChuKSx0KSxvPW51bGw9PWk/dm9pZCAwOmlbUV07aWYobyYmby50PT09cilyZXR1cm4gbi5vW3RdPXIsbi5EW3RdPSExLCEwO2lmKGMocixpKSYmKHZvaWQgMCE9PXJ8fHUobi50LHQpKSlyZXR1cm4hMDtFKG4pLGsobil9cmV0dXJuIG4ub1t0XT09PXImJlwibnVtYmVyXCIhPXR5cGVvZiByfHwobi5vW3RdPXIsbi5EW3RdPSEwLCEwKX0sZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24obix0KXtyZXR1cm4gdm9pZCAwIT09eihuLnQsdCl8fHQgaW4gbi50PyhuLkRbdF09ITEsRShuKSxrKG4pKTpkZWxldGUgbi5EW3RdLG4ubyYmZGVsZXRlIG4ub1t0XSwhMH0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKG4sdCl7dmFyIHI9cChuKSxlPVJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsdCk7cmV0dXJuIGU/e3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZToxIT09bi5pfHxcImxlbmd0aFwiIT09dCxlbnVtZXJhYmxlOmUuZW51bWVyYWJsZSx2YWx1ZTpyW3RdfTplfSxkZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbigpe24oMTEpfSxnZXRQcm90b3R5cGVPZjpmdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG4udCl9LHNldFByb3RvdHlwZU9mOmZ1bmN0aW9uKCl7bigxMil9fSxvbj17fTtpKGVuLChmdW5jdGlvbihuLHQpe29uW25dPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1hcmd1bWVudHNbMF1bMF0sdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkpLG9uLmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKHQscil7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaXNOYU4ocGFyc2VJbnQocikpJiZuKDEzKSxlbi5kZWxldGVQcm9wZXJ0eS5jYWxsKHRoaXMsdFswXSxyKX0sb24uc2V0PWZ1bmN0aW9uKHQscixlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImxlbmd0aFwiIT09ciYmaXNOYU4ocGFyc2VJbnQocikpJiZuKDE0KSxlbi5zZXQuY2FsbCh0aGlzLHRbMF0scixlLHRbMF0pfTt2YXIgdW49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBlPXRoaXM7dGhpcy5nPUIsdGhpcy5GPSEwLHRoaXMucHJvZHVjZT1mdW5jdGlvbih0LGksbyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSl7dmFyIHU9aTtpPXQ7dmFyIGE9ZTtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHQ9dGhpczt2b2lkIDA9PT1uJiYobj11KTtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHI+MT9yLTE6MCksbz0xO288cjtvKyspZVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gYS5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3ZhciByO3JldHVybihyPWkpLmNhbGwuYXBwbHkocixbdCxuXS5jb25jYXQoZSkpfSkpfX12YXIgZjtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpJiZuKDYpLHZvaWQgMCE9PW8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8mJm4oNykscih0KSl7dmFyIGM9dyhlKSxzPVIoZSx0LHZvaWQgMCksdj0hMDt0cnl7Zj1pKHMpLHY9ITF9ZmluYWxseXt2P08oYyk6ZyhjKX1yZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmZiBpbnN0YW5jZW9mIFByb21pc2U/Zi50aGVuKChmdW5jdGlvbihuKXtyZXR1cm4gaihjLG8pLFAobixjKX0pLChmdW5jdGlvbihuKXt0aHJvdyBPKGMpLG59KSk6KGooYyxvKSxQKGYsYykpfWlmKCF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCl7aWYoKGY9aSh0KSk9PT1IKXJldHVybjtyZXR1cm4gdm9pZCAwPT09ZiYmKGY9dCksZS5GJiZkKGYsITApLGZ9bigyMSx0KX0sdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXM9ZnVuY3Rpb24obix0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuP2Z1bmN0aW9uKHQpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLGk9QXJyYXkocj4xP3ItMTowKSxvPTE7bzxyO28rKylpW28tMV09YXJndW1lbnRzW29dO3JldHVybiBlLnByb2R1Y2VXaXRoUGF0Y2hlcyh0LChmdW5jdGlvbih0KXtyZXR1cm4gbi5hcHBseSh2b2lkIDAsW3RdLmNvbmNhdChpKSl9KSl9OltlLnByb2R1Y2Uobix0LChmdW5jdGlvbihuLHQpe3I9bixpPXR9KSkscixpXTt2YXIgcixpfSxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXQ/dm9pZCAwOnQudXNlUHJveGllcykmJnRoaXMuc2V0VXNlUHJveGllcyh0LnVzZVByb3hpZXMpLFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09dD92b2lkIDA6dC5hdXRvRnJlZXplKSYmdGhpcy5zZXRBdXRvRnJlZXplKHQuYXV0b0ZyZWV6ZSl9dmFyIGk9ZS5wcm90b3R5cGU7cmV0dXJuIGkuY3JlYXRlRHJhZnQ9ZnVuY3Rpb24oZSl7cihlKXx8big4KSx0KGUpJiYoZT1EKGUpKTt2YXIgaT13KHRoaXMpLG89Uih0aGlzLGUsdm9pZCAwKTtyZXR1cm4gb1tRXS5DPSEwLGcoaSksb30saS5maW5pc2hEcmFmdD1mdW5jdGlvbih0LHIpe3ZhciBlPXQmJnRbUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKGUmJmUuQ3x8big5KSxlLkkmJm4oMTApKTt2YXIgaT1lLkE7cmV0dXJuIGooaSxyKSxQKHZvaWQgMCxpKX0saS5zZXRBdXRvRnJlZXplPWZ1bmN0aW9uKG4pe3RoaXMuRj1ufSxpLnNldFVzZVByb3hpZXM9ZnVuY3Rpb24odCl7dCYmIUImJm4oMjApLHRoaXMuZz10fSxpLmFwcGx5UGF0Y2hlcz1mdW5jdGlvbihuLHIpe3ZhciBlO2ZvcihlPXIubGVuZ3RoLTE7ZT49MDtlLS0pe3ZhciBpPXJbZV07aWYoMD09PWkucGF0aC5sZW5ndGgmJlwicmVwbGFjZVwiPT09aS5vcCl7bj1pLnZhbHVlO2JyZWFrfX12YXIgbz1iKFwiUGF0Y2hlc1wiKS4kO3JldHVybiB0KG4pP28obixyKTp0aGlzLnByb2R1Y2UobiwoZnVuY3Rpb24obil7cmV0dXJuIG8obixyLnNsaWNlKGUrMSkpfSkpfSxlfSgpLGFuPW5ldyB1bixmbj1hbi5wcm9kdWNlLGNuPWFuLnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKGFuKSxzbj1hbi5zZXRBdXRvRnJlZXplLmJpbmQoYW4pLHZuPWFuLnNldFVzZVByb3hpZXMuYmluZChhbikscG49YW4uYXBwbHlQYXRjaGVzLmJpbmQoYW4pLGxuPWFuLmNyZWF0ZURyYWZ0LmJpbmQoYW4pLGRuPWFuLmZpbmlzaERyYWZ0LmJpbmQoYW4pO2V4cG9ydCBkZWZhdWx0IGZuO2V4cG9ydHt1biBhcyBJbW1lcixwbiBhcyBhcHBseVBhdGNoZXMsSyBhcyBjYXN0RHJhZnQsJCBhcyBjYXN0SW1tdXRhYmxlLGxuIGFzIGNyZWF0ZURyYWZ0LEQgYXMgY3VycmVudCxKIGFzIGVuYWJsZUFsbFBsdWdpbnMsTiBhcyBlbmFibGVFUzUsQyBhcyBlbmFibGVNYXBTZXQsVCBhcyBlbmFibGVQYXRjaGVzLGRuIGFzIGZpbmlzaERyYWZ0LGQgYXMgZnJlZXplLEwgYXMgaW1tZXJhYmxlLHQgYXMgaXNEcmFmdCxyIGFzIGlzRHJhZnRhYmxlLEggYXMgbm90aGluZyxlIGFzIG9yaWdpbmFsLGZuIGFzIHByb2R1Y2UsY24gYXMgcHJvZHVjZVdpdGhQYXRjaGVzLHNuIGFzIHNldEF1dG9GcmVlemUsdm4gYXMgc2V0VXNlUHJveGllc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbW1lci5lc20uanMubWFwXG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn07XHJcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XHJcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xyXG52YXIgX19kZWZOb3JtYWxQcm9wID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkgeyByZXR1cm4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlOyB9O1xyXG52YXIgX19vYmpTcHJlYWQgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxyXG4gICAgICAgIGlmIChfX2hhc093blByb3AuY2FsbChiLCBwcm9wKSlcclxuICAgICAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xyXG4gICAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMpXHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IF9fZ2V0T3duUHJvcFN5bWJvbHMoYik7IF9pIDwgX2IubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9wID0gX2JbX2ldO1xyXG4gICAgICAgICAgICBpZiAoX19wcm9wSXNFbnVtLmNhbGwoYiwgcHJvcCkpXHJcbiAgICAgICAgICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbnZhciBfX2FzeW5jID0gZnVuY3Rpb24gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICB2YXIgZnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBzdGVwID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfTtcclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuLy8gc3JjL2luZGV4LnRzXHJcbmV4cG9ydCAqIGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBkZWZhdWx0IGFzIGRlZmF1bHQyLCBjdXJyZW50IGFzIGN1cnJlbnQyLCBmcmVlemUsIG9yaWdpbmFsLCBpc0RyYWZ0IGFzIGlzRHJhZnQ0IH0gZnJvbSBcImltbWVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIGFzIGNyZWF0ZVNlbGVjdG9yMiB9IGZyb20gXCJyZXNlbGVjdFwiO1xyXG4vLyBzcmMvY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IudHNcclxuaW1wb3J0IHsgY3VycmVudCwgaXNEcmFmdCB9IGZyb20gXCJpbW1lclwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gXCJyZXNlbGVjdFwiO1xyXG52YXIgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICB2YXIgc2VsZWN0b3IgPSBjcmVhdGVTZWxlY3Rvci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgdmFyIHdyYXBwZWRTZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhciByZXN0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgcmVzdFtfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaXNEcmFmdCh2YWx1ZSkgPyBjdXJyZW50KHZhbHVlKSA6IHZhbHVlXSwgcmVzdCkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiB3cmFwcGVkU2VsZWN0b3I7XHJcbn07XHJcbi8vIHNyYy9jb25maWd1cmVTdG9yZS50c1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tcG9zZSBhcyBjb21wb3NlMiwgYXBwbHlNaWRkbGV3YXJlLCBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcclxuLy8gc3JjL2RldnRvb2xzRXh0ZW5zaW9uLnRzXHJcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tIFwicmVkdXhcIjtcclxudmFyIGNvbXBvc2VXaXRoRGV2VG9vbHMgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcclxuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHJldHVybiBjb21wb3NlO1xyXG4gICAgcmV0dXJuIGNvbXBvc2UuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxufTtcclxudmFyIGRldlRvb2xzRW5oYW5jZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vb3ApIHtcclxuICAgICAgICByZXR1cm4gbm9vcDtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9pc1BsYWluT2JqZWN0LnRzXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIHByb3RvID0gdmFsdWU7XHJcbiAgICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xyXG4gICAgICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBwcm90bztcclxufVxyXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcclxuaW1wb3J0IHRodW5rTWlkZGxld2FyZSBmcm9tIFwicmVkdXgtdGh1bmtcIjtcclxuLy8gc3JjL3V0aWxzLnRzXHJcbmZ1bmN0aW9uIGdldFRpbWVNZWFzdXJlVXRpbHMobWF4RGVsYXksIGZuTmFtZSkge1xyXG4gICAgdmFyIGVsYXBzZWQgPSAwO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtZWFzdXJlVGltZTogZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGFydGVkID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbmlzaGVkID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgIGVsYXBzZWQgKz0gZmluaXNoZWQgLSBzdGFydGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB3YXJuSWZFeGNlZWRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoZWxhcHNlZCA+IG1heERlbGF5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZm5OYW1lICsgXCIgdG9vayBcIiArIGVsYXBzZWQgKyBcIm1zLCB3aGljaCBpcyBtb3JlIHRoYW4gdGhlIHdhcm5pbmcgdGhyZXNob2xkIG9mIFwiICsgbWF4RGVsYXkgKyBcIm1zLiBcXG5JZiB5b3VyIHN0YXRlIG9yIGFjdGlvbnMgYXJlIHZlcnkgbGFyZ2UsIHlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoZSBtaWRkbGV3YXJlIGFzIGl0IG1pZ2h0IGNhdXNlIHRvbyBtdWNoIG9mIGEgc2xvd2Rvd24gaW4gZGV2ZWxvcG1lbnQgbW9kZS4gU2VlIGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2dldERlZmF1bHRNaWRkbGV3YXJlIGZvciBpbnN0cnVjdGlvbnMuXFxuSXQgaXMgZGlzYWJsZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMsIHNvIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoYXQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG52YXIgTWlkZGxld2FyZUFycmF5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE1pZGRsZXdhcmVBcnJheSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE1pZGRsZXdhcmVBcnJheSgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3MpIHx8IHRoaXM7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKF90aGlzLCBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWlkZGxld2FyZUFycmF5LCBTeW1ib2wuc3BlY2llcywge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWlkZGxld2FyZUFycmF5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcnIgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcnJbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29uY2F0LmFwcGx5KHRoaXMsIGFycik7XHJcbiAgICB9O1xyXG4gICAgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcnIgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcnJbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShhcnJbMF0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgKE1pZGRsZXdhcmVBcnJheS5iaW5kLmFwcGx5KE1pZGRsZXdhcmVBcnJheSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgYXJyWzBdLmNvbmNhdCh0aGlzKSkpKSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IChNaWRkbGV3YXJlQXJyYXkuYmluZC5hcHBseShNaWRkbGV3YXJlQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyci5jb25jYXQodGhpcykpKSkoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTWlkZGxld2FyZUFycmF5O1xyXG59KEFycmF5KSk7XHJcbi8vIHNyYy9pbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHNcclxudmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIjtcclxudmFyIHByZWZpeCA9IFwiSW52YXJpYW50IGZhaWxlZFwiO1xyXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XHJcbiAgICBpZiAoY29uZGl0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8IFwiXCIpKTtcclxufVxyXG5mdW5jdGlvbiBzdHJpbmdpZnkob2JqLCBzZXJpYWxpemVyLCBpbmRlbnQsIGRlY3ljbGVyKSB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpLCBpbmRlbnQpO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNlcmlhbGl6ZShzZXJpYWxpemVyLCBkZWN5Y2xlcikge1xyXG4gICAgdmFyIHN0YWNrID0gW10sIGtleXMgPSBbXTtcclxuICAgIGlmICghZGVjeWNsZXIpXHJcbiAgICAgICAgZGVjeWNsZXIgPSBmdW5jdGlvbiAoXywgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHN0YWNrWzBdID09PSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIltDaXJjdWxhciB+XVwiO1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfi5cIiArIGtleXMuc2xpY2UoMCwgc3RhY2suaW5kZXhPZih2YWx1ZSkpLmpvaW4oXCIuXCIpICsgXCJdXCI7XHJcbiAgICAgICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGlzUG9zID0gc3RhY2suaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgfnRoaXNQb3MgPyBzdGFjay5zcGxpY2UodGhpc1BvcyArIDEpIDogc3RhY2sucHVzaCh0aGlzKTtcclxuICAgICAgICAgICAgfnRoaXNQb3MgPyBrZXlzLnNwbGljZSh0aGlzUG9zLCBJbmZpbml0eSwga2V5KSA6IGtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICBpZiAofnN0YWNrLmluZGV4T2YodmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWN5Y2xlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHN0YWNrLnB1c2godmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBzZXJpYWxpemVyID09IG51bGwgPyB2YWx1ZSA6IHNlcmlhbGl6ZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNJbW11dGFibGVEZWZhdWx0KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBPYmplY3QuaXNGcm96ZW4odmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrRm9yTXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKSB7XHJcbiAgICB2YXIgdHJhY2tlZFByb3BlcnRpZXMgPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkZXRlY3RNdXRhdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0aWVzLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqLCBwYXRoKSB7XHJcbiAgICBpZiAoaWdub3JlUGF0aHMgPT09IHZvaWQgMCkgeyBpZ25vcmVQYXRocyA9IFtdOyB9XHJcbiAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSBcIlwiOyB9XHJcbiAgICB2YXIgdHJhY2tlZCA9IHsgdmFsdWU6IG9iaiB9O1xyXG4gICAgaWYgKCFpc0ltbXV0YWJsZShvYmopKSB7XHJcbiAgICAgICAgdHJhY2tlZC5jaGlsZHJlbiA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGgpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJhY2tlZC5jaGlsZHJlbltrZXldID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqW2tleV0sIGNoaWxkUGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyYWNrZWQ7XHJcbn1cclxuZnVuY3Rpb24gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnR5LCBvYmosIHNhbWVQYXJlbnRSZWYsIHBhdGgpIHtcclxuICAgIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZVBhdGhzID0gW107IH1cclxuICAgIGlmIChzYW1lUGFyZW50UmVmID09PSB2b2lkIDApIHsgc2FtZVBhcmVudFJlZiA9IGZhbHNlOyB9XHJcbiAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSBcIlwiOyB9XHJcbiAgICB2YXIgcHJldk9iaiA9IHRyYWNrZWRQcm9wZXJ0eSA/IHRyYWNrZWRQcm9wZXJ0eS52YWx1ZSA6IHZvaWQgMDtcclxuICAgIHZhciBzYW1lUmVmID0gcHJldk9iaiA9PT0gb2JqO1xyXG4gICAgaWYgKHNhbWVQYXJlbnRSZWYgJiYgIXNhbWVSZWYgJiYgIU51bWJlci5pc05hTihvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogdHJ1ZSwgcGF0aDogcGF0aCB9O1xyXG4gICAgfVxyXG4gICAgaWYgKGlzSW1tdXRhYmxlKHByZXZPYmopIHx8IGlzSW1tdXRhYmxlKG9iaikpIHtcclxuICAgICAgICByZXR1cm4geyB3YXNNdXRhdGVkOiBmYWxzZSB9O1xyXG4gICAgfVxyXG4gICAgdmFyIGtleXNUb0RldGVjdCA9IHt9O1xyXG4gICAgZm9yICh2YXIga2V5IGluIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbikge1xyXG4gICAgICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBrZXkgaW4ga2V5c1RvRGV0ZWN0KSB7XHJcbiAgICAgICAgdmFyIGNoaWxkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0ID0gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuW2tleV0sIG9ialtrZXldLCBzYW1lUmVmLCBjaGlsZFBhdGgpO1xyXG4gICAgICAgIGlmIChyZXN1bHQud2FzTXV0YXRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IGZhbHNlIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBuZXh0KGFjdGlvbik7IH07IH07IH07XHJcbiAgICB9XHJcbiAgICB2YXIgX2IgPSBvcHRpb25zLmlzSW1tdXRhYmxlLCBpc0ltbXV0YWJsZSA9IF9iID09PSB2b2lkIDAgPyBpc0ltbXV0YWJsZURlZmF1bHQgOiBfYiwgaWdub3JlZFBhdGhzID0gb3B0aW9ucy5pZ25vcmVkUGF0aHMsIF9jID0gb3B0aW9ucy53YXJuQWZ0ZXIsIHdhcm5BZnRlciA9IF9jID09PSB2b2lkIDAgPyAzMiA6IF9jLCBpZ25vcmUgPSBvcHRpb25zLmlnbm9yZTtcclxuICAgIGlnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocyB8fCBpZ25vcmU7XHJcbiAgICB2YXIgdHJhY2sgPSB0cmFja0Zvck11dGF0aW9ucy5iaW5kKG51bGwsIGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgIHZhciBnZXRTdGF0ZSA9IF9iLmdldFN0YXRlO1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcbiAgICAgICAgdmFyIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCBcIkltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZVwiKTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgaW52YXJpYW50KCFyZXN1bHQud2FzTXV0YXRlZCwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBiZXR3ZWVuIGRpc3BhdGNoZXMsIGluIHRoZSBwYXRoICdcIiArIChyZXN1bHQucGF0aCB8fCBcIlwiKSArIFwiJy4gIFRoaXMgbWF5IGNhdXNlIGluY29ycmVjdCBiZWhhdmlvci4gKGh0dHBzOi8vcmVkdXguanMub3JnL3N0eWxlLWd1aWRlL3N0eWxlLWd1aWRlI2RvLW5vdC1tdXRhdGUtc3RhdGUpXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIGRpc3BhdGNoZWRBY3Rpb24gPSBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC53YXNNdXRhdGVkICYmIGludmFyaWFudCghcmVzdWx0Lndhc011dGF0ZWQsIFwiQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgaW5zaWRlIGEgZGlzcGF0Y2gsIGluIHRoZSBwYXRoOiBcIiArIChyZXN1bHQucGF0aCB8fCBcIlwiKSArIFwiLiBUYWtlIGEgbG9vayBhdCB0aGUgcmVkdWNlcihzKSBoYW5kbGluZyB0aGUgYWN0aW9uIFwiICsgc3RyaW5naWZ5KGFjdGlvbikgKyBcIi4gKGh0dHBzOi8vcmVkdXguanMub3JnL3N0eWxlLWd1aWRlL3N0eWxlLWd1aWRlI2RvLW5vdC1tdXRhdGUtc3RhdGUpXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaGVkQWN0aW9uO1xyXG4gICAgICAgIH07IH07XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9zZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHNcclxuZnVuY3Rpb24gaXNQbGFpbih2YWwpIHtcclxuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcclxuICAgIHJldHVybiB0eXBlID09PSBcInVuZGVmaW5lZFwiIHx8IHZhbCA9PT0gbnVsbCB8fCB0eXBlID09PSBcInN0cmluZ1wiIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiIHx8IHR5cGUgPT09IFwibnVtYmVyXCIgfHwgQXJyYXkuaXNBcnJheSh2YWwpIHx8IGlzUGxhaW5PYmplY3QodmFsKTtcclxufVxyXG5mdW5jdGlvbiBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUodmFsdWUsIHBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpIHtcclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIGlmIChpc1NlcmlhbGl6YWJsZSA9PT0gdm9pZCAwKSB7IGlzU2VyaWFsaXphYmxlID0gaXNQbGFpbjsgfVxyXG4gICAgaWYgKGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZWRQYXRocyA9IFtdOyB9XHJcbiAgICB2YXIgZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XHJcbiAgICBpZiAoIWlzU2VyaWFsaXphYmxlKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGtleVBhdGg6IHBhdGggfHwgXCI8cm9vdD5cIixcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB2YXIgZW50cmllcyA9IGdldEVudHJpZXMgIT0gbnVsbCA/IGdldEVudHJpZXModmFsdWUpIDogT2JqZWN0LmVudHJpZXModmFsdWUpO1xyXG4gICAgdmFyIGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBlbnRyaWVzXzEgPSBlbnRyaWVzOyBfaSA8IGVudHJpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgX2IgPSBlbnRyaWVzXzFbX2ldLCBrZXkgPSBfYlswXSwgbmVzdGVkVmFsdWUgPSBfYlsxXTtcclxuICAgICAgICB2YXIgbmVzdGVkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgaWYgKGhhc0lnbm9yZWRQYXRocyAmJiBpZ25vcmVkUGF0aHMuaW5kZXhPZihuZXN0ZWRQYXRoKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzU2VyaWFsaXphYmxlKG5lc3RlZFZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAga2V5UGF0aDogbmVzdGVkUGF0aCxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBuZXN0ZWRWYWx1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG5lc3RlZFZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKG5lc3RlZFZhbHVlLCBuZXN0ZWRQYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBuZXh0KGFjdGlvbik7IH07IH07IH07XHJcbiAgICB9XHJcbiAgICB2YXIgX2IgPSBvcHRpb25zLmlzU2VyaWFsaXphYmxlLCBpc1NlcmlhbGl6YWJsZSA9IF9iID09PSB2b2lkIDAgPyBpc1BsYWluIDogX2IsIGdldEVudHJpZXMgPSBvcHRpb25zLmdldEVudHJpZXMsIF9jID0gb3B0aW9ucy5pZ25vcmVkQWN0aW9ucywgaWdub3JlZEFjdGlvbnMgPSBfYyA9PT0gdm9pZCAwID8gW10gOiBfYywgX2QgPSBvcHRpb25zLmlnbm9yZWRBY3Rpb25QYXRocywgaWdub3JlZEFjdGlvblBhdGhzID0gX2QgPT09IHZvaWQgMCA/IFtcIm1ldGEuYXJnXCIsIFwibWV0YS5iYXNlUXVlcnlNZXRhXCJdIDogX2QsIF9lID0gb3B0aW9ucy5pZ25vcmVkUGF0aHMsIGlnbm9yZWRQYXRocyA9IF9lID09PSB2b2lkIDAgPyBbXSA6IF9lLCBfZiA9IG9wdGlvbnMud2FybkFmdGVyLCB3YXJuQWZ0ZXIgPSBfZiA9PT0gdm9pZCAwID8gMzIgOiBfZiwgX2cgPSBvcHRpb25zLmlnbm9yZVN0YXRlLCBpZ25vcmVTdGF0ZSA9IF9nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9nO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZUFQSSkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICBpZiAoaWdub3JlZEFjdGlvbnMubGVuZ3RoICYmIGlnbm9yZWRBY3Rpb25zLmluZGV4T2YoYWN0aW9uLnR5cGUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xyXG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKGFjdGlvbiwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRBY3Rpb25QYXRocyk7XHJcbiAgICAgICAgICAgIGlmIChmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gYW4gYWN0aW9uLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSBsb2dpYyB0aGF0IGRpc3BhdGNoZWQgdGhpcyBhY3Rpb246IFwiLCBhY3Rpb24sIFwiXFxuKFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9mYXEvYWN0aW9ucyN3aHktc2hvdWxkLXR5cGUtYmUtYS1zdHJpbmctb3ItYXQtbGVhc3Qtc2VyaWFsaXphYmxlLXdoeS1zaG91bGQtbXktYWN0aW9uLXR5cGVzLWJlLWNvbnN0YW50cylcIiwgXCJcXG4oVG8gYWxsb3cgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZXMgc2VlOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL3VzYWdlL3VzYWdlLWd1aWRlI3dvcmtpbmctd2l0aC1ub24tc2VyaWFsaXphYmxlLWRhdGEpXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICBpZiAoIWlnbm9yZVN0YXRlKSB7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZUFQSS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShzdGF0ZSwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoaXMgYWN0aW9uIHR5cGU6IFwiICsgYWN0aW9uLnR5cGUgKyBcIi5cXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9vcmdhbml6aW5nLXN0YXRlI2Nhbi1pLXB1dC1mdW5jdGlvbnMtcHJvbWlzZXMtb3Itb3RoZXItbm9uLXNlcmlhbGl6YWJsZS1pdGVtcy1pbi1teS1zdG9yZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07IH07IH07XHJcbn1cclxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiYm9vbGVhblwiO1xyXG59XHJcbmZ1bmN0aW9uIGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgX2IgPSBvcHRpb25zLnRodW5rLCB0aHVuayA9IF9iID09PSB2b2lkIDAgPyB0cnVlIDogX2IsIF9jID0gb3B0aW9ucy5pbW11dGFibGVDaGVjaywgaW1tdXRhYmxlQ2hlY2sgPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jLCBfZCA9IG9wdGlvbnMuc2VyaWFsaXphYmxlQ2hlY2ssIHNlcmlhbGl6YWJsZUNoZWNrID0gX2QgPT09IHZvaWQgMCA/IHRydWUgOiBfZDtcclxuICAgIHZhciBtaWRkbGV3YXJlQXJyYXkgPSBuZXcgTWlkZGxld2FyZUFycmF5KCk7XHJcbiAgICBpZiAodGh1bmspIHtcclxuICAgICAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlLndpdGhFeHRyYUFyZ3VtZW50KHRodW5rLmV4dHJhQXJndW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaWYgKGltbXV0YWJsZUNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBpbW11dGFibGVPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKGltbXV0YWJsZUNoZWNrKSkge1xyXG4gICAgICAgICAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZXJpYWxpemFibGVDaGVjaykge1xyXG4gICAgICAgICAgICB2YXIgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAoIWlzQm9vbGVhbihzZXJpYWxpemFibGVDaGVjaykpIHtcclxuICAgICAgICAgICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoc2VyaWFsaXphYmxlT3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtaWRkbGV3YXJlQXJyYXk7XHJcbn1cclxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXHJcbnZhciBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiO1xyXG5mdW5jdGlvbiBjb25maWd1cmVTdG9yZShvcHRpb25zKSB7XHJcbiAgICB2YXIgY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlID0gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpO1xyXG4gICAgdmFyIF9iID0gb3B0aW9ucyB8fCB7fSwgX2MgPSBfYi5yZWR1Y2VyLCByZWR1Y2VyID0gX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLCBfZCA9IF9iLm1pZGRsZXdhcmUsIG1pZGRsZXdhcmUgPSBfZCA9PT0gdm9pZCAwID8gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKCkgOiBfZCwgX2UgPSBfYi5kZXZUb29scywgZGV2VG9vbHMgPSBfZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9lLCBfZiA9IF9iLnByZWxvYWRlZFN0YXRlLCBwcmVsb2FkZWRTdGF0ZSA9IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZiwgX2cgPSBfYi5lbmhhbmNlcnMsIGVuaGFuY2VycyA9IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZztcclxuICAgIHZhciByb290UmVkdWNlcjtcclxuICAgIGlmICh0eXBlb2YgcmVkdWNlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xyXG4gICAgICAgIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInJlZHVjZXJcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCBvZiBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGNvbWJpbmVSZWR1Y2VycycpO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpbmFsTWlkZGxld2FyZSA9IG1pZGRsZXdhcmU7XHJcbiAgICBpZiAodHlwZW9mIGZpbmFsTWlkZGxld2FyZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgZmluYWxNaWRkbGV3YXJlID0gZmluYWxNaWRkbGV3YXJlKGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSk7XHJcbiAgICAgICAgaWYgKCFJU19QUk9EVUNUSU9OICYmICFBcnJheS5pc0FycmF5KGZpbmFsTWlkZGxld2FyZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2hlbiB1c2luZyBhIG1pZGRsZXdhcmUgYnVpbGRlciBmdW5jdGlvbiwgYW4gYXJyYXkgb2YgbWlkZGxld2FyZSBtdXN0IGJlIHJldHVybmVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghSVNfUFJPRFVDVElPTiAmJiBmaW5hbE1pZGRsZXdhcmUuc29tZShmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gdHlwZW9mIGl0ZW0gIT09IFwiZnVuY3Rpb25cIjsgfSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlYWNoIG1pZGRsZXdhcmUgcHJvdmlkZWQgdG8gY29uZmlndXJlU3RvcmUgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIG1pZGRsZXdhcmVFbmhhbmNlciA9IGFwcGx5TWlkZGxld2FyZS5hcHBseSh2b2lkIDAsIGZpbmFsTWlkZGxld2FyZSk7XHJcbiAgICB2YXIgZmluYWxDb21wb3NlID0gY29tcG9zZTI7XHJcbiAgICBpZiAoZGV2VG9vbHMpIHtcclxuICAgICAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKF9fb2JqU3ByZWFkKHtcclxuICAgICAgICAgICAgdHJhY2U6ICFJU19QUk9EVUNUSU9OXHJcbiAgICAgICAgfSwgdHlwZW9mIGRldlRvb2xzID09PSBcIm9iamVjdFwiICYmIGRldlRvb2xzKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgc3RvcmVFbmhhbmNlcnMgPSBbbWlkZGxld2FyZUVuaGFuY2VyXTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGVuaGFuY2VycykpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IF9fc3ByZWFkQXJyYXkoW21pZGRsZXdhcmVFbmhhbmNlcl0sIGVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZW5oYW5jZXJzID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IGVuaGFuY2VycyhzdG9yZUVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICB2YXIgY29tcG9zZWRFbmhhbmNlciA9IGZpbmFsQ29tcG9zZS5hcHBseSh2b2lkIDAsIHN0b3JlRW5oYW5jZXJzKTtcclxuICAgIHJldHVybiBjcmVhdGVTdG9yZShyb290UmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGNvbXBvc2VkRW5oYW5jZXIpO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVBY3Rpb24udHNcclxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVBY3Rpb24pIHtcclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmVwYXJlQWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBwcmVwYXJlZCA9IHByZXBhcmVBY3Rpb24uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICAgICAgaWYgKCFwcmVwYXJlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJlcGFyZUFjdGlvbiBkaWQgbm90IHJldHVybiBhbiBvYmplY3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9fb2JqU3ByZWFkKF9fb2JqU3ByZWFkKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBwcmVwYXJlZC5wYXlsb2FkXHJcbiAgICAgICAgICAgIH0sIFwibWV0YVwiIGluIHByZXBhcmVkICYmIHsgbWV0YTogcHJlcGFyZWQubWV0YSB9KSwgXCJlcnJvclwiIGluIHByZXBhcmVkICYmIHsgZXJyb3I6IHByZXBhcmVkLmVycm9yIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBhcmdzWzBdIH07XHJcbiAgICB9XHJcbiAgICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJcIiArIHR5cGU7IH07XHJcbiAgICBhY3Rpb25DcmVhdG9yLnR5cGUgPSB0eXBlO1xyXG4gICAgYWN0aW9uQ3JlYXRvci5tYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi50eXBlID09PSB0eXBlOyB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuZnVuY3Rpb24gaXNGU0EoYWN0aW9uKSB7XHJcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdChhY3Rpb24pICYmIHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBPYmplY3Qua2V5cyhhY3Rpb24pLmV2ZXJ5KGlzVmFsaWRLZXkpO1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4gW1widHlwZVwiLCBcInBheWxvYWRcIiwgXCJlcnJvclwiLCBcIm1ldGFcIl0uaW5kZXhPZihrZXkpID4gLTE7XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHlwZShhY3Rpb25DcmVhdG9yKSB7XHJcbiAgICByZXR1cm4gXCJcIiArIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuLy8gc3JjL2NyZWF0ZVJlZHVjZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZSwgeyBpc0RyYWZ0IGFzIGlzRHJhZnQyLCBpc0RyYWZ0YWJsZSwgZW5hYmxlRVM1IH0gZnJvbSBcImltbWVyXCI7XHJcbi8vIHNyYy9tYXBCdWlsZGVycy50c1xyXG5mdW5jdGlvbiBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhidWlsZGVyQ2FsbGJhY2spIHtcclxuICAgIHZhciBhY3Rpb25zTWFwID0ge307XHJcbiAgICB2YXIgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcclxuICAgIHZhciBkZWZhdWx0Q2FzZVJlZHVjZXI7XHJcbiAgICB2YXIgYnVpbGRlciA9IHtcclxuICAgICAgICBhZGRDYXNlOiBmdW5jdGlvbiAodHlwZU9yQWN0aW9uQ3JlYXRvciwgcmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTWF0Y2hlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IFwic3RyaW5nXCIgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgICAgICBpZiAodHlwZSBpbiBhY3Rpb25zTWFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRDYXNlIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZE1hdGNoZXI6IGZ1bmN0aW9uIChtYXRjaGVyLCByZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goeyBtYXRjaGVyOiBtYXRjaGVyLCByZWR1Y2VyOiByZWR1Y2VyIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiAocmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHRDYXNlUmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XHJcbiAgICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBtYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgaWYgKGFjdGlvbk1hdGNoZXJzID09PSB2b2lkIDApIHsgYWN0aW9uTWF0Y2hlcnMgPSBbXTsgfVxyXG4gICAgZW5hYmxlRVM1KCk7XHJcbiAgICB2YXIgX2IgPSB0eXBlb2YgbWFwT3JCdWlsZGVyQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG1hcE9yQnVpbGRlckNhbGxiYWNrKSA6IFttYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl0sIGFjdGlvbnNNYXAgPSBfYlswXSwgZmluYWxBY3Rpb25NYXRjaGVycyA9IF9iWzFdLCBmaW5hbERlZmF1bHRDYXNlUmVkdWNlciA9IF9iWzJdO1xyXG4gICAgdmFyIGZyb3plbkluaXRpYWxTdGF0ZSA9IGNyZWF0ZU5leHRTdGF0ZShpbml0aWFsU3RhdGUsIGZ1bmN0aW9uICgpIHtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBmcm96ZW5Jbml0aWFsU3RhdGU7IH1cclxuICAgICAgICB2YXIgY2FzZVJlZHVjZXJzID0gX19zcHJlYWRBcnJheShbXHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbYWN0aW9uLnR5cGVdXHJcbiAgICAgICAgXSwgZmluYWxBY3Rpb25NYXRjaGVycy5maWx0ZXIoZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVyID0gX2IubWF0Y2hlcjtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcclxuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHZhciByZWR1Y2VyID0gX2IucmVkdWNlcjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZXI7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGlmIChjYXNlUmVkdWNlcnMuZmlsdGVyKGZ1bmN0aW9uIChjcikgeyByZXR1cm4gISFjcjsgfSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VycyA9IFtmaW5hbERlZmF1bHRDYXNlUmVkdWNlcl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjYXNlUmVkdWNlcnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91c1N0YXRlLCBjYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAoY2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0RyYWZ0MihwcmV2aW91c1N0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkcmFmdCA9IHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWlzRHJhZnRhYmxlKHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzU3RhdGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiQSBjYXNlIHJlZHVjZXIgb24gYSBub24tZHJhZnRhYmxlIHZhbHVlIG11c3Qgbm90IHJldHVybiB1bmRlZmluZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlKHByZXZpb3VzU3RhdGUsIGZ1bmN0aW9uIChkcmFmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgfSwgc3RhdGUpO1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvY3JlYXRlU2xpY2UudHNcclxuZnVuY3Rpb24gZ2V0VHlwZTIoc2xpY2UsIGFjdGlvbktleSkge1xyXG4gICAgcmV0dXJuIHNsaWNlICsgXCIvXCIgKyBhY3Rpb25LZXk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2xpY2Uob3B0aW9ucykge1xyXG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsIGluaXRpYWxTdGF0ZSA9IG9wdGlvbnMuaW5pdGlhbFN0YXRlO1xyXG4gICAgaWYgKCFuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYG5hbWVgIGlzIGEgcmVxdWlyZWQgb3B0aW9uIGZvciBjcmVhdGVTbGljZVwiKTtcclxuICAgIH1cclxuICAgIHZhciByZWR1Y2VycyA9IG9wdGlvbnMucmVkdWNlcnMgfHwge307XHJcbiAgICB2YXIgX2IgPSB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSBcImZ1bmN0aW9uXCIgPyBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhvcHRpb25zLmV4dHJhUmVkdWNlcnMpIDogW29wdGlvbnMuZXh0cmFSZWR1Y2Vyc10sIF9jID0gX2JbMF0sIGV4dHJhUmVkdWNlcnMgPSBfYyA9PT0gdm9pZCAwID8ge30gOiBfYywgX2QgPSBfYlsxXSwgYWN0aW9uTWF0Y2hlcnMgPSBfZCA9PT0gdm9pZCAwID8gW10gOiBfZCwgX2UgPSBfYlsyXSwgZGVmYXVsdENhc2VSZWR1Y2VyID0gX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lO1xyXG4gICAgdmFyIHJlZHVjZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcclxuICAgIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSA9IHt9O1xyXG4gICAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlID0ge307XHJcbiAgICB2YXIgYWN0aW9uQ3JlYXRvcnMgPSB7fTtcclxuICAgIHJlZHVjZXJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWR1Y2VyTmFtZSkge1xyXG4gICAgICAgIHZhciBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSA9IHJlZHVjZXJzW3JlZHVjZXJOYW1lXTtcclxuICAgICAgICB2YXIgdHlwZSA9IGdldFR5cGUyKG5hbWUsIHJlZHVjZXJOYW1lKTtcclxuICAgICAgICB2YXIgY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgdmFyIHByZXBhcmVDYWxsYmFjaztcclxuICAgICAgICBpZiAoXCJyZWR1Y2VyXCIgaW4gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpIHtcclxuICAgICAgICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5yZWR1Y2VyO1xyXG4gICAgICAgICAgICBwcmVwYXJlQ2FsbGJhY2sgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5wcmVwYXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWVbcmVkdWNlck5hbWVdID0gY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGVbdHlwZV0gPSBjYXNlUmVkdWNlcjtcclxuICAgICAgICBhY3Rpb25DcmVhdG9yc1tyZWR1Y2VyTmFtZV0gPSBwcmVwYXJlQ2FsbGJhY2sgPyBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUNhbGxiYWNrKSA6IGNyZWF0ZUFjdGlvbih0eXBlKTtcclxuICAgIH0pO1xyXG4gICAgdmFyIGZpbmFsQ2FzZVJlZHVjZXJzID0gX19vYmpTcHJlYWQoX19vYmpTcHJlYWQoe30sIGV4dHJhUmVkdWNlcnMpLCBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSk7XHJcbiAgICB2YXIgcmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBmaW5hbENhc2VSZWR1Y2VycywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgcmVkdWNlcjogcmVkdWNlcixcclxuICAgICAgICBhY3Rpb25zOiBhY3Rpb25DcmVhdG9ycyxcclxuICAgICAgICBjYXNlUmVkdWNlcnM6IHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lXHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9lbnRpdHlfc3RhdGUudHNcclxuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSkge1xyXG4gICAgICAgIGlmIChhZGRpdGlvbmFsU3RhdGUgPT09IHZvaWQgMCkgeyBhZGRpdGlvbmFsU3RhdGUgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpLCBhZGRpdGlvbmFsU3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgZ2V0SW5pdGlhbFN0YXRlOiBnZXRJbml0aWFsU3RhdGUgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc3RhdGVfc2VsZWN0b3JzLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XHJcbiAgICBmdW5jdGlvbiBnZXRTZWxlY3RvcnMoc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICB2YXIgc2VsZWN0SWRzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5pZHM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEVudGl0aWVzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5lbnRpdGllczsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QWxsID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0SWRzLCBzZWxlY3RFbnRpdGllcywgZnVuY3Rpb24gKGlkcywgZW50aXRpZXMpIHsgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBlbnRpdGllc1tpZF07IH0pOyB9KTtcclxuICAgICAgICB2YXIgc2VsZWN0SWQgPSBmdW5jdGlvbiAoXywgaWQpIHsgcmV0dXJuIGlkOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RCeUlkID0gZnVuY3Rpb24gKGVudGl0aWVzLCBpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RUb3RhbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgZnVuY3Rpb24gKGlkcykgeyByZXR1cm4gaWRzLmxlbmd0aDsgfSk7XHJcbiAgICAgICAgaWYgKCFzZWxlY3RTdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0SWRzOiBzZWxlY3RJZHMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0RW50aXRpZXMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBzZWxlY3RUb3RhbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RFbnRpdGllcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2VsZWN0SWRzOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0SWRzKSxcclxuICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyxcclxuICAgICAgICAgICAgc2VsZWN0QWxsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcclxuICAgICAgICAgICAgc2VsZWN0VG90YWw6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RUb3RhbCksXHJcbiAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldFNlbGVjdG9yczogZ2V0U2VsZWN0b3JzIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX2FkYXB0ZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZTIsIHsgaXNEcmFmdCBhcyBpc0RyYWZ0MyB9IGZyb20gXCJpbW1lclwiO1xyXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHsgcmV0dXJuIG11dGF0b3Ioc3RhdGUpOyB9KTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUsIHZvaWQgMCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSwgYXJnKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnMikge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNGU0EoYXJnMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBydW5NdXRhdG9yID0gZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNEcmFmdDMoc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJ1bk11dGF0b3Ioc3RhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlMihzdGF0ZSwgcnVuTXV0YXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdXRpbHMudHNcclxuZnVuY3Rpb24gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKSB7XHJcbiAgICB2YXIga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYga2V5ID09PSB2b2lkIDApIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgZW50aXR5IHBhc3NlZCB0byB0aGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCB1bmRlZmluZWQuXCIsIFwiWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uXCIsIFwiVGhlIGVudGl0eSB0aGF0IHdhcyBwYXNzZWQ6XCIsIGVudGl0eSwgXCJUaGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbjpcIiwgc2VsZWN0SWQudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5O1xyXG59XHJcbmZ1bmN0aW9uIGVuc3VyZUVudGl0aWVzQXJyYXkoZW50aXRpZXMpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcclxuICAgICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudGl0aWVzO1xyXG59XHJcbmZ1bmN0aW9uIHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSkge1xyXG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgIHZhciBhZGRlZCA9IFtdO1xyXG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgbmV3RW50aXRpZXNfMSA9IG5ld0VudGl0aWVzOyBfaSA8IG5ld0VudGl0aWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzFbX2ldO1xyXG4gICAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGlkIGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZWQucHVzaCh7IGlkOiBpZCwgY2hhbmdlczogZW50aXR5IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbYWRkZWQsIHVwZGF0ZWRdO1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKSB7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICB2YXIga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcclxuICAgICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzIgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfMltfaV07XHJcbiAgICAgICAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHN0YXRlLmVudGl0aWVzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzMgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18zLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfM1tfaV07XHJcbiAgICAgICAgICAgIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzID0ge307XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlID0gZmFsc2U7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gaWQgaW4gc3RhdGUuZW50aXRpZXM7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbE11dGFibHkoc3RhdGUpIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XHJcbiAgICAgICAgICAgIGlkczogW10sXHJcbiAgICAgICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdGFrZU5ld0tleShrZXlzLCB1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsMiA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDIsIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGhhc05ld0tleSA9IG5ld0tleSAhPT0gdXBkYXRlLmlkO1xyXG4gICAgICAgIGlmIChoYXNOZXdLZXkpIHtcclxuICAgICAgICAgICAga2V5c1t1cGRhdGUuaWRdID0gbmV3S2V5O1xyXG4gICAgICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3S2V5XSA9IHVwZGF0ZWQ7XHJcbiAgICAgICAgcmV0dXJuIGhhc05ld0tleTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgbmV3S2V5cyA9IHt9O1xyXG4gICAgICAgIHZhciB1cGRhdGVzUGVyRW50aXR5ID0ge307XHJcbiAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlczogX19vYmpTcHJlYWQoX19vYmpTcHJlYWQoe30sIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA/IHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXS5jaGFuZ2VzIDogbnVsbCksIHVwZGF0ZS5jaGFuZ2VzKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVwZGF0ZXMgPSBPYmplY3QudmFsdWVzKHVwZGF0ZXNQZXJFbnRpdHkpO1xyXG4gICAgICAgIHZhciBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcclxuICAgICAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcclxuICAgICAgICAgICAgdmFyIGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uICh1cGRhdGUpIHsgcmV0dXJuIHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSk7IH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIGlmIChkaWRNdXRhdGVJZHMpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmlkcyA9IHN0YXRlLmlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBuZXdLZXlzW2lkXSB8fCBpZDsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYiA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2JbMF0sIHVwZGF0ZWQgPSBfYlsxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVtb3ZlQWxsOiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IocmVtb3ZlQWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlT25lTXV0YWJseSksXHJcbiAgICAgICAgcmVtb3ZlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3NvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydCkge1xyXG4gICAgdmFyIF9iID0gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpLCByZW1vdmVPbmUgPSBfYi5yZW1vdmVPbmUsIHJlbW92ZU1hbnkgPSBfYi5yZW1vdmVNYW55LCByZW1vdmVBbGwgPSBfYi5yZW1vdmVBbGw7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gYWRkTWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgdmFyIG1vZGVscyA9IG5ld0VudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHsgcmV0dXJuICEoc2VsZWN0SWRWYWx1ZShtb2RlbCwgc2VsZWN0SWQpIGluIHN0YXRlLmVudGl0aWVzKTsgfSk7XHJcbiAgICAgICAgaWYgKG1vZGVscy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIGlmIChuZXdFbnRpdGllcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXMgPSB7fTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB0YWtlVXBkYXRlZE1vZGVsKG1vZGVscywgdXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIGlmICghKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3JpZ2luYWwyID0gc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB2YXIgdXBkYXRlZCA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWdpbmFsMiwgdXBkYXRlLmNoYW5nZXMpO1xyXG4gICAgICAgIHZhciBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcclxuICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICBtb2RlbHMucHVzaCh1cGRhdGVkKTtcclxuICAgICAgICByZXR1cm4gbmV3S2V5ICE9PSB1cGRhdGUuaWQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBtb2RlbHMgPSBbXTtcclxuICAgICAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkgeyByZXR1cm4gdGFrZVVwZGF0ZWRNb2RlbChtb2RlbHMsIHVwZGF0ZSwgc3RhdGUpOyB9KTtcclxuICAgICAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYiA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2JbMF0sIHVwZGF0ZWQgPSBfYlsxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aCAmJiBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1lcmdlKG1vZGVscywgc3RhdGUpIHtcclxuICAgICAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcclxuICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbc2VsZWN0SWQobW9kZWwpXSA9IG1vZGVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBhbGxFbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuZW50aXRpZXMpO1xyXG4gICAgICAgIGFsbEVudGl0aWVzLnNvcnQoc29ydCk7XHJcbiAgICAgICAgdmFyIG5ld1NvcnRlZElkcyA9IGFsbEVudGl0aWVzLm1hcChzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGlkcyA9IHN0YXRlLmlkcztcclxuICAgICAgICBpZiAoIWFyZUFycmF5c0VxdWFsKGlkcywgbmV3U29ydGVkSWRzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBuZXdTb3J0ZWRJZHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVPbmU6IHJlbW92ZU9uZSxcclxuICAgICAgICByZW1vdmVNYW55OiByZW1vdmVNYW55LFxyXG4gICAgICAgIHJlbW92ZUFsbDogcmVtb3ZlQWxsLFxyXG4gICAgICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL2NyZWF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eUFkYXB0ZXIob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYiA9IF9fb2JqU3ByZWFkKHtcclxuICAgICAgICBzb3J0Q29tcGFyZXI6IGZhbHNlLFxyXG4gICAgICAgIHNlbGVjdElkOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIGluc3RhbmNlLmlkOyB9XHJcbiAgICB9LCBvcHRpb25zKSwgc2VsZWN0SWQgPSBfYi5zZWxlY3RJZCwgc29ydENvbXBhcmVyID0gX2Iuc29ydENvbXBhcmVyO1xyXG4gICAgdmFyIHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkoKTtcclxuICAgIHZhciBzZWxlY3RvcnNGYWN0b3J5ID0gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpO1xyXG4gICAgdmFyIHN0YXRlQWRhcHRlciA9IHNvcnRDb21wYXJlciA/IGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydENvbXBhcmVyKSA6IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKTtcclxuICAgIHJldHVybiBfX29ialNwcmVhZChfX29ialNwcmVhZChfX29ialNwcmVhZCh7XHJcbiAgICAgICAgc2VsZWN0SWQ6IHNlbGVjdElkLFxyXG4gICAgICAgIHNvcnRDb21wYXJlcjogc29ydENvbXBhcmVyXHJcbiAgICB9LCBzdGF0ZUZhY3RvcnkpLCBzZWxlY3RvcnNGYWN0b3J5KSwgc3RhdGVBZGFwdGVyKTtcclxufVxyXG4vLyBzcmMvbmFub2lkLnRzXHJcbnZhciB1cmxBbHBoYWJldCA9IFwiTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRV1wiO1xyXG52YXIgbmFub2lkID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICAgIGlmIChzaXplID09PSB2b2lkIDApIHsgc2l6ZSA9IDIxOyB9XHJcbiAgICB2YXIgaWQgPSBcIlwiO1xyXG4gICAgdmFyIGkgPSBzaXplO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlkO1xyXG59O1xyXG4vLyBzcmMvY3JlYXRlQXN5bmNUaHVuay50c1xyXG52YXIgY29tbW9uUHJvcGVydGllcyA9IFtcclxuICAgIFwibmFtZVwiLFxyXG4gICAgXCJtZXNzYWdlXCIsXHJcbiAgICBcInN0YWNrXCIsXHJcbiAgICBcImNvZGVcIlxyXG5dO1xyXG52YXIgUmVqZWN0V2l0aFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVqZWN0V2l0aFZhbHVlKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVqZWN0V2l0aFZhbHVlO1xyXG59KCkpO1xyXG52YXIgRnVsZmlsbFdpdGhNZXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRnVsZmlsbFdpdGhNZXRhKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRnVsZmlsbFdpdGhNZXRhO1xyXG59KCkpO1xyXG52YXIgbWluaVNlcmlhbGl6ZUVycm9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHNpbXBsZUVycm9yID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb21tb25Qcm9wZXJ0aWVzXzEgPSBjb21tb25Qcm9wZXJ0aWVzOyBfaSA8IGNvbW1vblByb3BlcnRpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gY29tbW9uUHJvcGVydGllc18xW19pXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wZXJ0eV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNpbXBsZUVycm9yW3Byb3BlcnR5XSA9IHZhbHVlW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2ltcGxlRXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBtZXNzYWdlOiBTdHJpbmcodmFsdWUpIH07XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jVGh1bmsodHlwZVByZWZpeCwgcGF5bG9hZENyZWF0b3IsIG9wdGlvbnMpIHtcclxuICAgIHZhciBmdWxmaWxsZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL2Z1bGZpbGxlZFwiLCBmdW5jdGlvbiAocGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIG1ldGEpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICBtZXRhOiBfX29ialNwcmVhZChfX29ialNwcmVhZCh7fSwgbWV0YSB8fCB7fSksIHtcclxuICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcImZ1bGZpbGxlZFwiXHJcbiAgICAgICAgfSlcclxuICAgIH0pOyB9KTtcclxuICAgIHZhciBwZW5kaW5nID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9wZW5kaW5nXCIsIGZ1bmN0aW9uIChyZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICBwYXlsb2FkOiB2b2lkIDAsXHJcbiAgICAgICAgbWV0YTogX19vYmpTcHJlYWQoX19vYmpTcHJlYWQoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgcmVxdWVzdFN0YXR1czogXCJwZW5kaW5nXCJcclxuICAgICAgICB9KVxyXG4gICAgfSk7IH0pO1xyXG4gICAgdmFyIHJlamVjdGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9yZWplY3RlZFwiLCBmdW5jdGlvbiAoZXJyb3IsIHJlcXVlc3RJZCwgYXJnLCBwYXlsb2FkLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXHJcbiAgICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCBcIlJlamVjdGVkXCIpLFxyXG4gICAgICAgIG1ldGE6IF9fb2JqU3ByZWFkKF9fb2JqU3ByZWFkKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgIHJlamVjdGVkV2l0aFZhbHVlOiAhIXBheWxvYWQsXHJcbiAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicmVqZWN0ZWRcIixcclxuICAgICAgICAgICAgYWJvcnRlZDogKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5uYW1lKSA9PT0gXCJBYm9ydEVycm9yXCIsXHJcbiAgICAgICAgICAgIGNvbmRpdGlvbjogKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5uYW1lKSA9PT0gXCJDb25kaXRpb25FcnJvclwiXHJcbiAgICAgICAgfSlcclxuICAgIH0pOyB9KTtcclxuICAgIHZhciBkaXNwbGF5ZWRXYXJuaW5nID0gZmFsc2U7XHJcbiAgICB2YXIgQUMgPSB0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSBcInVuZGVmaW5lZFwiID8gQWJvcnRDb250cm9sbGVyIDogLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsID0ge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbmFib3J0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5ZWRXYXJuaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheWVkV2FybmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiVGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBpbXBsZW1lbnQgQWJvcnRDb250cm9sbGVyLiBcXG5JZiB5b3Ugd2FudCB0byB1c2UgdGhlIEFib3J0Q29udHJvbGxlciB0byByZWFjdCB0byBgYWJvcnRgIGV2ZW50cywgcGxlYXNlIGNvbnNpZGVyIGltcG9ydGluZyBhIHBvbHlmaWxsIGxpa2UgJ2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC1vbmx5Jy5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBjbGFzc18xO1xyXG4gICAgfSgpKTtcclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoYXJnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhKSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgdmFyIHJlcXVlc3RJZCA9ICgoX2EgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmlkR2VuZXJhdG9yKSAhPSBudWxsID8gX2EgOiBuYW5vaWQpKCk7XHJcbiAgICAgICAgICAgIHZhciBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQUMoKTtcclxuICAgICAgICAgICAgdmFyIGFib3J0UmVhc29uO1xyXG4gICAgICAgICAgICB2YXIgYWJvcnRlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAoXywgcmVqZWN0KSB7IHJldHVybiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QoeyBuYW1lOiBcIkFib3J0RXJyb3JcIiwgbWVzc2FnZTogYWJvcnRSZWFzb24gfHwgXCJBYm9ydGVkXCIgfSk7IH0pOyB9KTtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gYWJvcnQocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0UmVhc29uID0gcmVhc29uO1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBwcm9taXNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTIsIGZpbmFsQWN0aW9uLCBlcnJfMSwgc2tpcERpc3BhdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgMiwgLCAzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jb25kaXRpb24gJiYgb3B0aW9ucy5jb25kaXRpb24oYXJnLCB7IGdldFN0YXRlOiBnZXRTdGF0ZSwgZXh0cmE6IGV4dHJhIH0pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbmRpdGlvbkVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkFib3J0ZWQgZHVlIHRvIGNvbmRpdGlvbiBjYWxsYmFjayByZXR1cm5pbmcgZmFsc2UuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gocGVuZGluZyhyZXF1ZXN0SWQsIGFyZywgKF9hMiA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2V0UGVuZGluZ01ldGEpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuY2FsbChvcHRpb25zLCB7IHJlcXVlc3RJZDogcmVxdWVzdElkLCBhcmc6IGFyZyB9LCB7IGdldFN0YXRlOiBnZXRTdGF0ZSwgZXh0cmE6IGV4dHJhIH0pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yYWNlKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0ZWRQcm9taXNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHBheWxvYWRDcmVhdG9yKGFyZywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3RXaXRoVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgbWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlamVjdFdpdGhWYWx1ZSh2YWx1ZSwgbWV0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsV2l0aFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGdWxmaWxsV2l0aE1ldGEodmFsdWUsIG1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEZ1bGZpbGxXaXRoTWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdC5wYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgcmVzdWx0Lm1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycl8xID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gZXJyXzEgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWUgPyByZWplY3RlZChudWxsLCByZXF1ZXN0SWQsIGFyZywgZXJyXzEucGF5bG9hZCwgZXJyXzEubWV0YSkgOiByZWplY3RlZChlcnJfMSwgcmVxdWVzdElkLCBhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBEaXNwYXRjaCA9IG9wdGlvbnMgJiYgIW9wdGlvbnMuZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb24gJiYgcmVqZWN0ZWQubWF0Y2goZmluYWxBY3Rpb24pICYmIGZpbmFsQWN0aW9uLm1ldGEuY29uZGl0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcERpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGZpbmFsQWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZpbmFsQWN0aW9uXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0oKTtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJvbWlzZSwge1xyXG4gICAgICAgICAgICAgICAgYWJvcnQ6IGFib3J0LFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgICAgIHVud3JhcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4odW53cmFwUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjdGlvbkNyZWF0b3IsIHtcclxuICAgICAgICBwZW5kaW5nOiBwZW5kaW5nLFxyXG4gICAgICAgIHJlamVjdGVkOiByZWplY3RlZCxcclxuICAgICAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcclxuICAgICAgICB0eXBlUHJlZml4OiB0eXBlUHJlZml4XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiB1bndyYXBSZXN1bHQoYWN0aW9uKSB7XHJcbiAgICBpZiAoYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWUpIHtcclxuICAgICAgICB0aHJvdyBhY3Rpb24ucGF5bG9hZDtcclxuICAgIH1cclxuICAgIGlmIChhY3Rpb24uZXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBhY3Rpb24uZXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XHJcbn1cclxuLy8gc3JjL3RzSGVscGVycy50c1xyXG52YXIgaGFzTWF0Y2hGdW5jdGlvbiA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICByZXR1cm4gdiAmJiB0eXBlb2Ygdi5tYXRjaCA9PT0gXCJmdW5jdGlvblwiO1xyXG59O1xyXG4vLyBzcmMvbWF0Y2hlcnMudHNcclxudmFyIG1hdGNoZXMgPSBmdW5jdGlvbiAobWF0Y2hlciwgYWN0aW9uKSB7XHJcbiAgICBpZiAoaGFzTWF0Y2hGdW5jdGlvbihtYXRjaGVyKSkge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyLm1hdGNoKGFjdGlvbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBpc0FueU9mKCkge1xyXG4gICAgdmFyIG1hdGNoZXJzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIG1hdGNoZXJzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVycy5zb21lKGZ1bmN0aW9uIChtYXRjaGVyKSB7IHJldHVybiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbik7IH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0FsbE9mKCkge1xyXG4gICAgdmFyIG1hdGNoZXJzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIG1hdGNoZXJzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVycy5ldmVyeShmdW5jdGlvbiAobWF0Y2hlcikgeyByZXR1cm4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pOyB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCB2YWxpZFN0YXR1cykge1xyXG4gICAgaWYgKCFhY3Rpb24gfHwgIWFjdGlvbi5tZXRhKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBoYXNWYWxpZFJlcXVlc3RJZCA9IHR5cGVvZiBhY3Rpb24ubWV0YS5yZXF1ZXN0SWQgPT09IFwic3RyaW5nXCI7XHJcbiAgICB2YXIgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzID0gdmFsaWRTdGF0dXMuaW5kZXhPZihhY3Rpb24ubWV0YS5yZXF1ZXN0U3RhdHVzKSA+IC0xO1xyXG4gICAgcmV0dXJuIGhhc1ZhbGlkUmVxdWVzdElkICYmIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cztcclxufVxyXG5mdW5jdGlvbiBpc0FzeW5jVGh1bmtBcnJheShhKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGFbMF0gPT09IFwiZnVuY3Rpb25cIiAmJiBcInBlbmRpbmdcIiBpbiBhWzBdICYmIFwiZnVsZmlsbGVkXCIgaW4gYVswXSAmJiBcInJlamVjdGVkXCIgaW4gYVswXTtcclxufVxyXG5mdW5jdGlvbiBpc1BlbmRpbmcoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJwZW5kaW5nXCJdKTsgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUGVuZGluZygpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLnBlbmRpbmc7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNSZWplY3RlZCgpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInJlamVjdGVkXCJdKTsgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUmVqZWN0ZWQoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5yZWplY3RlZDsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc1JlamVjdGVkV2l0aFZhbHVlKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICB2YXIgaGFzRmxhZyA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gYWN0aW9uICYmIGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlO1xyXG4gICAgfTtcclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbGxPZihpc1JlamVjdGVkLmFwcGx5KHZvaWQgMCwgYXN5bmNUaHVua3MpLCBoYXNGbGFnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1JlamVjdGVkV2l0aFZhbHVlKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbGxPZihpc1JlamVjdGVkLmFwcGx5KHZvaWQgMCwgYXN5bmNUaHVua3MpLCBoYXNGbGFnKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzRnVsZmlsbGVkKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wiZnVsZmlsbGVkXCJdKTsgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzRnVsZmlsbGVkKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsuZnVsZmlsbGVkOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FjdGlvbigpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInBlbmRpbmdcIiwgXCJmdWxmaWxsZWRcIiwgXCJyZWplY3RlZFwiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc0FzeW5jVGh1bmtBY3Rpb24oKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgYXN5bmNUaHVua3NfMSA9IGFzeW5jVGh1bmtzOyBfaSA8IGFzeW5jVGh1bmtzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBhc3luY1RodW5rID0gYXN5bmNUaHVua3NfMVtfaV07XHJcbiAgICAgICAgICAgIG1hdGNoZXJzLnB1c2goYXN5bmNUaHVuay5wZW5kaW5nLCBhc3luY1RodW5rLnJlamVjdGVkLCBhc3luY1RodW5rLmZ1bGZpbGxlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZXhwb3J0IHsgTWlkZGxld2FyZUFycmF5LCBjb25maWd1cmVTdG9yZSwgY3JlYXRlQWN0aW9uLCBjcmVhdGVBc3luY1RodW5rLCBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciwgY3JlYXRlRW50aXR5QWRhcHRlciwgY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBkZWZhdWx0MiBhcyBjcmVhdGVOZXh0U3RhdGUsIGNyZWF0ZVJlZHVjZXIsIGNyZWF0ZVNlbGVjdG9yMiBhcyBjcmVhdGVTZWxlY3RvciwgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVTbGljZSwgY3VycmVudDIgYXMgY3VycmVudCwgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLCBmcmVlemUsIGdldERlZmF1bHRNaWRkbGV3YXJlLCBnZXRUeXBlLCBpc0FsbE9mLCBpc0FueU9mLCBpc0FzeW5jVGh1bmtBY3Rpb24sIGlzRHJhZnQ0IGFzIGlzRHJhZnQsIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbWluaVNlcmlhbGl6ZUVycm9yLCBuYW5vaWQsIG9yaWdpbmFsLCB1bndyYXBSZXN1bHQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcCIsImltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XG5cbmNvbnN0IGV4ZXJjaXNlc0xpc3QgPSBbXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCIxIGFybSBmcm9udCAtIGxhdGVyYWwga2ljayBmaW5zXCIsXG4gICAgbGV2ZWw6IDMsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJtYWluXCIsIFwidGVjaG5pcXVlXCJdLFxuICAgIG11c2NsZTogW1wibGVnc1wiLCBcImFic1wiXSxcbiAgICBtYXRlcmlhbDogW1wiZmluc1wiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSBraWNrXCIsXG4gICAgbGV2ZWw6IDEsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIiwgXCJ3YXJtdXBcIiwgXCJjb29sZG93blwiXSxcbiAgICBtdXNjbGU6IFtcImxlZ3NcIl0sXG4gICAgbWF0ZXJpYWw6IFtcImtpY2tib2FyZFwiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIk1lZGxleVwiLFxuICAgIGxldmVsOiA0LFxuICAgIHN0cm9rZTogXCJhbGxcIixcbiAgICBibG9jazogW1wibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImxlZ3NcIiwgXCJhYnNcIiwgXCJhcm1zXCIsIFwicGVjc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiTWVkbGV5IHdpdGggZmluc1wiLFxuICAgIGxldmVsOiA0LFxuICAgIHN0cm9rZTogXCJhbGxcIixcbiAgICBibG9jazogW1wibWFpblwiLCBcIndhcm11cFwiXSxcbiAgICBtdXNjbGU6IFtcImxlZ3NcIiwgXCJhYnNcIiwgXCJhcm1zXCIsIFwicGVjc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtcImZpbnNcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJNZWRsZXkga2lja1wiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJhbGxcIixcbiAgICBibG9jazogW1wibWFpblwiLCBcIndhcm11cFwiLCBcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImxlZ3NcIiwgXCJhYnNcIiwgXCJhcm1zXCIsIFwicGVjc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQnJlYXN0c3Ryb2tlIGFybXMgd2l0aCBidXR0ZXJmbHkga2lja3NcIixcbiAgICBsZXZlbDogMyxcbiAgICBzdHJva2U6IFwiYnJlYXN0c3Ryb2tlXCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiLCBcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImxlZ3NcIiwgXCJhYnNcIiwgXCJwZWNzXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkRvbHBoaW4ga2ljayB1bmRlcndhdGVyIHdpdGggZmluc1wiLFxuICAgIGxldmVsOiA1LFxuICAgIHN0cm9rZTogXCJidXR0ZXJmbHlcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCIsIFwibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImxlZ3NcIiwgXCJhYnNcIl0sXG4gICAgbWF0ZXJpYWw6IFtcImZpbnNcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJDbG9zZWQtZmlzdCBGcmVlc3R5bGVcIixcbiAgICBsZXZlbDogMixcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiLCBcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSB3aXRoIDIgc3Ryb2tlcyBwZXIgNiBraWNrc1wiLFxuICAgIGxldmVsOiAyLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wid2FybXVwXCIsIFwidGVjaG5pcXVlXCIsIFwibWFpblwiLCBcImNvb2xkb3duXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiRnJlZXN0eWxlIHdpdGggc3Ryb25nIGVudHJ5JmNhdGNoIGluIHdhdGVyXCIsXG4gICAgbGV2ZWw6IDIsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJ3YXJtdXBcIiwgXCJ0ZWNobmlxdWVcIiwgXCJtYWluXCIsIFwiY29vbGRvd25cIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGcmVlc3R5bGUgd2l0aCBzdHJvbmcgcHVsbCBpbiB3YXRlclwiLFxuICAgIGxldmVsOiAyLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wid2FybXVwXCIsIFwidGVjaG5pcXVlXCIsIFwibWFpblwiLCBcImNvb2xkb3duXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiRnJlZXN0eWxlIHdpdGggc3Ryb25nIHB1c2ggaW4gd2F0ZXJcIixcbiAgICBsZXZlbDogMixcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiLCBcInRlY2huaXF1ZVwiLCBcIm1haW5cIiwgXCJjb29sZG93blwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSB3aXRoIG9wZW4gd2F0ZXJzIHRlY2huaXF1ZVwiLFxuICAgIGxldmVsOiA0LFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wid2FybXVwXCIsIFwidGVjaG5pcXVlXCIsIFwibWFpblwiLCBcImNvb2xkb3duXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiSGVhZC11cCBGcmVlc3R5bGVcIixcbiAgICBsZXZlbDogMyxcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiLCBcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCIsIFwiYWJzXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIlVuZGVyd2F0ZXIgRnJlZXN0eWxlIHdpdGggRmluc1wiLFxuICAgIGxldmVsOiA1LFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCIsIFwibGVnc1wiLCBcImFic1wiXSxcbiAgICBtYXRlcmlhbDogW1wiZmluc1wiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkhhbmQtZHJhZyBEcmlsbCBGcmVlc3R5bGVcIixcbiAgICBsZXZlbDogMixcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiLCBcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSB3aXRoIERvbHBoaW4gS2lja3MgKGF0IHRoZSBlbmQgb2Ygc3Ryb2tlIGN5Y2xlKVwiLFxuICAgIGxldmVsOiA0LFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCIsIFwibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJhYnNcIiwgXCJwZWNzXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJTY3VsbGluZyB3aXRoIHB1bGwtYnVveSBmcmVlc3R5bGVcIixcbiAgICBsZXZlbDogMixcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCIsIFwicGVjc1wiXSxcbiAgICBtYXRlcmlhbDogW1wicHVsbGJ1b3lcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGcmVlc3R5bGUgd2l0aCBwdWxsLWJ1b3kgYmV0d2VlbiBsZWdzXCIsXG4gICAgbGV2ZWw6IDEsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJ3YXJtdXBcIiwgXCJ0ZWNobmlxdWVcIiwgXCJjb29sZG93blwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJwdWxsYnVveVwiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSBzbG93aW5nIGRvd24gcmh5dGhtXCIsXG4gICAgbGV2ZWw6IDEsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJjb29sZG93blwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkRpcCAodGVuc2lvbikgJiBLaWNrIEZyZWVzdHlsZSAoZitwK3MpXCIsXG4gICAgbGV2ZWw6IDUsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJtYWluXCIsIFwidGVjaG5pcXVlXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImFic1wiLCBcImJhY2tcIiwgXCJwZWNzXCIsIFwibGVnc1wiXSxcbiAgICBtYXRlcmlhbDogW1wiZmluc1wiLCBcInBhZGRsZXNcIiwgXCJzbm9ya2VsXCJdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQ2F0Y2gtVXAgRnJlZXN0eWxlXCIsXG4gICAgbGV2ZWw6IDEsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJ3YXJtdXBcIiwgXCJ0ZWNobmlxdWVcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJDYXRjaC1VcCBGcmVlc3R5bGUgdXNpbmcga2lja2JvYXJkIHVwZnJvbnRcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiLCBcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJraWNrYm9hcmRcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGcmVlc3R5bGUgNiBraWNrcyBvbiBzaWRlLCAxIHN0cm9rZSAoc3dpdGNoaW5nIHNpZGVzKVwiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wid2FybXVwXCIsIFwidGVjaG5pcXVlXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiRnJlZXN0eWxlIHNob3J0IHJldHJhY3Rpb24gd2l0aCAxIHBhZGRsZSArIHNub3JrZWxcIixcbiAgICBsZXZlbDogNCxcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiLCBcIm1haW5cIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiLCBcInBlY3NcIiwgXCJhYnNcIl0sXG4gICAgbWF0ZXJpYWw6IFtcInBhZGRsZXNcIiwgXCJzbm9ya2VsXCJdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQnJlYXN0c3Ryb2tlIC0gSGVhZCBhYm92ZSB3YXRlclwiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJicmVhc3RzdHJva2VcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCJdLFxuICAgIG11c2NsZTogW1wiYWJzXCIsIFwiYXJtc1wiLCBcInBlY3NcIiwgXCJsZWdzXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJyZWFzdHN0cm9rZSB3aXRoIGZyZWVzdHlsZSBsZWdzXCIsXG4gICAgbGV2ZWw6IDIsXG4gICAgc3Ryb2tlOiBcImJyZWFzdHN0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIiwgXCJ3YXJtdXBcIl0sXG4gICAgbXVzY2xlOiBbXCJhYnNcIiwgXCJhcm1zXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJyZWFzdHN0cm9rZSBzbGlkaW5nIDNzXCIsXG4gICAgbGV2ZWw6IDEsXG4gICAgc3Ryb2tlOiBcImJyZWFzdHN0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIiwgXCJjb29sZG93blwiXSxcbiAgICBtdXNjbGU6IFtcImFic1wiLCBcImxlZ3NcIiwgXCJwZWNzXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJyZWFzdHN0cm9rZSB3aXRoIGJ1dHRlcmZseSBsZWdzXCIsXG4gICAgbGV2ZWw6IDMsXG4gICAgc3Ryb2tlOiBcImJyZWFzdHN0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIiwgXCJ3YXJtdXBcIl0sXG4gICAgbXVzY2xlOiBbXCJhYnNcIiwgXCJhcm1zXCIsIFwibGVnc1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGcmVlc3R5bGUga2ljayB3aXRoIGZpbnNcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiLCBcInRlY2huaXF1ZVwiLCBcIm1haW5cIl0sXG4gICAgbXVzY2xlOiBbXCJsZWdzXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJmaW5zXCIsIFwia2lja2JvYXJkXCJdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQnJlYXN0c3Ryb2tlIHdpdGggbGVnIGtpY2sgdmFyaWF0aW9uIDN4KGZyZWVzdHlsZS9idXR0ZXJmbHkvYnJlYXN0c3Ryb2tlKVwiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJicmVhc3RzdHJva2VcIixcbiAgICBibG9jazogW1wid2FybXVwXCIsIFwidGVjaG5pcXVlXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImFic1wiLCBcImxlZ3NcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQnJlYXN0c3Ryb2tlIFR3byBMZWcgS2lja1wiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJicmVhc3RzdHJva2VcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCIsIFwid2FybXVwXCJdLFxuICAgIG11c2NsZTogW1wiYWJzXCIsIFwiYXJtc1wiLCBcImxlZ3NcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQnV0dGVyZmx5IGN5Y2xlcyBldmVyeSAzLzQgbGVnIGtpY2tzIHdpdGggZmluc1wiLFxuICAgIGxldmVsOiA0LFxuICAgIHN0cm9rZTogXCJidXR0ZXJmbHlcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCIsIFwibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImFic1wiLCBcImFybXNcIiwgXCJsZWdzXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW1wiZmluc1wiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJ1dHRlcmZseSBvbmUgYXJtIG9ubHlcIixcbiAgICBsZXZlbDogMyxcbiAgICBzdHJva2U6IFwiYnV0dGVyZmx5XCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiLCBcIndhcm11cFwiXSxcbiAgICBtdXNjbGU6IFtcImFic1wiLCBcImFybXNcIiwgXCJsZWdzXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCdXR0ZXJmbHkgd2l0aCBicmVhc3Ryb2tlIGxlZ3MgKGxhdGVyYWwgYnJlYXRoaW5nKVwiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJidXR0ZXJmbHlcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCIsIFwid2FybXVwXCJdLFxuICAgIG11c2NsZTogW1wiYWJzXCIsIFwiYXJtc1wiLCBcImxlZ3NcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJ1dHRlcmZseSB3aXRoIHVuZGVyd2F0ZXIgcmVjb3ZlcnlcIixcbiAgICBsZXZlbDogNSxcbiAgICBzdHJva2U6IFwiYnV0dGVyZmx5XCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImFic1wiLCBcImFybXNcIiwgXCJsZWdzXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCdXR0ZXJmbHkgd2l0aCBjbGVuY2hlZCBmaXN0c1wiLFxuICAgIGxldmVsOiA0LFxuICAgIHN0cm9rZTogXCJidXR0ZXJmbHlcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCIsIFwid2FybXVwXCJdLFxuICAgIG11c2NsZTogW1wiYWJzXCIsIFwiYXJtc1wiLCBcImxlZ3NcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJ1dHRlcmZseSB3aXRoIG9uZSBraWNrIChhdCB0aGUgZW5kKVwiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJidXR0ZXJmbHlcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCIsIFwid2FybXVwXCJdLFxuICAgIG11c2NsZTogW1wiYWJzXCIsIFwiYXJtc1wiLCBcImxlZ3NcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJhY2tzdHJva2UgdXNpbmcgYSBraWNrYm9hcmQgJiBhbHRlcm5pbmcgc3Ryb2tlXCIsXG4gICAgbGV2ZWw6IDIsXG4gICAgc3Ryb2tlOiBcImJhY2tzdHJva2VcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCIsIFwid2FybXVwXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIiwgXCJsZWdzXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJraWNrYm9hcmRcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCYWNrc3Ryb2tlIG9uZSBhcm0gb25seVwiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJiYWNrc3Ryb2tlXCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiLCBcIndhcm11cFwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJhY2tzdHJva2Ugd2l0aCBicmVhc3RzdHJva2UgbGVnc1wiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJiYWNrc3Ryb2tlXCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCIsIFwibGVnc1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCYWNrc3Ryb2tlIHdpdGggcHVsbGJ1b3kgaW4gZm9yZWhlYWRcIixcbiAgICBsZXZlbDogMyxcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiLCBcImFic1wiXSxcbiAgICBtYXRlcmlhbDogW1wicHVsbGJ1b3lcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCYWNrc3Ryb2tlIHdpdGggZmlzdHMgY2xlbmNoZWRcIixcbiAgICBsZXZlbDogMixcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIiwgXCJ3YXJtdXBcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCYWNrc3Ryb2tlIGZyb250IGNyb3Nzb3ZlcnMgMyBzdHJva2VzICsgMyBjeWNsZXNcIixcbiAgICBsZXZlbDogMyxcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCYWNrc3Ryb2tlIGxpZnRpbmcgcHVsbGJ1b3kgKHNsaWdodGx5IGFib3ZlIGtuZWVzKSBhcm0gZXh0ZW5kZWQgXCIsXG4gICAgbGV2ZWw6IDIsXG4gICAgc3Ryb2tlOiBcImJhY2tzdHJva2VcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtcInB1bGxidW95XCJdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQmFja3N0cm9rZSB3aXRoIHB1bGxidW95IGJldHdlZW4gbGVnc1wiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJiYWNrc3Ryb2tlXCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiLCBcIndhcm11cFwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJwdWxsYnVveVwiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSB3aXRoIHB1bGxidW95IGJldHdlZW4gbGVnc1wiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJiYWNrc3Ryb2tlXCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiLCBcIndhcm11cFwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJwdWxsYnVveVwiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJhY2tzdHJva2UsIGFsdGVybmF0aW5nIG9uZSBzdHJva2UgKyBwYXVzZSAxIHNlY29uZFwiLFxuICAgIGxldmVsOiAyLFxuICAgIHN0cm9rZTogXCJiYWNrc3Ryb2tlXCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiLCBcIndhcm11cFwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJhY2tzdHJva2U6IGFsdGVybmF0aW5nIHNlYXRlZCArIHR3byBhcm1lZFwiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJiYWNrc3Ryb2tlXCIsXG4gICAgYmxvY2s6IFtcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJhY2tzdHJva2Ugc3dhcCBvdmVyIHVzaW5nIHB1bGxidW95IChoYW5kcylcIixcbiAgICBsZXZlbDogNCxcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiLCBcImFic1wiXSxcbiAgICBtYXRlcmlhbDogW1wicHVsbGJ1b3lcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGcmVlc3R5bGUgYnJlYXRoaW5nIGV2ZXJ5IDIgc3Ryb2tlc1wiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIldhcm11cCBmcmVlc3R5bGUgKGNvbWZvcnRhYmxlIHBhY2UpXCIsXG4gICAgbGV2ZWw6IDEsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJ3YXJtdXBcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJXYXJtdXAgYmFja3N0cm9rZSAoY29tZm9ydGFibGUgcGFjZSlcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ3YXJtdXBcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJXYXJtdXAgYnJlYXN0c3Ryb2tlIChjb21mb3J0YWJsZSBwYWNlKVwiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJicmVhc3RzdHJva2VcIixcbiAgICBibG9jazogW1wid2FybXVwXCJdLFxuICAgIG11c2NsZTogW1wicGVjc1wiLCBcImFic1wiLCBcImxlZ3NcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiV2FybXVwIGJ1dHRlcmZseSAoY29tZm9ydGFibGUgcGFjZSlcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiYnV0dGVyZmx5XCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCIsIFwicGVjc1wiLCBcImxlZ3NcIiwgXCJhYnNcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiV2FybXVwIG1lZGxleSAoY29tZm9ydGFibGUgcGFjZSlcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiYWxsXCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCIsIFwicGVjc1wiLCBcImxlZ3NcIiwgXCJhYnNcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiRnJlZXN0eWxlIGJyZWF0aGluZyBldmVyeSAzIHN0cm9rZXNcIixcbiAgICBsZXZlbDogMixcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIm1haW5cIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGcmVlc3R5bGUgd2l0aCB1bHRyYS1mYXN0IGZsaXB0dXJuc1wiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSBiYWxhbmNlZCBwcm9ncmVzc2lvblwiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSBoeXBveGljXCIsXG4gICAgbGV2ZWw6IDQsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJtYWluXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiRnJlZXN0eWxlIHdpdGggcGFkZGxlc1wiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCIsIFwicGVjc1wiXSxcbiAgICBtYXRlcmlhbDogW1wicGFkZGxlc1wiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSB3aXRoIGZpbnNcIixcbiAgICBsZXZlbDogMixcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIm1haW5cIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiLCBcImxlZ3NcIl0sXG4gICAgbWF0ZXJpYWw6IFtcImZpbnNcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGcmVlc3R5bGUgd2l0aCBwYWRkbGVzIGFuZCBmaW5zXCIsXG4gICAgbGV2ZWw6IDMsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJtYWluXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIiwgXCJwZWNzXCIsIFwibGVnc1wiXSxcbiAgICBtYXRlcmlhbDogW1wicGFkZGxlc1wiLCBcImZpbnNcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGcmVlc3R5bGUgd2l0aCBwYWRkbGVzIGFuZCBzbm9ya2VsXCIsXG4gICAgbGV2ZWw6IDMsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJtYWluXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIiwgXCJwZWNzXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJwYWRkbGVzXCIsIFwic25vcmtlbFwiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSB3aXRoIHNub3JrZWwgYW5kIGZpbnNcIixcbiAgICBsZXZlbDogMyxcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIm1haW5cIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiLCBcImxlZ3NcIl0sXG4gICAgbWF0ZXJpYWw6IFtcImZpbnNcIiwgXCJzbm9ya2VsXCJdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiRnJlZXN0eWxlIHdpdGggc25vcmtlbFwiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wiY29vbGRvd25cIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW1wic25vcmtlbFwiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJhY2tzdHJva2VcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJtYWluXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQmFja3N0cm9rZSA2IGtpY2tzIHBlciAyIHN0cm9rZXNcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIiwgXCJ3YXJtdXBcIl0sXG4gICAgbXVzY2xlOiBbXCJsZWdzXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkJhY2tzdHJva2Ugd2l0aCBmaW5zXCIsXG4gICAgbGV2ZWw6IDEsXG4gICAgc3Ryb2tlOiBcImJhY2tzdHJva2VcIixcbiAgICBibG9jazogW1wibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImxlZ3NcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJmaW5zXCJdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQmFja3N0cm9rZSB3aXRoIHBhZGRsZXNcIixcbiAgICBsZXZlbDogMixcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJtYWluXCIsIFwidGVjaG5pcXVlXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtcInBhZGRsZXNcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCYWNrc3Ryb2tlIHNsb3dpbmcgZG93biByaHl0aG1cIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJjb29sZG93blwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkRvdWJsZS1Bcm0gQmFja3N0cm9rZSwgM3MgcGF1c2VcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiYmFja3N0cm9rZVwiLFxuICAgIGJsb2NrOiBbXCJ0ZWNobmlxdWVcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCcmVhc3RzdHJva2VcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiYnJlYXN0c3Ryb2tlXCIsXG4gICAgYmxvY2s6IFtcIm1haW5cIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiLCBcInBlY3NcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQnJlYXN0c3Ryb2tlIHNsb3dpbmcgZG93biByaHl0aG1cIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiYnJlYXN0c3Ryb2tlXCIsXG4gICAgYmxvY2s6IFtcImNvb2xkb3duXCJdLFxuICAgIG11c2NsZTogW1wicGVjc1wiLCBcImFic1wiLCBcImxlZ3NcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQnV0dGVyZmx5XCIsXG4gICAgbGV2ZWw6IDUsXG4gICAgc3Ryb2tlOiBcImJ1dHRlcmZseVwiLFxuICAgIGJsb2NrOiBbXCJtYWluXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIiwgXCJhYnNcIl0sXG4gICAgbWF0ZXJpYWw6IFtdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQnV0dGVyZmx5IHdpdGggZmluc1wiLFxuICAgIGxldmVsOiA1LFxuICAgIHN0cm9rZTogXCJidXR0ZXJmbHlcIixcbiAgICBibG9jazogW1wibWFpblwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCIsIFwiYWJzXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJmaW5zXCJdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiQmFja3N0cm9rZSBkb2xwaGluIGtpY2sgd2l0aCBmaW5zXCIsXG4gICAgbGV2ZWw6IDQsXG4gICAgc3Ryb2tlOiBcImJhY2tzdHJva2VcIixcbiAgICBibG9jazogW1wibWFpblwiLCBcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImxlZ3NcIiwgXCJhYnNcIl0sXG4gICAgbWF0ZXJpYWw6IFtcImZpbnNcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCcmVhc3RzdHJva2Uga2lja2luZ1wiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJicmVhc3RzdHJva2VcIixcbiAgICBibG9jazogW1wiY29vbGRvd25cIiwgXCJ3YXJtdXBcIiwgXCJ0ZWNobmlxdWVcIl0sXG4gICAgbXVzY2xlOiBbXCJsZWdzXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJraWNrYm9hcmRcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJCb3cmQXJyb3cgZnJlZXN0eWxlIHdpdGggZmlucywgNiBraWNrc1wiLFxuICAgIGxldmVsOiA0LFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wibWFpblwiLCBcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImxlZ3NcIiwgXCJhcm1zXCIsIFwiYmFja1wiLCBcImFic1wiXSxcbiAgICBtYXRlcmlhbDogW1wiZmluc1wiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIktpY2sgc3dpdGNoIC0gbm8gYXJtc1wiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1widGVjaG5pcXVlXCJdLFxuICAgIG11c2NsZTogW1wibGVnc1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJTaW5nYXBvcmUgRnJlZXN0eWxlIChvbmUgc3Ryb2tlLCBvbmUgZG9nIGFybSkgKGYrcylcIixcbiAgICBsZXZlbDogNCxcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiLCBcInRlY2huaXF1ZVwiXSxcbiAgICBtdXNjbGU6IFtcImFybXNcIiwgXCJiYWNrXCJdLFxuICAgIG1hdGVyaWFsOiBbXCJmaW5zLCBzbm9ya2VsXCJdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiRnJlZXN0eWxlIHRvdWNoaW5nIGtpY2tib2FyZCBiZXR3ZWVuIGxlZ3NcIixcbiAgICBsZXZlbDogMSxcbiAgICBzdHJva2U6IFwiZnJlZXN0eWxlXCIsXG4gICAgYmxvY2s6IFtcIndhcm11cFwiLCBcImNvb2xkb3duXCIsIFwidGVjaG5pcXVlXCJdLFxuICAgIG11c2NsZTogW1wiYXJtc1wiLCBcImJhY2tcIl0sXG4gICAgbWF0ZXJpYWw6IFtcImtpY2tib2FyZFwiXSxcbiAgfSxcbiAge1xuICAgIGlkOiB1dWlkdjQoKSxcbiAgICBuYW1lOiBcIkZyZWVzdHlsZSByZXBlYXRpbmcgKDMgc3Ryb2tlcywgNiBraWNrcyBvbiBzaWRlKVwiLFxuICAgIGxldmVsOiAyLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wid2FybXVwXCIsIFwiY29vbGRvd25cIiwgXCJ0ZWNobmlxdWVcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW1wia2lja2JvYXJkXCJdLFxuICB9LFxuICB7XG4gICAgaWQ6IHV1aWR2NCgpLFxuICAgIG5hbWU6IFwiRnJlZXN0eWxlIHdpdGggcHVsbC1idW95IGJldHdlZW4gYW5rbGVzXCIsXG4gICAgbGV2ZWw6IDIsXG4gICAgc3Ryb2tlOiBcImZyZWVzdHlsZVwiLFxuICAgIGJsb2NrOiBbXCJ3YXJtdXBcIiwgXCJ0ZWNobmlxdWVcIl0sXG4gICAgbXVzY2xlOiBbXCJhYnNcIiwgXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW1wicHVsbGJ1b3lcIl0sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGcmVlc3R5bGUgd2l0aCBoYW5kIGV4dGVuc2lvbi9zbGlkaW5nIDMgc2Vjb25kc1wiLFxuICAgIGxldmVsOiAxLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wid2FybXVwXCIsIFwidGVjaG5pcXVlXCIsIFwiY29vbGRvd25cIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG4gIHtcbiAgICBpZDogdXVpZHY0KCksXG4gICAgbmFtZTogXCJGaW5nZXIgZHJhZ3Mgc3VyZmFjZVwiLFxuICAgIGxldmVsOiAzLFxuICAgIHN0cm9rZTogXCJmcmVlc3R5bGVcIixcbiAgICBibG9jazogW1wid2FybXVwXCIsIFwiY29vbGRvd25cIiwgXCJ0ZWNobmlxdWVcIl0sXG4gICAgbXVzY2xlOiBbXCJhcm1zXCIsIFwiYmFja1wiLCBcImFic1wiXSxcbiAgICBtYXRlcmlhbDogW10sXG4gIH0sXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBleGVyY2lzZXNMaXN0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2lzUGxhY2Vob2xkZXIoYSkge1xuICByZXR1cm4gYSAhPSBudWxsICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiBhWydAQGZ1bmN0aW9uYWwvcGxhY2Vob2xkZXInXSA9PT0gdHJ1ZTtcbn0iLCJpbXBvcnQgX2lzUGxhY2Vob2xkZXIgZnJvbSBcIi4vX2lzUGxhY2Vob2xkZXIuanNcIjtcbi8qKlxuICogT3B0aW1pemVkIGludGVybmFsIG9uZS1hcml0eSBjdXJyeSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGN1cnJpZWQgZnVuY3Rpb24uXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2N1cnJ5MShmbikge1xuICByZXR1cm4gZnVuY3Rpb24gZjEoYSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IF9pc1BsYWNlaG9sZGVyKGEpKSB7XG4gICAgICByZXR1cm4gZjE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcbn0iLCJpbXBvcnQgX2N1cnJ5MSBmcm9tIFwiLi9fY3VycnkxLmpzXCI7XG5pbXBvcnQgX2lzUGxhY2Vob2xkZXIgZnJvbSBcIi4vX2lzUGxhY2Vob2xkZXIuanNcIjtcbi8qKlxuICogT3B0aW1pemVkIGludGVybmFsIHR3by1hcml0eSBjdXJyeSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGN1cnJpZWQgZnVuY3Rpb24uXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2N1cnJ5Mihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gZjIoYSwgYikge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZjI7XG5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIF9pc1BsYWNlaG9sZGVyKGEpID8gZjIgOiBfY3VycnkxKGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgIHJldHVybiBmbihhLCBfYik7XG4gICAgICAgIH0pO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgPyBmMiA6IF9pc1BsYWNlaG9sZGVyKGEpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICByZXR1cm4gZm4oX2EsIGIpO1xuICAgICAgICB9KSA6IF9pc1BsYWNlaG9sZGVyKGIpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICByZXR1cm4gZm4oYSwgX2IpO1xuICAgICAgICB9KSA6IGZuKGEsIGIpO1xuICAgIH1cbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlGcm9tSXRlcmF0b3IoaXRlcikge1xuICB2YXIgbGlzdCA9IFtdO1xuICB2YXIgbmV4dDtcblxuICB3aGlsZSAoIShuZXh0ID0gaXRlci5uZXh0KCkpLmRvbmUpIHtcbiAgICBsaXN0LnB1c2gobmV4dC52YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbGlzdDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5jbHVkZXNXaXRoKHByZWQsIHgsIGxpc3QpIHtcbiAgdmFyIGlkeCA9IDA7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcblxuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgaWYgKHByZWQoeCwgbGlzdFtpZHhdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWR4ICs9IDE7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2hhcyhwcm9wLCBvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufSIsIi8vIEJhc2VkIG9uIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuZnVuY3Rpb24gX29iamVjdElzKGEsIGIpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoYSA9PT0gYikge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIGEgIT09IGEgJiYgYiAhPT0gYjtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgT2JqZWN0LmlzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmlzIDogX29iamVjdElzOyIsImltcG9ydCBfaGFzIGZyb20gXCIuL19oYXMuanNcIjtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBfaXNBcmd1bWVudHMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcmd1bWVudHMpID09PSAnW29iamVjdCBBcmd1bWVudHNdJyA/IGZ1bmN0aW9uIF9pc0FyZ3VtZW50cyh4KSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuICB9IDogZnVuY3Rpb24gX2lzQXJndW1lbnRzKHgpIHtcbiAgICByZXR1cm4gX2hhcygnY2FsbGVlJywgeCk7XG4gIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IF9pc0FyZ3VtZW50czsiLCJpbXBvcnQgX2N1cnJ5MSBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkxLmpzXCI7XG5pbXBvcnQgX2hhcyBmcm9tIFwiLi9pbnRlcm5hbC9faGFzLmpzXCI7XG5pbXBvcnQgX2lzQXJndW1lbnRzIGZyb20gXCIuL2ludGVybmFsL19pc0FyZ3VtZW50cy5qc1wiOyAvLyBjb3ZlciBJRSA8IDkga2V5cyBpc3N1ZXNcblxudmFyIGhhc0VudW1CdWcgPSAhXG4vKiNfX1BVUkVfXyovXG57XG4gIHRvU3RyaW5nOiBudWxsXG59LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpO1xudmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsnY29uc3RydWN0b3InLCAndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2hhc093blByb3BlcnR5JywgJ3RvTG9jYWxlU3RyaW5nJ107IC8vIFNhZmFyaSBidWdcblxudmFyIGhhc0FyZ3NFbnVtQnVnID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHJldHVybiBhcmd1bWVudHMucHJvcGVydHlJc0VudW1lcmFibGUoJ2xlbmd0aCcpO1xufSgpO1xuXG52YXIgY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyhsaXN0LCBpdGVtKSB7XG4gIHZhciBpZHggPSAwO1xuXG4gIHdoaWxlIChpZHggPCBsaXN0Lmxlbmd0aCkge1xuICAgIGlmIChsaXN0W2lkeF0gPT09IGl0ZW0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlkeCArPSAxO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbi8qKlxuICogUmV0dXJucyBhIGxpc3QgY29udGFpbmluZyB0aGUgbmFtZXMgb2YgYWxsIHRoZSBlbnVtZXJhYmxlIG93biBwcm9wZXJ0aWVzIG9mXG4gKiB0aGUgc3VwcGxpZWQgb2JqZWN0LlxuICogTm90ZSB0aGF0IHRoZSBvcmRlciBvZiB0aGUgb3V0cHV0IGFycmF5IGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIGNvbnNpc3RlbnRcbiAqIGFjcm9zcyBkaWZmZXJlbnQgSlMgcGxhdGZvcm1zLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHNpZyB7azogdn0gLT4gW2tdXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gZXh0cmFjdCBwcm9wZXJ0aWVzIGZyb21cbiAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiB0aGUgb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMuXG4gKiBAc2VlIFIua2V5c0luLCBSLnZhbHVlc1xuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIua2V5cyh7YTogMSwgYjogMiwgYzogM30pOyAvLz0+IFsnYScsICdiJywgJ2MnXVxuICovXG5cblxudmFyIGtleXMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgIWhhc0FyZ3NFbnVtQnVnID9cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24ga2V5cyhvYmopIHtcbiAgcmV0dXJuIE9iamVjdChvYmopICE9PSBvYmogPyBbXSA6IE9iamVjdC5rZXlzKG9iaik7XG59KSA6XG4vKiNfX1BVUkVfXyovXG5fY3VycnkxKGZ1bmN0aW9uIGtleXMob2JqKSB7XG4gIGlmIChPYmplY3Qob2JqKSAhPT0gb2JqKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIHByb3AsIG5JZHg7XG4gIHZhciBrcyA9IFtdO1xuXG4gIHZhciBjaGVja0FyZ3NMZW5ndGggPSBoYXNBcmdzRW51bUJ1ZyAmJiBfaXNBcmd1bWVudHMob2JqKTtcblxuICBmb3IgKHByb3AgaW4gb2JqKSB7XG4gICAgaWYgKF9oYXMocHJvcCwgb2JqKSAmJiAoIWNoZWNrQXJnc0xlbmd0aCB8fCBwcm9wICE9PSAnbGVuZ3RoJykpIHtcbiAgICAgIGtzW2tzLmxlbmd0aF0gPSBwcm9wO1xuICAgIH1cbiAgfVxuXG4gIGlmIChoYXNFbnVtQnVnKSB7XG4gICAgbklkeCA9IG5vbkVudW1lcmFibGVQcm9wcy5sZW5ndGggLSAxO1xuXG4gICAgd2hpbGUgKG5JZHggPj0gMCkge1xuICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tuSWR4XTtcblxuICAgICAgaWYgKF9oYXMocHJvcCwgb2JqKSAmJiAhY29udGFpbnMoa3MsIHByb3ApKSB7XG4gICAgICAgIGtzW2tzLmxlbmd0aF0gPSBwcm9wO1xuICAgICAgfVxuXG4gICAgICBuSWR4IC09IDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGtzO1xufSk7XG5leHBvcnQgZGVmYXVsdCBrZXlzOyIsImltcG9ydCBfY3VycnkxIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTEuanNcIjtcbi8qKlxuICogR2l2ZXMgYSBzaW5nbGUtd29yZCBzdHJpbmcgZGVzY3JpcHRpb24gb2YgdGhlIChuYXRpdmUpIHR5cGUgb2YgYSB2YWx1ZSxcbiAqIHJldHVybmluZyBzdWNoIGFuc3dlcnMgYXMgJ09iamVjdCcsICdOdW1iZXInLCAnQXJyYXknLCBvciAnTnVsbCcuIERvZXMgbm90XG4gKiBhdHRlbXB0IHRvIGRpc3Rpbmd1aXNoIHVzZXIgT2JqZWN0IHR5cGVzIGFueSBmdXJ0aGVyLCByZXBvcnRpbmcgdGhlbSBhbGwgYXNcbiAqICdPYmplY3QnLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjguMFxuICogQGNhdGVnb3J5IFR5cGVcbiAqIEBzaWcgKCogLT4geyp9KSAtPiBTdHJpbmdcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi50eXBlKHt9KTsgLy89PiBcIk9iamVjdFwiXG4gKiAgICAgIFIudHlwZSgxKTsgLy89PiBcIk51bWJlclwiXG4gKiAgICAgIFIudHlwZShmYWxzZSk7IC8vPT4gXCJCb29sZWFuXCJcbiAqICAgICAgUi50eXBlKCdzJyk7IC8vPT4gXCJTdHJpbmdcIlxuICogICAgICBSLnR5cGUobnVsbCk7IC8vPT4gXCJOdWxsXCJcbiAqICAgICAgUi50eXBlKFtdKTsgLy89PiBcIkFycmF5XCJcbiAqICAgICAgUi50eXBlKC9bQS16XS8pOyAvLz0+IFwiUmVnRXhwXCJcbiAqICAgICAgUi50eXBlKCgpID0+IHt9KTsgLy89PiBcIkZ1bmN0aW9uXCJcbiAqICAgICAgUi50eXBlKHVuZGVmaW5lZCk7IC8vPT4gXCJVbmRlZmluZWRcIlxuICovXG5cbnZhciB0eXBlID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24gdHlwZSh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PT0gbnVsbCA/ICdOdWxsJyA6IHZhbCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdHlwZTsiLCJpbXBvcnQgX2FycmF5RnJvbUl0ZXJhdG9yIGZyb20gXCIuL19hcnJheUZyb21JdGVyYXRvci5qc1wiO1xuaW1wb3J0IF9pbmNsdWRlc1dpdGggZnJvbSBcIi4vX2luY2x1ZGVzV2l0aC5qc1wiO1xuaW1wb3J0IF9mdW5jdGlvbk5hbWUgZnJvbSBcIi4vX2Z1bmN0aW9uTmFtZS5qc1wiO1xuaW1wb3J0IF9oYXMgZnJvbSBcIi4vX2hhcy5qc1wiO1xuaW1wb3J0IF9vYmplY3RJcyBmcm9tIFwiLi9fb2JqZWN0SXMuanNcIjtcbmltcG9ydCBrZXlzIGZyb20gXCIuLi9rZXlzLmpzXCI7XG5pbXBvcnQgdHlwZSBmcm9tIFwiLi4vdHlwZS5qc1wiO1xuLyoqXG4gKiBwcml2YXRlIF91bmlxQ29udGVudEVxdWFscyBmdW5jdGlvbi5cbiAqIFRoYXQgZnVuY3Rpb24gaXMgY2hlY2tpbmcgZXF1YWxpdHkgb2YgMiBpdGVyYXRvciBjb250ZW50cyB3aXRoIDIgYXNzdW1wdGlvbnNcbiAqIC0gaXRlcmF0b3JzIGxlbmd0aHMgYXJlIHRoZSBzYW1lXG4gKiAtIGl0ZXJhdG9ycyB2YWx1ZXMgYXJlIHVuaXF1ZVxuICpcbiAqIGZhbHNlLXBvc2l0aXZlIHJlc3VsdCB3aWxsIGJlIHJldHVybmVkIGZvciBjb21wYXJpc2lvbiBvZiwgZS5nLlxuICogLSBbMSwyLDNdIGFuZCBbMSwyLDMsNF1cbiAqIC0gWzEsMSwxXSBhbmQgWzEsMiwzXVxuICogKi9cblxuZnVuY3Rpb24gX3VuaXFDb250ZW50RXF1YWxzKGFJdGVyYXRvciwgYkl0ZXJhdG9yLCBzdGFja0EsIHN0YWNrQikge1xuICB2YXIgYSA9IF9hcnJheUZyb21JdGVyYXRvcihhSXRlcmF0b3IpO1xuXG4gIHZhciBiID0gX2FycmF5RnJvbUl0ZXJhdG9yKGJJdGVyYXRvcik7XG5cbiAgZnVuY3Rpb24gZXEoX2EsIF9iKSB7XG4gICAgcmV0dXJuIF9lcXVhbHMoX2EsIF9iLCBzdGFja0Euc2xpY2UoKSwgc3RhY2tCLnNsaWNlKCkpO1xuICB9IC8vIGlmICphKiBhcnJheSBjb250YWlucyBhbnkgZWxlbWVudCB0aGF0IGlzIG5vdCBpbmNsdWRlZCBpbiAqYipcblxuXG4gIHJldHVybiAhX2luY2x1ZGVzV2l0aChmdW5jdGlvbiAoYiwgYUl0ZW0pIHtcbiAgICByZXR1cm4gIV9pbmNsdWRlc1dpdGgoZXEsIGFJdGVtLCBiKTtcbiAgfSwgYiwgYSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9lcXVhbHMoYSwgYiwgc3RhY2tBLCBzdGFja0IpIHtcbiAgaWYgKF9vYmplY3RJcyhhLCBiKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHR5cGVBID0gdHlwZShhKTtcblxuICBpZiAodHlwZUEgIT09IHR5cGUoYikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYVsnZmFudGFzeS1sYW5kL2VxdWFscyddID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBiWydmYW50YXN5LWxhbmQvZXF1YWxzJ10gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFbJ2ZhbnRhc3ktbGFuZC9lcXVhbHMnXSA9PT0gJ2Z1bmN0aW9uJyAmJiBhWydmYW50YXN5LWxhbmQvZXF1YWxzJ10oYikgJiYgdHlwZW9mIGJbJ2ZhbnRhc3ktbGFuZC9lcXVhbHMnXSA9PT0gJ2Z1bmN0aW9uJyAmJiBiWydmYW50YXN5LWxhbmQvZXF1YWxzJ10oYSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEuZXF1YWxzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBiLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0eXBlb2YgYS5lcXVhbHMgPT09ICdmdW5jdGlvbicgJiYgYS5lcXVhbHMoYikgJiYgdHlwZW9mIGIuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmIGIuZXF1YWxzKGEpO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlQSkge1xuICAgIGNhc2UgJ0FyZ3VtZW50cyc6XG4gICAgY2FzZSAnQXJyYXknOlxuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICBpZiAodHlwZW9mIGEuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgJiYgX2Z1bmN0aW9uTmFtZShhLmNvbnN0cnVjdG9yKSA9PT0gJ1Byb21pc2UnKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ0Jvb2xlYW4nOlxuICAgIGNhc2UgJ051bWJlcic6XG4gICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgIGlmICghKHR5cGVvZiBhID09PSB0eXBlb2YgYiAmJiBfb2JqZWN0SXMoYS52YWx1ZU9mKCksIGIudmFsdWVPZigpKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgaWYgKCFfb2JqZWN0SXMoYS52YWx1ZU9mKCksIGIudmFsdWVPZigpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgcmV0dXJuIGEubmFtZSA9PT0gYi5uYW1lICYmIGEubWVzc2FnZSA9PT0gYi5tZXNzYWdlO1xuXG4gICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgIGlmICghKGEuc291cmNlID09PSBiLnNvdXJjZSAmJiBhLmdsb2JhbCA9PT0gYi5nbG9iYWwgJiYgYS5pZ25vcmVDYXNlID09PSBiLmlnbm9yZUNhc2UgJiYgYS5tdWx0aWxpbmUgPT09IGIubXVsdGlsaW5lICYmIGEuc3RpY2t5ID09PSBiLnN0aWNreSAmJiBhLnVuaWNvZGUgPT09IGIudW5pY29kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfVxuXG4gIHZhciBpZHggPSBzdGFja0EubGVuZ3RoIC0gMTtcblxuICB3aGlsZSAoaWR4ID49IDApIHtcbiAgICBpZiAoc3RhY2tBW2lkeF0gPT09IGEpIHtcbiAgICAgIHJldHVybiBzdGFja0JbaWR4XSA9PT0gYjtcbiAgICB9XG5cbiAgICBpZHggLT0gMTtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZUEpIHtcbiAgICBjYXNlICdNYXAnOlxuICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF91bmlxQ29udGVudEVxdWFscyhhLmVudHJpZXMoKSwgYi5lbnRyaWVzKCksIHN0YWNrQS5jb25jYXQoW2FdKSwgc3RhY2tCLmNvbmNhdChbYl0pKTtcblxuICAgIGNhc2UgJ1NldCc6XG4gICAgICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3VuaXFDb250ZW50RXF1YWxzKGEudmFsdWVzKCksIGIudmFsdWVzKCksIHN0YWNrQS5jb25jYXQoW2FdKSwgc3RhY2tCLmNvbmNhdChbYl0pKTtcblxuICAgIGNhc2UgJ0FyZ3VtZW50cyc6XG4gICAgY2FzZSAnQXJyYXknOlxuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgY2FzZSAnQm9vbGVhbic6XG4gICAgY2FzZSAnTnVtYmVyJzpcbiAgICBjYXNlICdTdHJpbmcnOlxuICAgIGNhc2UgJ0RhdGUnOlxuICAgIGNhc2UgJ0Vycm9yJzpcbiAgICBjYXNlICdSZWdFeHAnOlxuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgIGNhc2UgJ0FycmF5QnVmZmVyJzpcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIFZhbHVlcyBvZiBvdGhlciB0eXBlcyBhcmUgb25seSBlcXVhbCBpZiBpZGVudGljYWwuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBrZXlzKGEpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXMoYikubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGV4dGVuZGVkU3RhY2tBID0gc3RhY2tBLmNvbmNhdChbYV0pO1xuICB2YXIgZXh0ZW5kZWRTdGFja0IgPSBzdGFja0IuY29uY2F0KFtiXSk7XG4gIGlkeCA9IGtleXNBLmxlbmd0aCAtIDE7XG5cbiAgd2hpbGUgKGlkeCA+PSAwKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIShfaGFzKGtleSwgYikgJiYgX2VxdWFscyhiW2tleV0sIGFba2V5XSwgZXh0ZW5kZWRTdGFja0EsIGV4dGVuZGVkU3RhY2tCKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZHggLT0gMTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9mdW5jdGlvbk5hbWUoZikge1xuICAvLyBTdHJpbmcoeCA9PiB4KSBldmFsdWF0ZXMgdG8gXCJ4ID0+IHhcIiwgc28gdGhlIHBhdHRlcm4gbWF5IG5vdCBtYXRjaC5cbiAgdmFyIG1hdGNoID0gU3RyaW5nKGYpLm1hdGNoKC9eZnVuY3Rpb24gKFxcdyopLyk7XG4gIHJldHVybiBtYXRjaCA9PSBudWxsID8gJycgOiBtYXRjaFsxXTtcbn0iLCJpbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX2VxdWFscyBmcm9tIFwiLi9pbnRlcm5hbC9fZXF1YWxzLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGl0cyBhcmd1bWVudHMgYXJlIGVxdWl2YWxlbnQsIGBmYWxzZWAgb3RoZXJ3aXNlLiBIYW5kbGVzXG4gKiBjeWNsaWNhbCBkYXRhIHN0cnVjdHVyZXMuXG4gKlxuICogRGlzcGF0Y2hlcyBzeW1tZXRyaWNhbGx5IHRvIHRoZSBgZXF1YWxzYCBtZXRob2RzIG9mIGJvdGggYXJndW1lbnRzLCBpZlxuICogcHJlc2VudC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xNS4wXG4gKiBAY2F0ZWdvcnkgUmVsYXRpb25cbiAqIEBzaWcgYSAtPiBiIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0gYVxuICogQHBhcmFtIHsqfSBiXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIuZXF1YWxzKDEsIDEpOyAvLz0+IHRydWVcbiAqICAgICAgUi5lcXVhbHMoMSwgJzEnKTsgLy89PiBmYWxzZVxuICogICAgICBSLmVxdWFscyhbMSwgMiwgM10sIFsxLCAyLCAzXSk7IC8vPT4gdHJ1ZVxuICpcbiAqICAgICAgY29uc3QgYSA9IHt9OyBhLnYgPSBhO1xuICogICAgICBjb25zdCBiID0ge307IGIudiA9IGI7XG4gKiAgICAgIFIuZXF1YWxzKGEsIGIpOyAvLz0+IHRydWVcbiAqL1xuXG52YXIgZXF1YWxzID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTIoZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIF9lcXVhbHMoYSwgYiwgW10sIFtdKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBlcXVhbHM7IiwiaW1wb3J0IF9pbmRleE9mIGZyb20gXCIuL19pbmRleE9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5jbHVkZXMoYSwgbGlzdCkge1xuICByZXR1cm4gX2luZGV4T2YobGlzdCwgYSwgMCkgPj0gMDtcbn0iLCJpbXBvcnQgZXF1YWxzIGZyb20gXCIuLi9lcXVhbHMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmRleE9mKGxpc3QsIGEsIGlkeCkge1xuICB2YXIgaW5mLCBpdGVtOyAvLyBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiBkb2Vzbid0IGV4aXN0IGJlbG93IElFOVxuXG4gIGlmICh0eXBlb2YgbGlzdC5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgYSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgaWYgKGEgPT09IDApIHtcbiAgICAgICAgICAvLyBtYW51YWxseSBjcmF3bCB0aGUgbGlzdCB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuICswIGFuZCAtMFxuICAgICAgICAgIGluZiA9IDEgLyBhO1xuXG4gICAgICAgICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVtID0gbGlzdFtpZHhdO1xuXG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gMCAmJiAxIC8gaXRlbSA9PT0gaW5mKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlkeCArPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChhICE9PSBhKSB7XG4gICAgICAgICAgLy8gTmFOXG4gICAgICAgICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVtID0gbGlzdFtpZHhdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdudW1iZXInICYmIGl0ZW0gIT09IGl0ZW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGlkeDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWR4ICs9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9IC8vIG5vbi16ZXJvIG51bWJlcnMgY2FuIHV0aWxpc2UgU2V0XG5cblxuICAgICAgICByZXR1cm4gbGlzdC5pbmRleE9mKGEsIGlkeCk7XG4gICAgICAvLyBhbGwgdGhlc2UgdHlwZXMgY2FuIHV0aWxpc2UgU2V0XG5cbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiBsaXN0LmluZGV4T2YoYSwgaWR4KTtcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKGEgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBudWxsIGNhbiB1dGlsaXNlIFNldFxuICAgICAgICAgIHJldHVybiBsaXN0LmluZGV4T2YoYSwgaWR4KTtcbiAgICAgICAgfVxuXG4gICAgfVxuICB9IC8vIGFueXRoaW5nIGVsc2Ugbm90IGNvdmVyZWQgYWJvdmUsIGRlZmVyIHRvIFIuZXF1YWxzXG5cblxuICB3aGlsZSAoaWR4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICBpZiAoZXF1YWxzKGxpc3RbaWR4XSwgYSkpIHtcbiAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuXG4gICAgaWR4ICs9IDE7XG4gIH1cblxuICByZXR1cm4gLTE7XG59IiwiaW1wb3J0IF9pbmNsdWRlcyBmcm9tIFwiLi9faW5jbHVkZXMuanNcIjtcblxudmFyIF9TZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBfU2V0KCkge1xuICAgIC8qIGdsb2JhbHMgU2V0ICovXG4gICAgdGhpcy5fbmF0aXZlU2V0ID0gdHlwZW9mIFNldCA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBTZXQoKSA6IG51bGw7XG4gICAgdGhpcy5faXRlbXMgPSB7fTtcbiAgfVxuXG4gIC8vIHVudGlsIHdlIGZpZ3VyZSBvdXQgd2h5IGpzZG9jIGNob2tlcyBvbiB0aGlzXG4gIC8vIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIGFkZCB0byB0aGUgU2V0XG4gIC8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBpdGVtIGRpZCBub3QgZXhpc3QgcHJpb3IsIG90aGVyd2lzZSBmYWxzZVxuICAvL1xuICBfU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiAhaGFzT3JBZGQoaXRlbSwgdHJ1ZSwgdGhpcyk7XG4gIH07IC8vXG4gIC8vIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIGNoZWNrIGZvciBleGlzdGVuY2UgaW4gdGhlIFNldFxuICAvLyBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgaXRlbSBleGlzdHMgaW4gdGhlIFNldCwgb3RoZXJ3aXNlIGZhbHNlXG4gIC8vXG5cblxuICBfU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBoYXNPckFkZChpdGVtLCBmYWxzZSwgdGhpcyk7XG4gIH07IC8vXG4gIC8vIENvbWJpbmVzIHRoZSBsb2dpYyBmb3IgY2hlY2tpbmcgd2hldGhlciBhbiBpdGVtIGlzIGEgbWVtYmVyIG9mIHRoZSBzZXQgYW5kXG4gIC8vIGZvciBhZGRpbmcgYSBuZXcgaXRlbSB0byB0aGUgc2V0LlxuICAvL1xuICAvLyBAcGFyYW0gaXRlbSAgICAgICBUaGUgaXRlbSB0byBjaGVjayBvciBhZGQgdG8gdGhlIFNldCBpbnN0YW5jZS5cbiAgLy8gQHBhcmFtIHNob3VsZEFkZCAgSWYgdHJ1ZSwgdGhlIGl0ZW0gd2lsbCBiZSBhZGRlZCB0byB0aGUgc2V0IGlmIGl0IGRvZXNuJ3RcbiAgLy8gICAgICAgICAgICAgICAgICAgYWxyZWFkeSBleGlzdC5cbiAgLy8gQHBhcmFtIHNldCAgICAgICAgVGhlIHNldCBpbnN0YW5jZSB0byBjaGVjayBvciBhZGQgdG8uXG4gIC8vIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIGl0ZW0gYWxyZWFkeSBleGlzdGVkLCBvdGhlcndpc2UgZmFsc2UuXG4gIC8vXG5cblxuICByZXR1cm4gX1NldDtcbn0oKTtcblxuZnVuY3Rpb24gaGFzT3JBZGQoaXRlbSwgc2hvdWxkQWRkLCBzZXQpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgaXRlbTtcbiAgdmFyIHByZXZTaXplLCBuZXdTaXplO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIC8vIGRpc3Rpbmd1aXNoIGJldHdlZW4gKzAgYW5kIC0wXG4gICAgICBpZiAoaXRlbSA9PT0gMCAmJiAxIC8gaXRlbSA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgIGlmIChzZXQuX2l0ZW1zWyctMCddKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICAgICAgc2V0Ll9pdGVtc1snLTAnXSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IC8vIHRoZXNlIHR5cGVzIGNhbiBhbGwgdXRpbGlzZSB0aGUgbmF0aXZlIFNldFxuXG5cbiAgICAgIGlmIChzZXQuX25hdGl2ZVNldCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoc2hvdWxkQWRkKSB7XG4gICAgICAgICAgcHJldlNpemUgPSBzZXQuX25hdGl2ZVNldC5zaXplO1xuXG4gICAgICAgICAgc2V0Ll9uYXRpdmVTZXQuYWRkKGl0ZW0pO1xuXG4gICAgICAgICAgbmV3U2l6ZSA9IHNldC5fbmF0aXZlU2V0LnNpemU7XG4gICAgICAgICAgcmV0dXJuIG5ld1NpemUgPT09IHByZXZTaXplO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzZXQuX25hdGl2ZVNldC5oYXMoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghKHR5cGUgaW4gc2V0Ll9pdGVtcykpIHtcbiAgICAgICAgICBpZiAoc2hvdWxkQWRkKSB7XG4gICAgICAgICAgICBzZXQuX2l0ZW1zW3R5cGVdID0ge307XG4gICAgICAgICAgICBzZXQuX2l0ZW1zW3R5cGVdW2l0ZW1dID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbSBpbiBzZXQuX2l0ZW1zW3R5cGVdKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICAgICAgc2V0Ll9pdGVtc1t0eXBlXVtpdGVtXSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIC8vIHNldC5faXRlbXNbJ2Jvb2xlYW4nXSBob2xkcyBhIHR3byBlbGVtZW50IGFycmF5XG4gICAgICAvLyByZXByZXNlbnRpbmcgWyBmYWxzZUV4aXN0cywgdHJ1ZUV4aXN0cyBdXG4gICAgICBpZiAodHlwZSBpbiBzZXQuX2l0ZW1zKSB7XG4gICAgICAgIHZhciBiSWR4ID0gaXRlbSA/IDEgOiAwO1xuXG4gICAgICAgIGlmIChzZXQuX2l0ZW1zW3R5cGVdW2JJZHhdKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICAgICAgc2V0Ll9pdGVtc1t0eXBlXVtiSWR4XSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2hvdWxkQWRkKSB7XG4gICAgICAgICAgc2V0Ll9pdGVtc1t0eXBlXSA9IGl0ZW0gPyBbZmFsc2UsIHRydWVdIDogW3RydWUsIGZhbHNlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIC8vIGNvbXBhcmUgZnVuY3Rpb25zIGZvciByZWZlcmVuY2UgZXF1YWxpdHlcbiAgICAgIGlmIChzZXQuX25hdGl2ZVNldCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoc2hvdWxkQWRkKSB7XG4gICAgICAgICAgcHJldlNpemUgPSBzZXQuX25hdGl2ZVNldC5zaXplO1xuXG4gICAgICAgICAgc2V0Ll9uYXRpdmVTZXQuYWRkKGl0ZW0pO1xuXG4gICAgICAgICAgbmV3U2l6ZSA9IHNldC5fbmF0aXZlU2V0LnNpemU7XG4gICAgICAgICAgcmV0dXJuIG5ld1NpemUgPT09IHByZXZTaXplO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzZXQuX25hdGl2ZVNldC5oYXMoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghKHR5cGUgaW4gc2V0Ll9pdGVtcykpIHtcbiAgICAgICAgICBpZiAoc2hvdWxkQWRkKSB7XG4gICAgICAgICAgICBzZXQuX2l0ZW1zW3R5cGVdID0gW2l0ZW1dO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghX2luY2x1ZGVzKGl0ZW0sIHNldC5faXRlbXNbdHlwZV0pKSB7XG4gICAgICAgICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICAgICAgc2V0Ll9pdGVtc1t0eXBlXS5wdXNoKGl0ZW0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIGlmIChzZXQuX2l0ZW1zW3R5cGVdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICAgIHNldC5faXRlbXNbdHlwZV0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmIChpdGVtID09PSBudWxsKSB7XG4gICAgICAgIGlmICghc2V0Ll9pdGVtc1snbnVsbCddKSB7XG4gICAgICAgICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICAgICAgc2V0Ll9pdGVtc1snbnVsbCddID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblxuICAgIGRlZmF1bHQ6XG4gICAgICAvLyByZWR1Y2UgdGhlIHNlYXJjaCBzaXplIG9mIGhldGVyb2dlbmVvdXMgc2V0cyBieSBjcmVhdGluZyBidWNrZXRzXG4gICAgICAvLyBmb3IgZWFjaCB0eXBlLlxuICAgICAgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVtKTtcblxuICAgICAgaWYgKCEodHlwZSBpbiBzZXQuX2l0ZW1zKSkge1xuICAgICAgICBpZiAoc2hvdWxkQWRkKSB7XG4gICAgICAgICAgc2V0Ll9pdGVtc1t0eXBlXSA9IFtpdGVtXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy8gc2NhbiB0aHJvdWdoIGFsbCBwcmV2aW91c2x5IGFwcGxpZWQgaXRlbXNcblxuXG4gICAgICBpZiAoIV9pbmNsdWRlcyhpdGVtLCBzZXQuX2l0ZW1zW3R5cGVdKSkge1xuICAgICAgICBpZiAoc2hvdWxkQWRkKSB7XG4gICAgICAgICAgc2V0Ll9pdGVtc1t0eXBlXS5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSAvLyBBIHNpbXBsZSBTZXQgdHlwZSB0aGF0IGhvbm91cnMgUi5lcXVhbHMgc2VtYW50aWNzXG5cblxuZXhwb3J0IGRlZmF1bHQgX1NldDsiLCJpbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX1NldCBmcm9tIFwiLi9pbnRlcm5hbC9fU2V0LmpzXCI7XG4vKipcbiAqIEZpbmRzIHRoZSBzZXQgKGkuZS4gbm8gZHVwbGljYXRlcykgb2YgYWxsIGVsZW1lbnRzIGluIHRoZSBmaXJzdCBsaXN0IG5vdFxuICogY29udGFpbmVkIGluIHRoZSBzZWNvbmQgbGlzdC4gT2JqZWN0cyBhbmQgQXJyYXlzIGFyZSBjb21wYXJlZCBpbiB0ZXJtcyBvZlxuICogdmFsdWUgZXF1YWxpdHksIG5vdCByZWZlcmVuY2UgZXF1YWxpdHkuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgUmVsYXRpb25cbiAqIEBzaWcgWypdIC0+IFsqXSAtPiBbKl1cbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3QxIFRoZSBmaXJzdCBsaXN0LlxuICogQHBhcmFtIHtBcnJheX0gbGlzdDIgVGhlIHNlY29uZCBsaXN0LlxuICogQHJldHVybiB7QXJyYXl9IFRoZSBlbGVtZW50cyBpbiBgbGlzdDFgIHRoYXQgYXJlIG5vdCBpbiBgbGlzdDJgLlxuICogQHNlZSBSLmRpZmZlcmVuY2VXaXRoLCBSLnN5bW1ldHJpY0RpZmZlcmVuY2UsIFIuc3ltbWV0cmljRGlmZmVyZW5jZVdpdGgsIFIud2l0aG91dFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIuZGlmZmVyZW5jZShbMSwyLDMsNF0sIFs3LDYsNSw0LDNdKTsgLy89PiBbMSwyXVxuICogICAgICBSLmRpZmZlcmVuY2UoWzcsNiw1LDQsM10sIFsxLDIsMyw0XSk7IC8vPT4gWzcsNiw1XVxuICogICAgICBSLmRpZmZlcmVuY2UoW3thOiAxfSwge2I6IDJ9XSwgW3thOiAxfSwge2M6IDN9XSkgLy89PiBbe2I6IDJ9XVxuICovXG5cbnZhciBkaWZmZXJlbmNlID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTIoZnVuY3Rpb24gZGlmZmVyZW5jZShmaXJzdCwgc2Vjb25kKSB7XG4gIHZhciBvdXQgPSBbXTtcbiAgdmFyIGlkeCA9IDA7XG4gIHZhciBmaXJzdExlbiA9IGZpcnN0Lmxlbmd0aDtcbiAgdmFyIHNlY29uZExlbiA9IHNlY29uZC5sZW5ndGg7XG4gIHZhciB0b0ZpbHRlck91dCA9IG5ldyBfU2V0KCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWNvbmRMZW47IGkgKz0gMSkge1xuICAgIHRvRmlsdGVyT3V0LmFkZChzZWNvbmRbaV0pO1xuICB9XG5cbiAgd2hpbGUgKGlkeCA8IGZpcnN0TGVuKSB7XG4gICAgaWYgKHRvRmlsdGVyT3V0LmFkZChmaXJzdFtpZHhdKSkge1xuICAgICAgb3V0W291dC5sZW5ndGhdID0gZmlyc3RbaWR4XTtcbiAgICB9XG5cbiAgICBpZHggKz0gMTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGlmZmVyZW5jZTsiLCIvKipcbiAqIFByaXZhdGUgYGNvbmNhdGAgZnVuY3Rpb24gdG8gbWVyZ2UgdHdvIGFycmF5LWxpa2Ugb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxBcmd1bWVudHN9IFtzZXQxPVtdXSBBbiBhcnJheS1saWtlIG9iamVjdC5cbiAqIEBwYXJhbSB7QXJyYXl8QXJndW1lbnRzfSBbc2V0Mj1bXV0gQW4gYXJyYXktbGlrZSBvYmplY3QuXG4gKiBAcmV0dXJuIHtBcnJheX0gQSBuZXcsIG1lcmdlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBfY29uY2F0KFs0LCA1LCA2XSwgWzEsIDIsIDNdKTsgLy89PiBbNCwgNSwgNiwgMSwgMiwgM11cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NvbmNhdChzZXQxLCBzZXQyKSB7XG4gIHNldDEgPSBzZXQxIHx8IFtdO1xuICBzZXQyID0gc2V0MiB8fCBbXTtcbiAgdmFyIGlkeDtcbiAgdmFyIGxlbjEgPSBzZXQxLmxlbmd0aDtcbiAgdmFyIGxlbjIgPSBzZXQyLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZHggPSAwO1xuXG4gIHdoaWxlIChpZHggPCBsZW4xKSB7XG4gICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gc2V0MVtpZHhdO1xuICAgIGlkeCArPSAxO1xuICB9XG5cbiAgaWR4ID0gMDtcblxuICB3aGlsZSAoaWR4IDwgbGVuMikge1xuICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHNldDJbaWR4XTtcbiAgICBpZHggKz0gMTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FyaXR5KG4sIGZuKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIHN3aXRjaCAobikge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYTApIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSA2OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGNhc2UgNzpcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGNhc2UgMTA6XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IHRvIF9hcml0eSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIgbm8gZ3JlYXRlciB0aGFuIHRlbicpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3BpcGUoZiwgZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnLmNhbGwodGhpcywgZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn0iLCJpbXBvcnQgX2N1cnJ5MSBmcm9tIFwiLi9fY3VycnkxLmpzXCI7XG5pbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX2lzUGxhY2Vob2xkZXIgZnJvbSBcIi4vX2lzUGxhY2Vob2xkZXIuanNcIjtcbi8qKlxuICogT3B0aW1pemVkIGludGVybmFsIHRocmVlLWFyaXR5IGN1cnJ5IGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY3VycmllZCBmdW5jdGlvbi5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3VycnkzKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmMyhhLCBiLCBjKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBmMztcblxuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgPyBmMyA6IF9jdXJyeTIoZnVuY3Rpb24gKF9iLCBfYykge1xuICAgICAgICAgIHJldHVybiBmbihhLCBfYiwgX2MpO1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgPyBmMyA6IF9pc1BsYWNlaG9sZGVyKGEpID8gX2N1cnJ5MihmdW5jdGlvbiAoX2EsIF9jKSB7XG4gICAgICAgICAgcmV0dXJuIGZuKF9hLCBiLCBfYyk7XG4gICAgICAgIH0pIDogX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkyKGZ1bmN0aW9uIChfYiwgX2MpIHtcbiAgICAgICAgICByZXR1cm4gZm4oYSwgX2IsIF9jKTtcbiAgICAgICAgfSkgOiBfY3VycnkxKGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgIHJldHVybiBmbihhLCBiLCBfYyk7XG4gICAgICAgIH0pO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgJiYgX2lzUGxhY2Vob2xkZXIoYykgPyBmMyA6IF9pc1BsYWNlaG9sZGVyKGEpICYmIF9pc1BsYWNlaG9sZGVyKGIpID8gX2N1cnJ5MihmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgICAgICAgcmV0dXJuIGZuKF9hLCBfYiwgYyk7XG4gICAgICAgIH0pIDogX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYykgPyBfY3VycnkyKGZ1bmN0aW9uIChfYSwgX2MpIHtcbiAgICAgICAgICByZXR1cm4gZm4oX2EsIGIsIF9jKTtcbiAgICAgICAgfSkgOiBfaXNQbGFjZWhvbGRlcihiKSAmJiBfaXNQbGFjZWhvbGRlcihjKSA/IF9jdXJyeTIoZnVuY3Rpb24gKF9iLCBfYykge1xuICAgICAgICAgIHJldHVybiBmbihhLCBfYiwgX2MpO1xuICAgICAgICB9KSA6IF9pc1BsYWNlaG9sZGVyKGEpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICByZXR1cm4gZm4oX2EsIGIsIGMpO1xuICAgICAgICB9KSA6IF9pc1BsYWNlaG9sZGVyKGIpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICByZXR1cm4gZm4oYSwgX2IsIGMpO1xuICAgICAgICB9KSA6IF9pc1BsYWNlaG9sZGVyKGMpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICByZXR1cm4gZm4oYSwgYiwgX2MpO1xuICAgICAgICB9KSA6IGZuKGEsIGIsIGMpO1xuICAgIH1cbiAgfTtcbn0iLCIvKipcbiAqIFRlc3RzIHdoZXRoZXIgb3Igbm90IGFuIG9iamVjdCBpcyBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWwgVGhlIG9iamVjdCB0byB0ZXN0LlxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIGB2YWxgIGlzIGFuIGFycmF5LCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBfaXNBcnJheShbXSk7IC8vPT4gdHJ1ZVxuICogICAgICBfaXNBcnJheShudWxsKTsgLy89PiBmYWxzZVxuICogICAgICBfaXNBcnJheSh7fSk7IC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBfaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsICYmIHZhbC5sZW5ndGggPj0gMCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2lzU3RyaW5nKHgpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG59IiwiaW1wb3J0IF9jdXJyeTEgZnJvbSBcIi4vX2N1cnJ5MS5qc1wiO1xuaW1wb3J0IF9pc0FycmF5IGZyb20gXCIuL19pc0FycmF5LmpzXCI7XG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gXCIuL19pc1N0cmluZy5qc1wiO1xuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCBhbiBvYmplY3QgaXMgc2ltaWxhciB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IFR5cGVcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnICogLT4gQm9vbGVhblxuICogQHBhcmFtIHsqfSB4IFRoZSBvYmplY3QgdG8gdGVzdC5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiBgeGAgaGFzIGEgbnVtZXJpYyBsZW5ndGggcHJvcGVydHkgYW5kIGV4dHJlbWUgaW5kaWNlcyBkZWZpbmVkOyBgZmFsc2VgIG90aGVyd2lzZS5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBfaXNBcnJheUxpa2UoW10pOyAvLz0+IHRydWVcbiAqICAgICAgX2lzQXJyYXlMaWtlKHRydWUpOyAvLz0+IGZhbHNlXG4gKiAgICAgIF9pc0FycmF5TGlrZSh7fSk7IC8vPT4gZmFsc2VcbiAqICAgICAgX2lzQXJyYXlMaWtlKHtsZW5ndGg6IDEwfSk7IC8vPT4gZmFsc2VcbiAqICAgICAgX2lzQXJyYXlMaWtlKHswOiAnemVybycsIDk6ICduaW5lJywgbGVuZ3RoOiAxMH0pOyAvLz0+IHRydWVcbiAqL1xuXG52YXIgX2lzQXJyYXlMaWtlID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24gaXNBcnJheUxpa2UoeCkge1xuICBpZiAoX2lzQXJyYXkoeCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICgheCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoX2lzU3RyaW5nKHgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHgubm9kZVR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gISF4Lmxlbmd0aDtcbiAgfVxuXG4gIGlmICh4Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHgubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB4Lmhhc093blByb3BlcnR5KDApICYmIHguaGFzT3duUHJvcGVydHkoeC5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBfaXNBcnJheUxpa2U7IiwidmFyIFhXcmFwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gWFdyYXAoZm4pIHtcbiAgICB0aGlzLmYgPSBmbjtcbiAgfVxuXG4gIFhXcmFwLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL2luaXQnXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2luaXQgbm90IGltcGxlbWVudGVkIG9uIFhXcmFwJyk7XG4gIH07XG5cbiAgWFdyYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvcmVzdWx0J10gPSBmdW5jdGlvbiAoYWNjKSB7XG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICBYV3JhcC5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9zdGVwJ10gPSBmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgcmV0dXJuIHRoaXMuZihhY2MsIHgpO1xuICB9O1xuXG4gIHJldHVybiBYV3JhcDtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3h3cmFwKGZuKSB7XG4gIHJldHVybiBuZXcgWFdyYXAoZm4pO1xufSIsImltcG9ydCBfYXJpdHkgZnJvbSBcIi4vaW50ZXJuYWwvX2FyaXR5LmpzXCI7XG5pbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIGJvdW5kIHRvIGEgY29udGV4dC5cbiAqIE5vdGU6IGBSLmJpbmRgIGRvZXMgbm90IHByb3ZpZGUgdGhlIGFkZGl0aW9uYWwgYXJndW1lbnQtYmluZGluZyBjYXBhYmlsaXRpZXMgb2ZcbiAqIFtGdW5jdGlvbi5wcm90b3R5cGUuYmluZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYmluZCkuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuNi4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcgKCogLT4gKikgLT4geyp9IC0+ICgqIC0+ICopXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gYmluZCB0byBjb250ZXh0XG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc09iaiBUaGUgY29udGV4dCB0byBiaW5kIGBmbmAgdG9cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBleGVjdXRlIGluIHRoZSBjb250ZXh0IG9mIGB0aGlzT2JqYC5cbiAqIEBzZWUgUi5wYXJ0aWFsXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgY29uc3QgbG9nID0gUi5iaW5kKGNvbnNvbGUubG9nLCBjb25zb2xlKTtcbiAqICAgICAgUi5waXBlKFIuYXNzb2MoJ2EnLCAyKSwgUi50YXAobG9nKSwgUi5hc3NvYygnYScsIDMpKSh7YTogMX0pOyAvLz0+IHthOiAzfVxuICogICAgICAvLyBsb2dzIHthOiAyfVxuICogQHN5bWIgUi5iaW5kKGYsIG8pKGEsIGIpID0gZi5jYWxsKG8sIGEsIGIpXG4gKi9cblxudmFyIGJpbmQgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MihmdW5jdGlvbiBiaW5kKGZuLCB0aGlzT2JqKSB7XG4gIHJldHVybiBfYXJpdHkoZm4ubGVuZ3RoLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNPYmosIGFyZ3VtZW50cyk7XG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGJpbmQ7IiwiaW1wb3J0IF9pc0FycmF5TGlrZSBmcm9tIFwiLi9faXNBcnJheUxpa2UuanNcIjtcbmltcG9ydCBfeHdyYXAgZnJvbSBcIi4vX3h3cmFwLmpzXCI7XG5pbXBvcnQgYmluZCBmcm9tIFwiLi4vYmluZC5qc1wiO1xuXG5mdW5jdGlvbiBfYXJyYXlSZWR1Y2UoeGYsIGFjYywgbGlzdCkge1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuXG4gIHdoaWxlIChpZHggPCBsZW4pIHtcbiAgICBhY2MgPSB4ZlsnQEB0cmFuc2R1Y2VyL3N0ZXAnXShhY2MsIGxpc3RbaWR4XSk7XG5cbiAgICBpZiAoYWNjICYmIGFjY1snQEB0cmFuc2R1Y2VyL3JlZHVjZWQnXSkge1xuICAgICAgYWNjID0gYWNjWydAQHRyYW5zZHVjZXIvdmFsdWUnXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlkeCArPSAxO1xuICB9XG5cbiAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10oYWNjKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlUmVkdWNlKHhmLCBhY2MsIGl0ZXIpIHtcbiAgdmFyIHN0ZXAgPSBpdGVyLm5leHQoKTtcblxuICB3aGlsZSAoIXN0ZXAuZG9uZSkge1xuICAgIGFjYyA9IHhmWydAQHRyYW5zZHVjZXIvc3RlcCddKGFjYywgc3RlcC52YWx1ZSk7XG5cbiAgICBpZiAoYWNjICYmIGFjY1snQEB0cmFuc2R1Y2VyL3JlZHVjZWQnXSkge1xuICAgICAgYWNjID0gYWNjWydAQHRyYW5zZHVjZXIvdmFsdWUnXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN0ZXAgPSBpdGVyLm5leHQoKTtcbiAgfVxuXG4gIHJldHVybiB4ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKGFjYyk7XG59XG5cbmZ1bmN0aW9uIF9tZXRob2RSZWR1Y2UoeGYsIGFjYywgb2JqLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiB4ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKG9ialttZXRob2ROYW1lXShiaW5kKHhmWydAQHRyYW5zZHVjZXIvc3RlcCddLCB4ZiksIGFjYykpO1xufVxuXG52YXIgc3ltSXRlcmF0b3IgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFN5bWJvbC5pdGVyYXRvciA6ICdAQGl0ZXJhdG9yJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9yZWR1Y2UoZm4sIGFjYywgbGlzdCkge1xuICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm4gPSBfeHdyYXAoZm4pO1xuICB9XG5cbiAgaWYgKF9pc0FycmF5TGlrZShsaXN0KSkge1xuICAgIHJldHVybiBfYXJyYXlSZWR1Y2UoZm4sIGFjYywgbGlzdCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGxpc3RbJ2ZhbnRhc3ktbGFuZC9yZWR1Y2UnXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfbWV0aG9kUmVkdWNlKGZuLCBhY2MsIGxpc3QsICdmYW50YXN5LWxhbmQvcmVkdWNlJyk7XG4gIH1cblxuICBpZiAobGlzdFtzeW1JdGVyYXRvcl0gIT0gbnVsbCkge1xuICAgIHJldHVybiBfaXRlcmFibGVSZWR1Y2UoZm4sIGFjYywgbGlzdFtzeW1JdGVyYXRvcl0oKSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGxpc3QubmV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfaXRlcmFibGVSZWR1Y2UoZm4sIGFjYywgbGlzdCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGxpc3QucmVkdWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIF9tZXRob2RSZWR1Y2UoZm4sIGFjYywgbGlzdCwgJ3JlZHVjZScpO1xuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVkdWNlOiBsaXN0IG11c3QgYmUgYXJyYXkgb3IgaXRlcmFibGUnKTtcbn0iLCJpbXBvcnQgX2N1cnJ5MyBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkzLmpzXCI7XG5pbXBvcnQgX3JlZHVjZSBmcm9tIFwiLi9pbnRlcm5hbC9fcmVkdWNlLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYSBzaW5nbGUgaXRlbSBieSBpdGVyYXRpbmcgdGhyb3VnaCB0aGUgbGlzdCwgc3VjY2Vzc2l2ZWx5IGNhbGxpbmdcbiAqIHRoZSBpdGVyYXRvciBmdW5jdGlvbiBhbmQgcGFzc2luZyBpdCBhbiBhY2N1bXVsYXRvciB2YWx1ZSBhbmQgdGhlIGN1cnJlbnRcbiAqIHZhbHVlIGZyb20gdGhlIGFycmF5LCBhbmQgdGhlbiBwYXNzaW5nIHRoZSByZXN1bHQgdG8gdGhlIG5leHQgY2FsbC5cbiAqXG4gKiBUaGUgaXRlcmF0b3IgZnVuY3Rpb24gcmVjZWl2ZXMgdHdvIHZhbHVlczogKihhY2MsIHZhbHVlKSouIEl0IG1heSB1c2VcbiAqIFtgUi5yZWR1Y2VkYF0oI3JlZHVjZWQpIHRvIHNob3J0Y3V0IHRoZSBpdGVyYXRpb24uXG4gKlxuICogVGhlIGFyZ3VtZW50cycgb3JkZXIgb2YgW2ByZWR1Y2VSaWdodGBdKCNyZWR1Y2VSaWdodCkncyBpdGVyYXRvciBmdW5jdGlvblxuICogaXMgKih2YWx1ZSwgYWNjKSouXG4gKlxuICogTm90ZTogYFIucmVkdWNlYCBkb2VzIG5vdCBza2lwIGRlbGV0ZWQgb3IgdW5hc3NpZ25lZCBpbmRpY2VzIChzcGFyc2VcbiAqIGFycmF5cyksIHVubGlrZSB0aGUgbmF0aXZlIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2QuIEZvciBtb3JlIGRldGFpbHNcbiAqIG9uIHRoaXMgYmVoYXZpb3IsIHNlZTpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3JlZHVjZSNEZXNjcmlwdGlvblxuICpcbiAqIERpc3BhdGNoZXMgdG8gdGhlIGByZWR1Y2VgIG1ldGhvZCBvZiB0aGUgdGhpcmQgYXJndW1lbnQsIGlmIHByZXNlbnQuIFdoZW5cbiAqIGRvaW5nIHNvLCBpdCBpcyB1cCB0byB0aGUgdXNlciB0byBoYW5kbGUgdGhlIFtgUi5yZWR1Y2VkYF0oI3JlZHVjZWQpXG4gKiBzaG9ydGN1dGluZywgYXMgdGhpcyBpcyBub3QgaW1wbGVtZW50ZWQgYnkgYHJlZHVjZWAuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyAoKGEsIGIpIC0+IGEpIC0+IGEgLT4gW2JdIC0+IGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBpdGVyYXRvciBmdW5jdGlvbi4gUmVjZWl2ZXMgdHdvIHZhbHVlcywgdGhlIGFjY3VtdWxhdG9yIGFuZCB0aGVcbiAqICAgICAgICBjdXJyZW50IGVsZW1lbnQgZnJvbSB0aGUgYXJyYXkuXG4gKiBAcGFyYW0geyp9IGFjYyBUaGUgYWNjdW11bGF0b3IgdmFsdWUuXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0IFRoZSBsaXN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEByZXR1cm4geyp9IFRoZSBmaW5hbCwgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKiBAc2VlIFIucmVkdWNlZCwgUi5hZGRJbmRleCwgUi5yZWR1Y2VSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIucmVkdWNlKFIuc3VidHJhY3QsIDAsIFsxLCAyLCAzLCA0XSkgLy8gPT4gKCgoKDAgLSAxKSAtIDIpIC0gMykgLSA0KSA9IC0xMFxuICogICAgICAvLyAgICAgICAgICAtICAgICAgICAgICAgICAgLTEwXG4gKiAgICAgIC8vICAgICAgICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAvLyAgICAgICAgLSAgIDQgICAgICAgICAgIC02ICAgNFxuICogICAgICAvLyAgICAgICAvIFxcICAgICAgICAgICAgICAvIFxcXG4gKiAgICAgIC8vICAgICAgLSAgIDMgICA9PT4gICAgIC0zICAgM1xuICogICAgICAvLyAgICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAvLyAgICAtICAgMiAgICAgICAgICAgLTEgICAyXG4gKiAgICAgIC8vICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAvLyAgMCAgIDEgICAgICAgICAgICAwICAgMVxuICpcbiAqIEBzeW1iIFIucmVkdWNlKGYsIGEsIFtiLCBjLCBkXSkgPSBmKGYoZihhLCBiKSwgYyksIGQpXG4gKi9cblxudmFyIHJlZHVjZSA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkzKF9yZWR1Y2UpO1xuXG5leHBvcnQgZGVmYXVsdCByZWR1Y2U7IiwiaW1wb3J0IF9pc0FycmF5IGZyb20gXCIuL19pc0FycmF5LmpzXCI7XG4vKipcbiAqIFRoaXMgY2hlY2tzIHdoZXRoZXIgYSBmdW5jdGlvbiBoYXMgYSBbbWV0aG9kbmFtZV0gZnVuY3Rpb24uIElmIGl0IGlzbid0IGFuXG4gKiBhcnJheSBpdCB3aWxsIGV4ZWN1dGUgdGhhdCBmdW5jdGlvbiBvdGhlcndpc2UgaXQgd2lsbCBkZWZhdWx0IHRvIHRoZSByYW1kYVxuICogaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIHJhbWRhIGltcGxlbXRhdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZG5hbWUgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IFdoYXRldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIG1ldGhvZCBpcy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2hlY2tGb3JNZXRob2QobWV0aG9kbmFtZSwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH1cblxuICAgIHZhciBvYmogPSBhcmd1bWVudHNbbGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIF9pc0FycmF5KG9iaikgfHwgdHlwZW9mIG9ialttZXRob2RuYW1lXSAhPT0gJ2Z1bmN0aW9uJyA/IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBvYmpbbWV0aG9kbmFtZV0uYXBwbHkob2JqLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDAsIGxlbmd0aCAtIDEpKTtcbiAgfTtcbn0iLCJpbXBvcnQgX2NoZWNrRm9yTWV0aG9kIGZyb20gXCIuL2ludGVybmFsL19jaGVja0Zvck1ldGhvZC5qc1wiO1xuaW1wb3J0IF9jdXJyeTEgZnJvbSBcIi4vaW50ZXJuYWwvX2N1cnJ5MS5qc1wiO1xuaW1wb3J0IHNsaWNlIGZyb20gXCIuL3NsaWNlLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgZ2l2ZW4gbGlzdCBvciBzdHJpbmcgKG9yIG9iamVjdFxuICogd2l0aCBhIGB0YWlsYCBtZXRob2QpLlxuICpcbiAqIERpc3BhdGNoZXMgdG8gdGhlIGBzbGljZWAgbWV0aG9kIG9mIHRoZSBmaXJzdCBhcmd1bWVudCwgaWYgcHJlc2VudC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnIFthXSAtPiBbYV1cbiAqIEBzaWcgU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHsqfSBsaXN0XG4gKiBAcmV0dXJuIHsqfVxuICogQHNlZSBSLmhlYWQsIFIuaW5pdCwgUi5sYXN0XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi50YWlsKFsxLCAyLCAzXSk7ICAvLz0+IFsyLCAzXVxuICogICAgICBSLnRhaWwoWzEsIDJdKTsgICAgIC8vPT4gWzJdXG4gKiAgICAgIFIudGFpbChbMV0pOyAgICAgICAgLy89PiBbXVxuICogICAgICBSLnRhaWwoW10pOyAgICAgICAgIC8vPT4gW11cbiAqXG4gKiAgICAgIFIudGFpbCgnYWJjJyk7ICAvLz0+ICdiYydcbiAqICAgICAgUi50YWlsKCdhYicpOyAgIC8vPT4gJ2InXG4gKiAgICAgIFIudGFpbCgnYScpOyAgICAvLz0+ICcnXG4gKiAgICAgIFIudGFpbCgnJyk7ICAgICAvLz0+ICcnXG4gKi9cblxudmFyIHRhaWwgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MShcbi8qI19fUFVSRV9fKi9cbl9jaGVja0Zvck1ldGhvZCgndGFpbCcsXG4vKiNfX1BVUkVfXyovXG5zbGljZSgxLCBJbmZpbml0eSkpKTtcblxuZXhwb3J0IGRlZmF1bHQgdGFpbDsiLCJpbXBvcnQgX2NoZWNrRm9yTWV0aG9kIGZyb20gXCIuL2ludGVybmFsL19jaGVja0Zvck1ldGhvZC5qc1wiO1xuaW1wb3J0IF9jdXJyeTMgZnJvbSBcIi4vaW50ZXJuYWwvX2N1cnJ5My5qc1wiO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gbGlzdCBvciBzdHJpbmcgKG9yIG9iamVjdCB3aXRoIGEgYHNsaWNlYFxuICogbWV0aG9kKSBmcm9tIGBmcm9tSW5kZXhgIChpbmNsdXNpdmUpIHRvIGB0b0luZGV4YCAoZXhjbHVzaXZlKS5cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgc2xpY2VgIG1ldGhvZCBvZiB0aGUgdGhpcmQgYXJndW1lbnQsIGlmIHByZXNlbnQuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS40XG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBOdW1iZXIgLT4gTnVtYmVyIC0+IFthXSAtPiBbYV1cbiAqIEBzaWcgTnVtYmVyIC0+IE51bWJlciAtPiBTdHJpbmcgLT4gU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gZnJvbUluZGV4IFRoZSBzdGFydCBpbmRleCAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0b0luZGV4IFRoZSBlbmQgaW5kZXggKGV4Y2x1c2l2ZSkuXG4gKiBAcGFyYW0geyp9IGxpc3RcbiAqIEByZXR1cm4geyp9XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5zbGljZSgxLCAzLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgICAvLz0+IFsnYicsICdjJ11cbiAqICAgICAgUi5zbGljZSgxLCBJbmZpbml0eSwgWydhJywgJ2InLCAnYycsICdkJ10pOyAvLz0+IFsnYicsICdjJywgJ2QnXVxuICogICAgICBSLnNsaWNlKDAsIC0xLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgIC8vPT4gWydhJywgJ2InLCAnYyddXG4gKiAgICAgIFIuc2xpY2UoLTMsIC0xLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgLy89PiBbJ2InLCAnYyddXG4gKiAgICAgIFIuc2xpY2UoMCwgMywgJ3JhbWRhJyk7ICAgICAgICAgICAgICAgICAgICAgLy89PiAncmFtJ1xuICovXG5cbnZhciBzbGljZSA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkzKFxuLyojX19QVVJFX18qL1xuX2NoZWNrRm9yTWV0aG9kKCdzbGljZScsIGZ1bmN0aW9uIHNsaWNlKGZyb21JbmRleCwgdG9JbmRleCwgbGlzdCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdCwgZnJvbUluZGV4LCB0b0luZGV4KTtcbn0pKTtcblxuZXhwb3J0IGRlZmF1bHQgc2xpY2U7IiwiaW1wb3J0IF9hcml0eSBmcm9tIFwiLi9pbnRlcm5hbC9fYXJpdHkuanNcIjtcbmltcG9ydCBfcGlwZSBmcm9tIFwiLi9pbnRlcm5hbC9fcGlwZS5qc1wiO1xuaW1wb3J0IHJlZHVjZSBmcm9tIFwiLi9yZWR1Y2UuanNcIjtcbmltcG9ydCB0YWlsIGZyb20gXCIuL3RhaWwuanNcIjtcbi8qKlxuICogUGVyZm9ybXMgbGVmdC10by1yaWdodCBmdW5jdGlvbiBjb21wb3NpdGlvbi4gVGhlIGZpcnN0IGFyZ3VtZW50IG1heSBoYXZlXG4gKiBhbnkgYXJpdHk7IHRoZSByZW1haW5pbmcgYXJndW1lbnRzIG11c3QgYmUgdW5hcnkuXG4gKlxuICogSW4gc29tZSBsaWJyYXJpZXMgdGhpcyBmdW5jdGlvbiBpcyBuYW1lZCBgc2VxdWVuY2VgLlxuICpcbiAqICoqTm90ZToqKiBUaGUgcmVzdWx0IG9mIHBpcGUgaXMgbm90IGF1dG9tYXRpY2FsbHkgY3VycmllZC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHNpZyAoKChhLCBiLCAuLi4sIG4pIC0+IG8pLCAobyAtPiBwKSwgLi4uLCAoeCAtPiB5KSwgKHkgLT4geikpIC0+ICgoYSwgYiwgLi4uLCBuKSAtPiB6KVxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3Rpb25zXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBzZWUgUi5jb21wb3NlXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgY29uc3QgZiA9IFIucGlwZShNYXRoLnBvdywgUi5uZWdhdGUsIFIuaW5jKTtcbiAqXG4gKiAgICAgIGYoMywgNCk7IC8vIC0oM140KSArIDFcbiAqIEBzeW1iIFIucGlwZShmLCBnLCBoKShhLCBiKSA9IGgoZyhmKGEsIGIpKSlcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwaXBlKCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcigncGlwZSByZXF1aXJlcyBhdCBsZWFzdCBvbmUgYXJndW1lbnQnKTtcbiAgfVxuXG4gIHJldHVybiBfYXJpdHkoYXJndW1lbnRzWzBdLmxlbmd0aCwgcmVkdWNlKF9waXBlLCBhcmd1bWVudHNbMF0sIHRhaWwoYXJndW1lbnRzKSkpO1xufSIsImltcG9ydCBfY3VycnkxIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTEuanNcIjtcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSBcIi4vaW50ZXJuYWwvX2lzU3RyaW5nLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYSBuZXcgbGlzdCBvciBzdHJpbmcgd2l0aCB0aGUgZWxlbWVudHMgb3IgY2hhcmFjdGVycyBpbiByZXZlcnNlXG4gKiBvcmRlci5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnIFthXSAtPiBbYV1cbiAqIEBzaWcgU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGxpc3RcbiAqIEByZXR1cm4ge0FycmF5fFN0cmluZ31cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnJldmVyc2UoWzEsIDIsIDNdKTsgIC8vPT4gWzMsIDIsIDFdXG4gKiAgICAgIFIucmV2ZXJzZShbMSwgMl0pOyAgICAgLy89PiBbMiwgMV1cbiAqICAgICAgUi5yZXZlcnNlKFsxXSk7ICAgICAgICAvLz0+IFsxXVxuICogICAgICBSLnJldmVyc2UoW10pOyAgICAgICAgIC8vPT4gW11cbiAqXG4gKiAgICAgIFIucmV2ZXJzZSgnYWJjJyk7ICAgICAgLy89PiAnY2JhJ1xuICogICAgICBSLnJldmVyc2UoJ2FiJyk7ICAgICAgIC8vPT4gJ2JhJ1xuICogICAgICBSLnJldmVyc2UoJ2EnKTsgICAgICAgIC8vPT4gJ2EnXG4gKiAgICAgIFIucmV2ZXJzZSgnJyk7ICAgICAgICAgLy89PiAnJ1xuICovXG5cbnZhciByZXZlcnNlID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24gcmV2ZXJzZShsaXN0KSB7XG4gIHJldHVybiBfaXNTdHJpbmcobGlzdCkgPyBsaXN0LnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJykgOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChsaXN0LCAwKS5yZXZlcnNlKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmV2ZXJzZTsiLCJpbXBvcnQgcGlwZSBmcm9tIFwiLi9waXBlLmpzXCI7XG5pbXBvcnQgcmV2ZXJzZSBmcm9tIFwiLi9yZXZlcnNlLmpzXCI7XG4vKipcbiAqIFBlcmZvcm1zIHJpZ2h0LXRvLWxlZnQgZnVuY3Rpb24gY29tcG9zaXRpb24uIFRoZSBsYXN0IGFyZ3VtZW50IG1heSBoYXZlXG4gKiBhbnkgYXJpdHk7IHRoZSByZW1haW5pbmcgYXJndW1lbnRzIG11c3QgYmUgdW5hcnkuXG4gKlxuICogKipOb3RlOioqIFRoZSByZXN1bHQgb2YgY29tcG9zZSBpcyBub3QgYXV0b21hdGljYWxseSBjdXJyaWVkLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnICgoeSAtPiB6KSwgKHggLT4geSksIC4uLiwgKG8gLT4gcCksICgoYSwgYiwgLi4uLCBuKSAtPiBvKSkgLT4gKChhLCBiLCAuLi4sIG4pIC0+IHopXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSAuLi5mdW5jdGlvbnMgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBzZWUgUi5waXBlXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgY29uc3QgY2xhc3N5R3JlZXRpbmcgPSAoZmlyc3ROYW1lLCBsYXN0TmFtZSkgPT4gXCJUaGUgbmFtZSdzIFwiICsgbGFzdE5hbWUgKyBcIiwgXCIgKyBmaXJzdE5hbWUgKyBcIiBcIiArIGxhc3ROYW1lXG4gKiAgICAgIGNvbnN0IHllbGxHcmVldGluZyA9IFIuY29tcG9zZShSLnRvVXBwZXIsIGNsYXNzeUdyZWV0aW5nKTtcbiAqICAgICAgeWVsbEdyZWV0aW5nKCdKYW1lcycsICdCb25kJyk7IC8vPT4gXCJUSEUgTkFNRSdTIEJPTkQsIEpBTUVTIEJPTkRcIlxuICpcbiAqICAgICAgUi5jb21wb3NlKE1hdGguYWJzLCBSLmFkZCgxKSwgUi5tdWx0aXBseSgyKSkoLTQpIC8vPT4gN1xuICpcbiAqIEBzeW1iIFIuY29tcG9zZShmLCBnLCBoKShhLCBiKSA9IGYoZyhoKGEsIGIpKSlcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wb3NlKCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY29tcG9zZSByZXF1aXJlcyBhdCBsZWFzdCBvbmUgYXJndW1lbnQnKTtcbiAgfVxuXG4gIHJldHVybiBwaXBlLmFwcGx5KHRoaXMsIHJldmVyc2UoYXJndW1lbnRzKSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2lkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59IiwiaW1wb3J0IF9jdXJyeTEgZnJvbSBcIi4vaW50ZXJuYWwvX2N1cnJ5MS5qc1wiO1xuaW1wb3J0IF9pZGVudGl0eSBmcm9tIFwiLi9pbnRlcm5hbC9faWRlbnRpdHkuanNcIjtcbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IGRvZXMgbm90aGluZyBidXQgcmV0dXJuIHRoZSBwYXJhbWV0ZXIgc3VwcGxpZWQgdG8gaXQuIEdvb2RcbiAqIGFzIGEgZGVmYXVsdCBvciBwbGFjZWhvbGRlciBmdW5jdGlvbi5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHNpZyBhIC0+IGFcbiAqIEBwYXJhbSB7Kn0geCBUaGUgdmFsdWUgdG8gcmV0dXJuLlxuICogQHJldHVybiB7Kn0gVGhlIGlucHV0IHZhbHVlLCBgeGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5pZGVudGl0eSgxKTsgLy89PiAxXG4gKlxuICogICAgICBjb25zdCBvYmogPSB7fTtcbiAqICAgICAgUi5pZGVudGl0eShvYmopID09PSBvYmo7IC8vPT4gdHJ1ZVxuICogQHN5bWIgUi5pZGVudGl0eShhKSA9IGFcbiAqL1xuXG52YXIgaWRlbnRpdHkgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MShfaWRlbnRpdHkpO1xuXG5leHBvcnQgZGVmYXVsdCBpZGVudGl0eTsiLCJpbXBvcnQgX2NvbmNhdCBmcm9tIFwiLi9pbnRlcm5hbC9fY29uY2F0LmpzXCI7XG5pbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG5pbXBvcnQgY29tcG9zZSBmcm9tIFwiLi9jb21wb3NlLmpzXCI7XG5pbXBvcnQgdW5pcSBmcm9tIFwiLi91bmlxLmpzXCI7XG4vKipcbiAqIENvbWJpbmVzIHR3byBsaXN0cyBpbnRvIGEgc2V0IChpLmUuIG5vIGR1cGxpY2F0ZXMpIGNvbXBvc2VkIG9mIHRoZSBlbGVtZW50c1xuICogb2YgZWFjaCBsaXN0LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IFJlbGF0aW9uXG4gKiBAc2lnIFsqXSAtPiBbKl0gLT4gWypdXG4gKiBAcGFyYW0ge0FycmF5fSBhcyBUaGUgZmlyc3QgbGlzdC5cbiAqIEBwYXJhbSB7QXJyYXl9IGJzIFRoZSBzZWNvbmQgbGlzdC5cbiAqIEByZXR1cm4ge0FycmF5fSBUaGUgZmlyc3QgYW5kIHNlY29uZCBsaXN0cyBjb25jYXRlbmF0ZWQsIHdpdGhcbiAqICAgICAgICAgZHVwbGljYXRlcyByZW1vdmVkLlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIudW5pb24oWzEsIDIsIDNdLCBbMiwgMywgNF0pOyAvLz0+IFsxLCAyLCAzLCA0XVxuICovXG5cbnZhciB1bmlvbiA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkyKFxuLyojX19QVVJFX18qL1xuY29tcG9zZSh1bmlxLCBfY29uY2F0KSk7XG5cbmV4cG9ydCBkZWZhdWx0IHVuaW9uOyIsImltcG9ydCBfU2V0IGZyb20gXCIuL2ludGVybmFsL19TZXQuanNcIjtcbmltcG9ydCBfY3VycnkyIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTIuanNcIjtcbi8qKlxuICogUmV0dXJucyBhIG5ldyBsaXN0IGNvbnRhaW5pbmcgb25seSBvbmUgY29weSBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsXG4gKiBsaXN0LCBiYXNlZCB1cG9uIHRoZSB2YWx1ZSByZXR1cm5lZCBieSBhcHBseWluZyB0aGUgc3VwcGxpZWQgZnVuY3Rpb24gdG9cbiAqIGVhY2ggbGlzdCBlbGVtZW50LiBQcmVmZXJzIHRoZSBmaXJzdCBpdGVtIGlmIHRoZSBzdXBwbGllZCBmdW5jdGlvbiBwcm9kdWNlc1xuICogdGhlIHNhbWUgdmFsdWUgb24gdHdvIGl0ZW1zLiBbYFIuZXF1YWxzYF0oI2VxdWFscykgaXMgdXNlZCBmb3IgY29tcGFyaXNvbi5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xNi4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyAoYSAtPiBiKSAtPiBbYV0gLT4gW2FdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBBIGZ1bmN0aW9uIHVzZWQgdG8gcHJvZHVjZSBhIHZhbHVlIHRvIHVzZSBkdXJpbmcgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0IFRoZSBhcnJheSB0byBjb25zaWRlci5cbiAqIEByZXR1cm4ge0FycmF5fSBUaGUgbGlzdCBvZiB1bmlxdWUgaXRlbXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi51bmlxQnkoTWF0aC5hYnMsIFstMSwgLTUsIDIsIDEwLCAxLCAyXSk7IC8vPT4gWy0xLCAtNSwgMiwgMTBdXG4gKi9cblxudmFyIHVuaXFCeSA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkyKGZ1bmN0aW9uIHVuaXFCeShmbiwgbGlzdCkge1xuICB2YXIgc2V0ID0gbmV3IF9TZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIGFwcGxpZWRJdGVtLCBpdGVtO1xuXG4gIHdoaWxlIChpZHggPCBsaXN0Lmxlbmd0aCkge1xuICAgIGl0ZW0gPSBsaXN0W2lkeF07XG4gICAgYXBwbGllZEl0ZW0gPSBmbihpdGVtKTtcblxuICAgIGlmIChzZXQuYWRkKGFwcGxpZWRJdGVtKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgaWR4ICs9IDE7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXFCeTsiLCJpbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCB1bmlxQnkgZnJvbSBcIi4vdW5pcUJ5LmpzXCI7XG4vKipcbiAqIFJldHVybnMgYSBuZXcgbGlzdCBjb250YWluaW5nIG9ubHkgb25lIGNvcHkgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBvcmlnaW5hbFxuICogbGlzdC4gW2BSLmVxdWFsc2BdKCNlcXVhbHMpIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IExpc3RcbiAqIEBzaWcgW2FdIC0+IFthXVxuICogQHBhcmFtIHtBcnJheX0gbGlzdCBUaGUgYXJyYXkgdG8gY29uc2lkZXIuXG4gKiBAcmV0dXJuIHtBcnJheX0gVGhlIGxpc3Qgb2YgdW5pcXVlIGl0ZW1zLlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIudW5pcShbMSwgMSwgMiwgMV0pOyAvLz0+IFsxLCAyXVxuICogICAgICBSLnVuaXEoWzEsICcxJ10pOyAgICAgLy89PiBbMSwgJzEnXVxuICogICAgICBSLnVuaXEoW1s0Ml0sIFs0Ml1dKTsgLy89PiBbWzQyXV1cbiAqL1xuXG52YXIgdW5pcSA9XG4vKiNfX1BVUkVfXyovXG51bmlxQnkoaWRlbnRpdHkpO1xuZXhwb3J0IGRlZmF1bHQgdW5pcTsiLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgZXhlcmNpc2VzTGlzdCBmcm9tIFwiLi4vbGlzdHMvZXhlcmNpc2VzTGlzdFwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwicmFtZGFcIjtcblxuZXhwb3J0IGNvbnN0IGV4ZXJjaXNlc1JlZHVjZXIgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6IFwiZXhlcmNpc2VzXCIsXG4gIGluaXRpYWxTdGF0ZTogZXhlcmNpc2VzTGlzdCxcbiAgcmVkdWNlcnM6IHtcbiAgICBmaWx0ZXJCeUxldmVsKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGNvbnN0IHsgbGV2ZWwgfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgcmV0dXJuIHN0YXRlLmZpbHRlcigoZXgpID0+IGV4LmxldmVsIDw9IGxldmVsKTtcbiAgICB9LFxuICAgIGZpbHRlckJ5U3Ryb2tlKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGNvbnN0IHsgc3Ryb2tlc1RhcmdldGVkIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGlmIChzdHJva2VzVGFyZ2V0ZWQubGVuZ3RoID09IDQpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IG5ld1N0YXRlID0gc3RhdGUuc2xpY2UoKTtcbiAgICAgICAgbmV3U3RhdGUgPSBuZXdTdGF0ZS5maWx0ZXIoKGV4KSA9PiAhZXguc3Ryb2tlLmluY2x1ZGVzKFwiYWxsXCIpKTtcbiAgICAgICAgLy8gdGhlIHN0cm9rZXMgdGhhdCB3ZSBoYXZlIHRvIHJlbW92ZVxuICAgICAgICBsZXQgc3Ryb2tlc1RvUmVtb3ZlID0gW1xuICAgICAgICAgIFwiZnJlZXN0eWxlXCIsXG4gICAgICAgICAgXCJiYWNrc3Ryb2tlXCIsXG4gICAgICAgICAgXCJicmVhc3RzdHJva2VcIixcbiAgICAgICAgICBcImJ1dHRlcmZseVwiLFxuICAgICAgICBdO1xuICAgICAgICAvLyBjb25zaWRlcmluZyB0aGUgdGFyZ2V0c1xuICAgICAgICBzdHJva2VzVG9SZW1vdmUgPSBfLmRpZmZlcmVuY2Uoc3Ryb2tlc1RvUmVtb3ZlLCBzdHJva2VzVGFyZ2V0ZWQpO1xuXG4gICAgICAgIC8vIHJlbW92ZSBleGVyY2lzZXMgdGhhdCBpbmNsdWRlcyBhbnkgc3Ryb2tlc3RvcmVtb3ZlXG4gICAgICAgIHN0cm9rZXNUb1JlbW92ZS5mb3JFYWNoKChzdHJva2VUb1JlbW92ZSkgPT4ge1xuICAgICAgICAgIG5ld1N0YXRlID0gbmV3U3RhdGUuZmlsdGVyKFxuICAgICAgICAgICAgKGV4KSA9PiAhZXguc3Ryb2tlLmluY2x1ZGVzKHN0cm9rZVRvUmVtb3ZlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZpbHRlckJ5TWF0ZXJpYWwoc3RhdGUsIGFjdGlvbikge1xuICAgICAgY29uc3QgeyBtYXRlcmlhbCB9ID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICBpZiAobWF0ZXJpYWwubGVuZ3RoID09IDUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IG5ld1N0YXRlID0gc3RhdGUuc2xpY2UoKTtcbiAgICAgICAgbGV0IG1hdGVyaWFsc05vdFVzZWQgPSBbXG4gICAgICAgICAgXCJraWNrYm9hcmRcIixcbiAgICAgICAgICBcImZpbnNcIixcbiAgICAgICAgICBcInBhZGRsZXNcIixcbiAgICAgICAgICBcInNub3JrZWxcIixcbiAgICAgICAgICBcInB1bGxidW95XCIsXG4gICAgICAgIF07XG4gICAgICAgIG1hdGVyaWFsc05vdFVzZWQgPSBfLmRpZmZlcmVuY2UobWF0ZXJpYWxzTm90VXNlZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgIG1hdGVyaWFsc05vdFVzZWQuZm9yRWFjaCgobWF0ZXJpYWxOb3RVc2VkKSA9PiB7XG4gICAgICAgICAgbmV3U3RhdGUgPSBuZXdTdGF0ZS5maWx0ZXIoXG4gICAgICAgICAgICAoZXgpID0+ICFleC5tYXRlcmlhbC5pbmNsdWRlcyhtYXRlcmlhbE5vdFVzZWQpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2V0TGlzdChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBjb25zdCB7IHJlc2V0IH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGxldCBuZXdTdGF0ZSA9IHN0YXRlLnNsaWNlKCk7XG4gICAgICBuZXdTdGF0ZSA9IF8udW5pb24obmV3U3RhdGUsIHJlc2V0KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKG5ld1N0YXRlLCBcInJlc2V0XCIpO1xuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IHsgZmlsdGVyQnlMZXZlbCwgZmlsdGVyQnlTdHJva2UsIGZpbHRlckJ5TWF0ZXJpYWwsIHJlc2V0TGlzdCB9ID1cbiAgZXhlcmNpc2VzUmVkdWNlci5hY3Rpb25zO1xuZXhwb3J0IGRlZmF1bHQgZXhlcmNpc2VzUmVkdWNlci5yZWR1Y2VyO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZG9tSW50RnJvbUludGVydmFsKG1pbiwgbWF4KSB7XG4gIC8vIG1pbiBhbmQgbWF4IGluY2x1ZGVkXG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xuICB2YXIgY3VycmVudEluZGV4ID0gYXJyYXkubGVuZ3RoLFxuICAgIHJhbmRvbUluZGV4O1xuXG4gIC8vIFdoaWxlIHRoZXJlIHJlbWFpbiBlbGVtZW50cyB0byBzaHVmZmxlLi4uXG4gIHdoaWxlICgwICE9PSBjdXJyZW50SW5kZXgpIHtcbiAgICAvLyBQaWNrIGEgcmVtYWluaW5nIGVsZW1lbnQuLi5cbiAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRJbmRleCk7XG4gICAgY3VycmVudEluZGV4LS07XG5cbiAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXG4gICAgW2FycmF5W2N1cnJlbnRJbmRleF0sIGFycmF5W3JhbmRvbUluZGV4XV0gPSBbXG4gICAgICBhcnJheVtyYW5kb21JbmRleF0sXG4gICAgICBhcnJheVtjdXJyZW50SW5kZXhdLFxuICAgIF07XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb21WYWx1ZShhcnIpIHtcbiAgcmV0dXJuIGFycltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnIubGVuZ3RoKV07XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgcmFuZG9tSW50RnJvbUludGVydmFsIGZyb20gXCIuLi9mdW5jdGlvbnMvcmFuZG9tSW50RnJvbUludGVydmFsXCI7XG5pbXBvcnQgc2h1ZmZsZSBmcm9tIFwiLi4vZnVuY3Rpb25zL3NodWZmbGVcIjtcbmltcG9ydCByYW5kb21WYWx1ZSBmcm9tIFwiLi4vZnVuY3Rpb25zL3JhbmRvbVZhbHVlXCI7XG5cbmV4cG9ydCBjb25zdCB3YXJtdXBSZWR1Y2VyID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiBcIndhcm11cFwiLFxuICBpbml0aWFsU3RhdGU6IFtdLFxuICByZWR1Y2Vyczoge1xuICAgIGNvcHlfZmlsdGVyX3NlbGVjdF93YXJtdXBFeGVyY2lzZXMoc3RhdGUsIGFjdGlvbikge1xuICAgICAgbGV0IHsgZmlsdGVyZWRFeGVyY2lzZXMgfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgY29uc3QgeyBtYXRlcmlhbCwgbXVzY2xlLCBtZXRlcnMsIGxldmVsIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGNvbnN0IHdhcm11cEV4ZXJjaXNlcyA9IFtdO1xuICAgICAgY29uc3QgbWF4ID0gNDtcbiAgICAgIGNvbnN0IG1pbiA9IDE7XG4gICAgICBsZXQgbnVtYmVyRXhlcmNpc2VzO1xuICAgICAgZG8ge1xuICAgICAgICBudW1iZXJFeGVyY2lzZXMgPSByYW5kb21JbnRGcm9tSW50ZXJ2YWwobWluLCBtYXgpO1xuICAgICAgfSB3aGlsZSAobWV0ZXJzIC8gbnVtYmVyRXhlcmNpc2VzIDwgMjUpO1xuICAgICAgLy8gY29ybmVyIGNhc2UgZm9yIGxldmVsIDEgKHdlIGRvbnQgaGF2ZSBtYW55IGV4ZXJjaXNlcyBpbiB0aGUgbGlzdClcbiAgICAgIGlmIChsZXZlbCA9PSAxKSB7XG4gICAgICAgIGlmIChmaWx0ZXJlZEV4ZXJjaXNlcy5sZW5ndGggPD0gNSkge1xuICAgICAgICAgIG51bWJlckV4ZXJjaXNlcyA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbHRlcmVkRXhlcmNpc2VzLmxlbmd0aCA+IDUgJiYgZmlsdGVyZWRFeGVyY2lzZXMubGVuZ3RoIDwgMTApIHtcbiAgICAgICAgICBpZiAobWV0ZXJzIC8gMiA+PSAyNSkge1xuICAgICAgICAgICAgbnVtYmVyRXhlcmNpc2VzID0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVtYmVyRXhlcmNpc2VzID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBwZW5kaW5nRXhlcmNpc2VzID0gbnVtYmVyRXhlcmNpc2VzO1xuICAgICAgLy8gY29uc29sZS5sb2coZmlsdGVyZWRFeGVyY2lzZXMpO1xuICAgICAgZmlsdGVyZWRFeGVyY2lzZXMgPSBmaWx0ZXJlZEV4ZXJjaXNlcy5maWx0ZXIoKGV4KSA9PlxuICAgICAgICBleC5ibG9jay5pbmNsdWRlcyhcIndhcm11cFwiKVxuICAgICAgKTtcbiAgICAgIC8vIGxvZ2ljIGZvciBkZXRlcm1pbmlzdGljK3JhbmRvbSBzZWxlY3Rpb246XG4gICAgICAvLyB3YXJtdXAgPT4gZG8gbm90IHVzZSBhZHZhbmNlZCBlcXVpcG1lbnRcbiAgICAgIGlmIChcbiAgICAgICAgbWF0ZXJpYWwubGVuZ3RoID4gMCAmJlxuICAgICAgICAobWF0ZXJpYWwuaW5jbHVkZXMoXCJraWNrYm9hcmRcIikgfHwgbWF0ZXJpYWwuaW5jbHVkZXMoXCJwdWxsYnVveVwiKSlcbiAgICAgICkge1xuICAgICAgICAvLyBmaWx0ZXIgb3V0IGV4cyB3aXRoIGZpbnMsIHBhZGRsZXMgb3Igc25vcmtlbFxuICAgICAgICBsZXQgZXhzX21hdGVyaWFsID0gZmlsdGVyZWRFeGVyY2lzZXNcbiAgICAgICAgICAuZmlsdGVyKChleCkgPT4gIWV4Lm1hdGVyaWFsLmluY2x1ZGVzKFwicGFkZGxlc1wiKSlcbiAgICAgICAgICAuZmlsdGVyKChleCkgPT4gIWV4Lm1hdGVyaWFsLmluY2x1ZGVzKFwiZmluc1wiKSlcbiAgICAgICAgICAuZmlsdGVyKChleCkgPT4gIWV4Lm1hdGVyaWFsLmluY2x1ZGVzKFwic25vcmtlbFwiKSk7XG5cbiAgICAgICAgLy8gZmlsdGVyIGluIGV4ZXJjaXNlcyBvZiBvdXIgbGlzdCB0aGF0IGNvbnRhaW4gYW55IG1hdGVyaWFsIHRoYXQgdGhlIHN3aW1tZXIgaXMgdXNpbmdcbiAgICAgICAgZXhzX21hdGVyaWFsID0gZXhzX21hdGVyaWFsLmZpbHRlcigoZXgpID0+XG4gICAgICAgICAgZXgubWF0ZXJpYWwuc29tZSgodG9vbCkgPT4gbWF0ZXJpYWwuaW5jbHVkZXModG9vbCkpXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gbW9kaWZ5IG1hdGVyaWFsIHBheWxvYWQgdG8gaW5jbHVkZSBvbmx5IGNvb2xkb3duIG1hdGVyaWFsc1xuICAgICAgICBtYXRlcmlhbC5maWx0ZXIoKHRvb2wpID0+IHRvb2wgIT0gXCJmaW5zXCIpO1xuICAgICAgICBtYXRlcmlhbC5maWx0ZXIoKHRvb2wpID0+IHRvb2wgIT0gXCJwYWRkbGVzXCIpO1xuICAgICAgICBtYXRlcmlhbC5maWx0ZXIoKHRvb2wpID0+IHRvb2wgIT0gXCJzbm9ya2VsXCIpO1xuICAgICAgICAvLyBhbHRlciBvcmRlciBvZiBtYXRlcmlhbCBhcnJheSB0byBzdGFydCBwaWNraW5nIHJhbmRvbSBtYXRlcmlhbHMgYXMgd2UgZ2VuZXJhdGUgdGhlIGJsb2NrXG4gICAgICAgIHNodWZmbGUobWF0ZXJpYWwpO1xuICAgICAgICAvLyBmb3IgZXZlcnkgbWF0ZXJpYWwgaW4gdGhlIGxpc3QgKGVpdGhlciBbJ2tpY2tib2FyZCcsICdwdWxsYnVveSddLCBbJ2tpY2tib2FyZCddLCBvciBbJ3B1bGxidW95J10pXG4gICAgICAgIG1hdGVyaWFsLmZvckVhY2goKHdhcm11cFRvb2wpID0+IHtcbiAgICAgICAgICAvLyB3ZSBzZXQgYSBjb3VudGVyIGluIG9yZGVyIHRvIHNlbGVjdCBsZXNzIG1hdGVyaWFsIGV4ZXJjaXNlc1xuICAgICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgICAvLyBzZWxlY3QgcmFuZG9tIGV4ZXJjaXNlIHdpdGggdGhhdCB3YXJtdXBtYXRlcmlhbFxuICAgICAgICAgIGxldCBhcnJheVRvU2VsZWN0RnJvbSA9IGV4c19tYXRlcmlhbC5maWx0ZXIoKGV4KSA9PlxuICAgICAgICAgICAgZXgubWF0ZXJpYWwuaW5jbHVkZXMod2FybXVwVG9vbClcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChhcnJheVRvU2VsZWN0RnJvbS5sZW5ndGggPiAwICYmIGNvdW50ZXIgPCAxKSB7XG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSByYW5kb21WYWx1ZShhcnJheVRvU2VsZWN0RnJvbSk7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBleHNfbWF0ZXJpYWwuaW5kZXhPZihzZWxlY3RlZCk7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgaXQgaXMgbm90IHJlcGVhdGVkIGluIHRoZSBibG9jayBieSByZW1vdmluZyB0aGUgZXhlcmNpc2UgZnJvbSBmaWx0ZXJlZEV4ZXJjaXNlcywgYW5kIGZyb20gdGhlIGV4c19tYXRlcmlhbCBsaXN0IChub3QgcmVhbGx5IGhhcHBlbmluZyBhcyB3ZSBkb250IGhhdmUgYW55IGV4ZXJjaXNlIHdpdGggYm90aCBwdWxsYnVveSBhbmQga2lja2JvYXJkKVxuICAgICAgICAgICAgbGV0IGluZGV4MiA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgKGVsKSA9PiBlbC5uYW1lID09IHNlbGVjdGVkLm5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBleHNfbWF0ZXJpYWwuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGZpbHRlcmVkRXhlcmNpc2VzLnNwbGljZShpbmRleDIsIDEpO1xuICAgICAgICAgICAgLy8gcHVzaCB0byB3YXJtdXBcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgICB3YXJtdXBFeGVyY2lzZXMucHVzaChzZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBlbmRpbmdFeGVyY2lzZXMtLTtcbiAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gaWYgc3BlY2lmaWVkIG11c2NsZXMgaW4gdGhlIGZvcm1cbiAgICAgIGlmIChtdXNjbGUubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBmaWx0ZXIgdGhvc2UgZXhlcmNpc2VzIHRoYXQgaGF2ZSB0aGF0L3Rob3NlIHNwZWNpZmljIG11c2NsZXNcbiAgICAgICAgbGV0IG5fbXVzY2xlID0gcmFuZG9tSW50RnJvbUludGVydmFsKDEsIDIpO1xuICAgICAgICBsZXQgZXhzX211c2NsZSA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbHRlcigoZXgpID0+XG4gICAgICAgICAgZXgubXVzY2xlLnNvbWUoKHBhcnQpID0+IG11c2NsZS5pbmNsdWRlcyhwYXJ0KSlcbiAgICAgICAgKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuX211c2NsZTsgaSsrKSB7XG4gICAgICAgICAgaWYgKHBlbmRpbmdFeGVyY2lzZXMgPiAwICYmIGV4c19tdXNjbGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gcHVzaCByYW5kb20gZXhlcmNpc2Ugd2l0aCB0aGF0IG11c2NsZVxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gcmFuZG9tVmFsdWUoZXhzX211c2NsZSk7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBleHNfbXVzY2xlLmluZGV4T2Yoc2VsZWN0ZWQpO1xuICAgICAgICAgICAgbGV0IGluZGV4MiA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgKGVsKSA9PiBlbC5uYW1lID09IHNlbGVjdGVkLm5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBleHNfbXVzY2xlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICBmaWx0ZXJlZEV4ZXJjaXNlcy5zcGxpY2UoaW5kZXgyLCAxKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgICB3YXJtdXBFeGVyY2lzZXMucHVzaChzZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBlbmRpbmdFeGVyY2lzZXMtLTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGZpbHRlciBvdXQgZXhlcmNpc2VzIHdpdGggbWF0ZXJpYWxcbiAgICAgIGxldCBleHNfbGVmdCA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbHRlcigoZXgpID0+IGV4Lm1hdGVyaWFsLmxlbmd0aCA9PSAwKTtcbiAgICAgIC8vIGZpbHRlciBvdXQgZXhlcmNpc2VzIHNlbGVjdGVkIC0tIGFscmVhZHkgZG9uZSFcbiAgICAgIC8vIGZvbGxvd2luZyBsb29wIHdvbid0IHJ1biBpZiBwZW5kaW5nRXhlcmNpc2VzPTBcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGVuZGluZ0V4ZXJjaXNlczsgaSsrKSB7XG4gICAgICAgIC8vIHNlbGVjdCByYW5kb20gZXhlcmNpc2VcbiAgICAgICAgbGV0IHNlbGVjdGVkID0gcmFuZG9tVmFsdWUoZXhzX2xlZnQpO1xuICAgICAgICBsZXQgaW5kZXggPSBleHNfbGVmdC5pbmRleE9mKHNlbGVjdGVkKTtcbiAgICAgICAgZXhzX2xlZnQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgd2FybXVwRXhlcmNpc2VzLnB1c2goc2VsZWN0ZWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaHVmZmxlKHdhcm11cEV4ZXJjaXNlcyk7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgeyBjb3B5X2ZpbHRlcl9zZWxlY3Rfd2FybXVwRXhlcmNpc2VzIH0gPSB3YXJtdXBSZWR1Y2VyLmFjdGlvbnM7XG5leHBvcnQgZGVmYXVsdCB3YXJtdXBSZWR1Y2VyLnJlZHVjZXI7XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgcmFuZG9tSW50RnJvbUludGVydmFsIGZyb20gXCIuLi9mdW5jdGlvbnMvcmFuZG9tSW50RnJvbUludGVydmFsXCI7XG5pbXBvcnQgc2h1ZmZsZSBmcm9tIFwiLi4vZnVuY3Rpb25zL3NodWZmbGVcIjtcbmltcG9ydCByYW5kb21WYWx1ZSBmcm9tIFwiLi4vZnVuY3Rpb25zL3JhbmRvbVZhbHVlXCI7XG5cbmV4cG9ydCBjb25zdCB0ZWNobmlxdWVSZWR1Y2VyID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiBcInRlY2huaXF1ZVwiLFxuICBpbml0aWFsU3RhdGU6IFtdLFxuICByZWR1Y2Vyczoge1xuICAgIGNvcHlfZmlsdGVyX3NlbGVjdF90ZWNobmlxdWVFeGVyY2lzZXMoc3RhdGUsIGFjdGlvbikge1xuICAgICAgbGV0IHsgZmlsdGVyZWRFeGVyY2lzZXMgfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgY29uc3QgeyBtYXRlcmlhbCwgbXVzY2xlLCBtZXRlcnMsIGxldmVsIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGNvbnN0IHRlY2huaXF1ZUV4ZXJjaXNlcyA9IFtdO1xuICAgICAgY29uc3QgbWF4ID0gMztcbiAgICAgIGNvbnN0IG1pbiA9IDE7XG4gICAgICBsZXQgbnVtYmVyRXhlcmNpc2VzO1xuICAgICAgZG8ge1xuICAgICAgICBudW1iZXJFeGVyY2lzZXMgPSByYW5kb21JbnRGcm9tSW50ZXJ2YWwobWluLCBtYXgpO1xuICAgICAgfSB3aGlsZSAobWV0ZXJzIC8gbnVtYmVyRXhlcmNpc2VzIDwgMjUpO1xuICAgICAgLy8gY29ybmVyIGNhc2UgZm9yIGxldmVsIDEgKHdlIGRvbnQgaGF2ZSBtYW55IGV4ZXJjaXNlcyBpbiB0aGUgbGlzdClcbiAgICAgIGlmIChsZXZlbCA9PSAxKSB7XG4gICAgICAgIGlmIChmaWx0ZXJlZEV4ZXJjaXNlcy5sZW5ndGggPD0gNCkge1xuICAgICAgICAgIG51bWJlckV4ZXJjaXNlcyA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbHRlcmVkRXhlcmNpc2VzLmxlbmd0aCA+IDQgJiYgZmlsdGVyZWRFeGVyY2lzZXMubGVuZ3RoIDwgMTApIHtcbiAgICAgICAgICBpZiAobWV0ZXJzIC8gMyA+PSAyNSkge1xuICAgICAgICAgICAgbnVtYmVyRXhlcmNpc2VzID0gMztcbiAgICAgICAgICB9IGVsc2UgaWYgKG1ldGVycyAvIDIgPj0gMjUpIHtcbiAgICAgICAgICAgIG51bWJlckV4ZXJjaXNlcyA9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG51bWJlckV4ZXJjaXNlcyA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgcGVuZGluZ0V4ZXJjaXNlcyA9IG51bWJlckV4ZXJjaXNlcztcbiAgICAgIGZpbHRlcmVkRXhlcmNpc2VzID0gZmlsdGVyZWRFeGVyY2lzZXMuZmlsdGVyKChleCkgPT5cbiAgICAgICAgZXguYmxvY2suaW5jbHVkZXMoXCJ0ZWNobmlxdWVcIilcbiAgICAgICk7XG4gICAgICAvLyAvLyByZW1vdmUgZXhlcmNpc2VzIHRoYXQgYXJlIGFscmVhZHkgaW4gd2FybXVwIC0tPiB1c2UgXy5kaWZmZXJlbmNlIGZ1bmN0aW9uXG4gICAgICAvLyBmaWx0ZXJlZEV4ZXJjaXNlcz1fLmRpZmZlcmVuY2UoZmlsdGVyZWRFeGVyY2lzZXMsIHdhcm11cCk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhmaWx0ZXJlZEV4ZXJjaXNlcyk7XG4gICAgICAvLyBsb2dpYyBmb3IgZGV0ZXJtaW5pc3RpYytyYW5kb20gc2VsZWN0aW9uOlxuICAgICAgLy8gbWFpbi90ZWNobmlxdWUgPT4gdXNlIGFsbCB0eXBlcyBvZiBtYXRlcmlhbDogYmVnaW5uZXIncyBtYXRlcmlhbHMgYW5kIGFkdmFuY2VkIGVxdWlwbWVudFxuICAgICAgaWYgKG1hdGVyaWFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gZmlsdGVyIGluIGV4ZXJjaXNlcyBvZiBvdXIgbGlzdCB0aGF0IGNvbnRhaW4gYW55IG1hdGVyaWFsIHRoYXQgdGhlIHN3aW1tZXIgaXMgdXNpbmdcbiAgICAgICAgbGV0IGV4c19tYXRlcmlhbCA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbHRlcigoZXgpID0+XG4gICAgICAgICAgZXgubWF0ZXJpYWwuc29tZSgodG9vbCkgPT4gbWF0ZXJpYWwuaW5jbHVkZXModG9vbCkpXG4gICAgICAgICk7XG4gICAgICAgIC8vIGFsdGVyIG9yZGVyIG9mIG1hdGVyaWFsIGFycmF5IHRvIHN0YXJ0IHBpY2tpbmcgcmFuZG9tIG1hdGVyaWFscyBhcyB3ZSBnZW5lcmF0ZSB0aGUgYmxvY2tcbiAgICAgICAgc2h1ZmZsZShtYXRlcmlhbCk7XG4gICAgICAgIC8vIGZvciBldmVyeSBtYXRlcmlhbCBpbiB0aGUgbGlzdCAoZWl0aGVyIFsna2lja2JvYXJkJywgJ3B1bGxidW95JywgJ3BhZGRsZXMnLCAnZmlucycuLi5dLCBbJ2tpY2tib2FyZCddLCBldGMpXG4gICAgICAgIG1hdGVyaWFsLmZvckVhY2goKHRlY2huaXF1ZVRvb2wpID0+IHtcbiAgICAgICAgICAvLyB3ZSBzZXQgYSBjb3VudGVyIGluIG9yZGVyIHRvIHNlbGVjdCBsZXNzIG1hdGVyaWFsIGV4ZXJjaXNlc1xuICAgICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgICAvLyBzZWxlY3QgcmFuZG9tIGV4ZXJjaXNlIHdpdGggdGhhdCB0ZWNobmlxdWVtYXRlcmlhbFxuICAgICAgICAgIGxldCBhcnJheVRvU2VsZWN0RnJvbSA9IGV4c19tYXRlcmlhbC5maWx0ZXIoKGV4KSA9PlxuICAgICAgICAgICAgZXgubWF0ZXJpYWwuaW5jbHVkZXModGVjaG5pcXVlVG9vbClcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGFycmF5VG9TZWxlY3RGcm9tLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgIGNvdW50ZXIgPCAzICYmXG4gICAgICAgICAgICBwZW5kaW5nRXhlcmNpc2VzID4gMFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gcmFuZG9tVmFsdWUoYXJyYXlUb1NlbGVjdEZyb20pO1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gZXhzX21hdGVyaWFsLmluZGV4T2Yoc2VsZWN0ZWQpO1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGl0IGlzIG5vdCByZXBlYXRlZCBpbiB0aGUgYmxvY2sgYnkgcmVtb3ZpbmcgdGhlIGV4ZXJjaXNlIGZyb20gZmlsdGVyZWRFeGVyY2lzZXMsIGFuZCBmcm9tIHRoZSBleHNfbWF0ZXJpYWwgbGlzdFxuICAgICAgICAgICAgbGV0IGluZGV4MiA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgKGVsKSA9PiBlbC5uYW1lID09IHNlbGVjdGVkLm5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBleHNfbWF0ZXJpYWwuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGZpbHRlcmVkRXhlcmNpc2VzLnNwbGljZShpbmRleDIsIDEpO1xuICAgICAgICAgICAgLy8gcHVzaCB0byB0ZWNobmlxdWVcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgICB0ZWNobmlxdWVFeGVyY2lzZXMucHVzaChzZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBwcm9ibGVtIGhlZWVlcmVcbiAgICAgICAgICAgIHBlbmRpbmdFeGVyY2lzZXMtLTtcbiAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gaWYgc3BlY2lmaWVkIG11c2NsZXMgaW4gdGhlIGZvcm1cbiAgICAgIGlmIChtdXNjbGUubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBmaWx0ZXIgdGhvc2UgZXhlcmNpc2VzIHRoYXQgaGF2ZSB0aGF0L3Rob3NlIHNwZWNpZmljIG11c2NsZXNcbiAgICAgICAgbGV0IG5fbXVzY2xlID0gcmFuZG9tSW50RnJvbUludGVydmFsKDEsIDIpO1xuICAgICAgICBsZXQgZXhzX211c2NsZSA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbHRlcigoZXgpID0+XG4gICAgICAgICAgZXgubXVzY2xlLnNvbWUoKHBhcnQpID0+IG11c2NsZS5pbmNsdWRlcyhwYXJ0KSlcbiAgICAgICAgKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuX211c2NsZTsgaSsrKSB7XG4gICAgICAgICAgaWYgKHBlbmRpbmdFeGVyY2lzZXMgPiAwICYmIGV4c19tdXNjbGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gcHVzaCByYW5kb20gZXhlcmNpc2Ugd2l0aCB0aGF0IG11c2NsZVxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gcmFuZG9tVmFsdWUoZXhzX211c2NsZSk7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBleHNfbXVzY2xlLmluZGV4T2Yoc2VsZWN0ZWQpO1xuICAgICAgICAgICAgbGV0IGluZGV4MiA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgKGVsKSA9PiBlbC5uYW1lID09IHNlbGVjdGVkLm5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBleHNfbXVzY2xlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICBmaWx0ZXJlZEV4ZXJjaXNlcy5zcGxpY2UoaW5kZXgyLCAxKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgICB0ZWNobmlxdWVFeGVyY2lzZXMucHVzaChzZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBlbmRpbmdFeGVyY2lzZXMtLTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGZpbHRlciBvdXQgZXhlcmNpc2VzIHdpdGggbWF0ZXJpYWxcbiAgICAgIGxldCBleHNfbGVmdCA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbHRlcigoZXgpID0+IGV4Lm1hdGVyaWFsLmxlbmd0aCA9PSAwKTtcbiAgICAgIC8vIGZpbHRlciBvdXQgZXhlcmNpc2VzIHNlbGVjdGVkIC0tIGFscmVhZHkgZG9uZSFcbiAgICAgIC8vIGZvbGxvd2luZyBsb29wIHdvbid0IHJ1biBpZiBwZW5kaW5nRXhlcmNpc2VzPTBcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGVuZGluZ0V4ZXJjaXNlczsgaSsrKSB7XG4gICAgICAgIC8vIHNlbGVjdCByYW5kb20gZXhlcmNpc2VcbiAgICAgICAgbGV0IHNlbGVjdGVkID0gcmFuZG9tVmFsdWUoZXhzX2xlZnQpO1xuICAgICAgICBsZXQgaW5kZXggPSBleHNfbGVmdC5pbmRleE9mKHNlbGVjdGVkKTtcbiAgICAgICAgZXhzX2xlZnQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgdGVjaG5pcXVlRXhlcmNpc2VzLnB1c2goc2VsZWN0ZWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaHVmZmxlKHRlY2huaXF1ZUV4ZXJjaXNlcyk7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgeyBjb3B5X2ZpbHRlcl9zZWxlY3RfdGVjaG5pcXVlRXhlcmNpc2VzIH0gPVxuICB0ZWNobmlxdWVSZWR1Y2VyLmFjdGlvbnM7XG5leHBvcnQgZGVmYXVsdCB0ZWNobmlxdWVSZWR1Y2VyLnJlZHVjZXI7XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgcmFuZG9tSW50RnJvbUludGVydmFsIGZyb20gXCIuLi9mdW5jdGlvbnMvcmFuZG9tSW50RnJvbUludGVydmFsXCI7XG5pbXBvcnQgc2h1ZmZsZSBmcm9tIFwiLi4vZnVuY3Rpb25zL3NodWZmbGVcIjtcbmltcG9ydCByYW5kb21WYWx1ZSBmcm9tIFwiLi4vZnVuY3Rpb25zL3JhbmRvbVZhbHVlXCI7XG5cbmV4cG9ydCBjb25zdCBtYWluUmVkdWNlciA9IGNyZWF0ZVNsaWNlKHtcbiAgbmFtZTogXCJtYWluXCIsXG4gIGluaXRpYWxTdGF0ZTogW10sXG4gIHJlZHVjZXJzOiB7XG4gICAgY29weV9maWx0ZXJfc2VsZWN0X21haW5FeGVyY2lzZXMoc3RhdGUsIGFjdGlvbikge1xuICAgICAgbGV0IHsgZmlsdGVyZWRFeGVyY2lzZXMgfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgY29uc3QgeyBtYXRlcmlhbCwgbXVzY2xlLCBtZXRlcnMsIGxldmVsIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGNvbnN0IG1haW5FeGVyY2lzZXMgPSBbXTtcbiAgICAgIGNvbnN0IG1heCA9IDQ7XG4gICAgICBjb25zdCBtaW4gPSAxO1xuICAgICAgbGV0IG51bWJlckV4ZXJjaXNlcztcbiAgICAgIGRvIHtcbiAgICAgICAgbnVtYmVyRXhlcmNpc2VzID0gcmFuZG9tSW50RnJvbUludGVydmFsKG1pbiwgbWF4KTtcbiAgICAgIH0gd2hpbGUgKG1ldGVycyAvIG51bWJlckV4ZXJjaXNlcyA8IDI1KTtcbiAgICAgIC8vIGNvcm5lciBjYXNlIGZvciBsZXZlbCAxICh3ZSBkb250IGhhdmUgbWFueSBleGVyY2lzZXMgaW4gdGhlIGxpc3QpXG4gICAgICBpZiAobGV2ZWwgPT0gMSkge1xuICAgICAgICBpZiAoZmlsdGVyZWRFeGVyY2lzZXMubGVuZ3RoIDw9IDQpIHtcbiAgICAgICAgICBpZiAobWV0ZXJzIC8gMiA+PSAyNSAmJiBmaWx0ZXJlZEV4ZXJjaXNlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBudW1iZXJFeGVyY2lzZXMgPSAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBudW1iZXJFeGVyY2lzZXMgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlsdGVyZWRFeGVyY2lzZXMubGVuZ3RoID4gNCAmJiBmaWx0ZXJlZEV4ZXJjaXNlcy5sZW5ndGggPCAxMCkge1xuICAgICAgICAgIGlmIChtZXRlcnMgLyAzID49IDI1KSB7XG4gICAgICAgICAgICBudW1iZXJFeGVyY2lzZXMgPSAzO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWV0ZXJzIC8gMiA+PSAyNSkge1xuICAgICAgICAgICAgbnVtYmVyRXhlcmNpc2VzID0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVtYmVyRXhlcmNpc2VzID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBwZW5kaW5nRXhlcmNpc2VzID0gbnVtYmVyRXhlcmNpc2VzO1xuICAgICAgZmlsdGVyZWRFeGVyY2lzZXMgPSBmaWx0ZXJlZEV4ZXJjaXNlcy5maWx0ZXIoKGV4KSA9PlxuICAgICAgICBleC5ibG9jay5pbmNsdWRlcyhcIm1haW5cIilcbiAgICAgICk7XG4gICAgICAvLyBsb2dpYyBmb3IgZGV0ZXJtaW5pc3RpYytyYW5kb20gc2VsZWN0aW9uOlxuICAgICAgLy8gbWFpbi9tYWluID0+IHVzZSBhbGwgdHlwZXMgb2YgbWF0ZXJpYWw6IGJlZ2lubmVyJ3MgbWF0ZXJpYWxzIGFuZCBhZHZhbmNlZCBlcXVpcG1lbnRcbiAgICAgIGlmIChtYXRlcmlhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGZpbHRlciBpbiBleGVyY2lzZXMgb2Ygb3VyIGxpc3QgdGhhdCBjb250YWluIGFueSBtYXRlcmlhbCB0aGF0IHRoZSBzd2ltbWVyIGlzIHVzaW5nXG4gICAgICAgIGxldCBleHNfbWF0ZXJpYWwgPSBmaWx0ZXJlZEV4ZXJjaXNlcy5maWx0ZXIoKGV4KSA9PlxuICAgICAgICAgIGV4Lm1hdGVyaWFsLnNvbWUoKHRvb2wpID0+IG1hdGVyaWFsLmluY2x1ZGVzKHRvb2wpKVxuICAgICAgICApO1xuICAgICAgICAvLyBhbHRlciBvcmRlciBvZiBtYXRlcmlhbCBhcnJheSB0byBzdGFydCBwaWNraW5nIHJhbmRvbSBtYXRlcmlhbHMgYXMgd2UgZ2VuZXJhdGUgdGhlIGJsb2NrXG4gICAgICAgIHNodWZmbGUobWF0ZXJpYWwpO1xuICAgICAgICAvLyBmb3IgZXZlcnkgbWF0ZXJpYWwgaW4gdGhlIGxpc3QgKGVpdGhlciBbJ2tpY2tib2FyZCcsICdwdWxsYnVveScsICdwYWRkbGVzJywgJ2ZpbnMnLi4uXSwgWydraWNrYm9hcmQnXSwgZXRjKVxuICAgICAgICBtYXRlcmlhbC5mb3JFYWNoKChtYWluVG9vbCkgPT4ge1xuICAgICAgICAgIC8vIHdlIHNldCBhIGNvdW50ZXIgaW4gb3JkZXIgdG8gc2VsZWN0IGxlc3MgbWF0ZXJpYWwgZXhlcmNpc2VzXG4gICAgICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgICAgICAgIC8vIHNlbGVjdCByYW5kb20gZXhlcmNpc2Ugd2l0aCB0aGF0IG1haW5tYXRlcmlhbFxuICAgICAgICAgIGxldCBhcnJheVRvU2VsZWN0RnJvbSA9IGV4c19tYXRlcmlhbC5maWx0ZXIoKGV4KSA9PlxuICAgICAgICAgICAgZXgubWF0ZXJpYWwuaW5jbHVkZXMobWFpblRvb2wpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBhcnJheVRvU2VsZWN0RnJvbS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICBjb3VudGVyIDwgMiAmJlxuICAgICAgICAgICAgcGVuZGluZ0V4ZXJjaXNlcyA+IDBcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZCA9IHJhbmRvbVZhbHVlKGFycmF5VG9TZWxlY3RGcm9tKTtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IGV4c19tYXRlcmlhbC5pbmRleE9mKHNlbGVjdGVkKTtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBpdCBpcyBub3QgcmVwZWF0ZWQgaW4gdGhlIGJsb2NrIGJ5IHJlbW92aW5nIHRoZSBleGVyY2lzZSBmcm9tIGZpbHRlcmVkRXhlcmNpc2VzLCBhbmQgZnJvbSB0aGUgZXhzX21hdGVyaWFsIGxpc3RcbiAgICAgICAgICAgIGxldCBpbmRleDIgPSBmaWx0ZXJlZEV4ZXJjaXNlcy5maW5kSW5kZXgoXG4gICAgICAgICAgICAgIChlbCkgPT4gZWwubmFtZSA9PSBzZWxlY3RlZC5uYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXhzX21hdGVyaWFsLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICBmaWx0ZXJlZEV4ZXJjaXNlcy5zcGxpY2UoaW5kZXgyLCAxKTtcbiAgICAgICAgICAgIC8vIHB1c2ggdG8gbWFpblxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgIG1haW5FeGVyY2lzZXMucHVzaChzZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBlbmRpbmdFeGVyY2lzZXMtLTtcbiAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gaWYgc3BlY2lmaWVkIG11c2NsZXMgaW4gdGhlIGZvcm1cbiAgICAgIGlmIChtdXNjbGUubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBmaWx0ZXIgdGhvc2UgZXhlcmNpc2VzIHRoYXQgaGF2ZSB0aGF0L3Rob3NlIHNwZWNpZmljIG11c2NsZXNcbiAgICAgICAgbGV0IG5fbXVzY2xlID0gcmFuZG9tSW50RnJvbUludGVydmFsKDEsIDIpO1xuICAgICAgICBsZXQgZXhzX211c2NsZSA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbHRlcigoZXgpID0+XG4gICAgICAgICAgZXgubXVzY2xlLnNvbWUoKHBhcnQpID0+IG11c2NsZS5pbmNsdWRlcyhwYXJ0KSlcbiAgICAgICAgKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuX211c2NsZTsgaSsrKSB7XG4gICAgICAgICAgaWYgKHBlbmRpbmdFeGVyY2lzZXMgPiAwICYmIGV4c19tdXNjbGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gcHVzaCByYW5kb20gZXhlcmNpc2Ugd2l0aCB0aGF0IG11c2NsZVxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gcmFuZG9tVmFsdWUoZXhzX211c2NsZSk7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBleHNfbXVzY2xlLmluZGV4T2Yoc2VsZWN0ZWQpO1xuICAgICAgICAgICAgbGV0IGluZGV4MiA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgKGVsKSA9PiBlbC5uYW1lID09IHNlbGVjdGVkLm5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBleHNfbXVzY2xlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICBmaWx0ZXJlZEV4ZXJjaXNlcy5zcGxpY2UoaW5kZXgyLCAxKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgICBtYWluRXhlcmNpc2VzLnB1c2goc2VsZWN0ZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwZW5kaW5nRXhlcmNpc2VzLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBmaWx0ZXIgb3V0IGV4ZXJjaXNlcyB3aXRoIG1hdGVyaWFsXG4gICAgICBsZXQgZXhzX2xlZnQgPSBmaWx0ZXJlZEV4ZXJjaXNlcy5maWx0ZXIoKGV4KSA9PiBleC5tYXRlcmlhbC5sZW5ndGggPT0gMCk7XG4gICAgICAvLyBmaWx0ZXIgb3V0IGV4ZXJjaXNlcyBzZWxlY3RlZCAtLSBhbHJlYWR5IGRvbmUhXG4gICAgICAvLyBmb2xsb3dpbmcgbG9vcCB3b24ndCBydW4gaWYgcGVuZGluZ0V4ZXJjaXNlcz0wXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBlbmRpbmdFeGVyY2lzZXM7IGkrKykge1xuICAgICAgICAvLyBzZWxlY3QgcmFuZG9tIGV4ZXJjaXNlXG4gICAgICAgIGxldCBzZWxlY3RlZCA9IHJhbmRvbVZhbHVlKGV4c19sZWZ0KTtcbiAgICAgICAgbGV0IGluZGV4ID0gZXhzX2xlZnQuaW5kZXhPZihzZWxlY3RlZCk7XG4gICAgICAgIGV4c19sZWZ0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgIG1haW5FeGVyY2lzZXMucHVzaChzZWxlY3RlZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNodWZmbGUobWFpbkV4ZXJjaXNlcyk7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgeyBjb3B5X2ZpbHRlcl9zZWxlY3RfbWFpbkV4ZXJjaXNlcyB9ID0gbWFpblJlZHVjZXIuYWN0aW9ucztcbmV4cG9ydCBkZWZhdWx0IG1haW5SZWR1Y2VyLnJlZHVjZXI7XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgcmFuZG9tSW50RnJvbUludGVydmFsIGZyb20gXCIuLi9mdW5jdGlvbnMvcmFuZG9tSW50RnJvbUludGVydmFsXCI7XG5pbXBvcnQgc2h1ZmZsZSBmcm9tIFwiLi4vZnVuY3Rpb25zL3NodWZmbGVcIjtcbmltcG9ydCByYW5kb21WYWx1ZSBmcm9tIFwiLi4vZnVuY3Rpb25zL3JhbmRvbVZhbHVlXCI7XG5cbmV4cG9ydCBjb25zdCBjb29sZG93blJlZHVjZXIgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6IFwiY29vbGRvd25cIixcbiAgaW5pdGlhbFN0YXRlOiBbXSxcbiAgcmVkdWNlcnM6IHtcbiAgICBjb3B5X2ZpbHRlcl9zZWxlY3RfY29vbGRvd25FeGVyY2lzZXMoc3RhdGUsIGFjdGlvbikge1xuICAgICAgbGV0IHsgZmlsdGVyZWRFeGVyY2lzZXMgfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgY29uc3QgeyBtYXRlcmlhbCwgbWV0ZXJzLCBsZXZlbCB9ID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICBjb25zdCBjb29sZG93bkV4ZXJjaXNlcyA9IFtdO1xuICAgICAgY29uc3QgbWF4ID0gMztcbiAgICAgIGNvbnN0IG1pbiA9IDE7XG4gICAgICBsZXQgbnVtYmVyRXhlcmNpc2VzO1xuICAgICAgZG8ge1xuICAgICAgICBudW1iZXJFeGVyY2lzZXMgPSByYW5kb21JbnRGcm9tSW50ZXJ2YWwobWluLCBtYXgpO1xuICAgICAgfSB3aGlsZSAobWV0ZXJzIC8gbnVtYmVyRXhlcmNpc2VzIDwgMjUpO1xuICAgICAgLy8gY29ybmVyIGNhc2UgZm9yIGxldmVsIDEgKHdlIGRvbnQgaGF2ZSBtYW55IGV4ZXJjaXNlcyBpbiB0aGUgbGlzdClcbiAgICAgIGlmIChsZXZlbCA9PSAxKSB7XG4gICAgICAgIGlmIChmaWx0ZXJlZEV4ZXJjaXNlcy5sZW5ndGggPD0gNCkge1xuICAgICAgICAgIGlmIChtZXRlcnMgLyAyID49IDI1ICYmIGZpbHRlcmVkRXhlcmNpc2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIG51bWJlckV4ZXJjaXNlcyA9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG51bWJlckV4ZXJjaXNlcyA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaWx0ZXJlZEV4ZXJjaXNlcy5sZW5ndGggPiA0ICYmIGZpbHRlcmVkRXhlcmNpc2VzLmxlbmd0aCA8IDEwKSB7XG4gICAgICAgICAgaWYgKG1ldGVycyAvIDMgPj0gMjUpIHtcbiAgICAgICAgICAgIG51bWJlckV4ZXJjaXNlcyA9IDM7XG4gICAgICAgICAgfSBlbHNlIGlmIChtZXRlcnMgLyAyID49IDI1KSB7XG4gICAgICAgICAgICBudW1iZXJFeGVyY2lzZXMgPSAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBudW1iZXJFeGVyY2lzZXMgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHBlbmRpbmdFeGVyY2lzZXMgPSBudW1iZXJFeGVyY2lzZXM7XG4gICAgICBmaWx0ZXJlZEV4ZXJjaXNlcyA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbHRlcigoZXgpID0+XG4gICAgICAgIGV4LmJsb2NrLmluY2x1ZGVzKFwiY29vbGRvd25cIilcbiAgICAgICk7XG4gICAgICAvLyBsb2dpYyBmb3IgZGV0ZXJtaW5pc3RpYytyYW5kb20gc2VsZWN0aW9uOlxuICAgICAgLy8gY29vbGRvd24gPT4gZG8gbm90IHVzZSBhZHZhbmNlZCBlcXVpcG1lbnRcbiAgICAgIGlmIChcbiAgICAgICAgbWF0ZXJpYWwubGVuZ3RoID4gMCAmJlxuICAgICAgICAobWF0ZXJpYWwuaW5jbHVkZXMoXCJraWNrYm9hcmRcIikgfHxcbiAgICAgICAgICBtYXRlcmlhbC5pbmNsdWRlcyhcInB1bGxidW95XCIpIHx8XG4gICAgICAgICAgbWF0ZXJpYWwuaW5jbHVkZXMoXCJzbm9ya2VsXCIpKVxuICAgICAgKSB7XG4gICAgICAgIC8vIGZpbHRlciBvdXQgZXhzIHdpdGggZmlucywgcGFkZGxlcyBvciBzbm9ya2VsXG4gICAgICAgIGxldCBleHNfbWF0ZXJpYWwgPSBmaWx0ZXJlZEV4ZXJjaXNlc1xuICAgICAgICAgIC5maWx0ZXIoKGV4KSA9PiAhZXgubWF0ZXJpYWwuaW5jbHVkZXMoXCJwYWRkbGVzXCIpKVxuICAgICAgICAgIC5maWx0ZXIoKGV4KSA9PiAhZXgubWF0ZXJpYWwuaW5jbHVkZXMoXCJmaW5zXCIpKTtcblxuICAgICAgICAvLyBmaWx0ZXIgaW4gZXhlcmNpc2VzIG9mIG91ciBsaXN0IHRoYXQgY29udGFpbiBhbnkgbWF0ZXJpYWwgdGhhdCB0aGUgc3dpbW1lciBpcyB1c2luZ1xuICAgICAgICBleHNfbWF0ZXJpYWwgPSBleHNfbWF0ZXJpYWwuZmlsdGVyKChleCkgPT5cbiAgICAgICAgICBleC5tYXRlcmlhbC5zb21lKCh0b29sKSA9PiBtYXRlcmlhbC5pbmNsdWRlcyh0b29sKSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBtb2RpZnkgbWF0ZXJpYWwgcGF5bG9hZCB0byBpbmNsdWRlIG9ubHkgY29vbGRvd24gbWF0ZXJpYWxzXG4gICAgICAgIG1hdGVyaWFsLmZpbHRlcigodG9vbCkgPT4gdG9vbCAhPSBcImZpbnNcIik7XG4gICAgICAgIG1hdGVyaWFsLmZpbHRlcigodG9vbCkgPT4gdG9vbCAhPSBcInBhZGRsZXNcIik7XG4gICAgICAgIC8vIGFsdGVyIG9yZGVyIG9mIG1hdGVyaWFsIGFycmF5IHRvIHN0YXJ0IHBpY2tpbmcgcmFuZG9tIG1hdGVyaWFscyBhcyB3ZSBnZW5lcmF0ZSB0aGUgYmxvY2tcbiAgICAgICAgc2h1ZmZsZShtYXRlcmlhbCk7XG4gICAgICAgIC8vIGZvciBldmVyeSBtYXRlcmlhbCBpbiB0aGUgbGlzdCAoZWl0aGVyIFsnc25vcmtlbCcsJ2tpY2tib2FyZCcsICdwdWxsYnVveSddLCBbJ2tpY2tib2FyZCddLCBvciBbJ3B1bGxidW95J10pXG4gICAgICAgIG1hdGVyaWFsLmZvckVhY2goKGNvb2xkb3duVG9vbCkgPT4ge1xuICAgICAgICAgIC8vIHdlIHNldCBhIGNvdW50ZXIgaW4gb3JkZXIgdG8gc2VsZWN0IGxlc3MgbWF0ZXJpYWwgZXhlcmNpc2VzXG4gICAgICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgICAgICAgIGlmIChwZW5kaW5nRXhlcmNpc2VzID4gMCAmJiBjb3VudGVyIDwgMSkge1xuICAgICAgICAgICAgLy8gc2VsZWN0IHJhbmRvbSBleGVyY2lzZSB3aXRoIHRoYXQgY29vbGRvd25tYXRlcmlhbFxuICAgICAgICAgICAgbGV0IGFycmF5VG9TZWxlY3RGcm9tID0gZXhzX21hdGVyaWFsLmZpbHRlcigoZXgpID0+XG4gICAgICAgICAgICAgIGV4Lm1hdGVyaWFsLmluY2x1ZGVzKGNvb2xkb3duVG9vbClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoYXJyYXlUb1NlbGVjdEZyb20ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSByYW5kb21WYWx1ZShhcnJheVRvU2VsZWN0RnJvbSk7XG4gICAgICAgICAgICAgIGxldCBpbmRleCA9IGV4c19tYXRlcmlhbC5pbmRleE9mKHNlbGVjdGVkKTtcbiAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGl0IGlzIG5vdCByZXBlYXRlZCBpbiB0aGUgYmxvY2sgYnkgcmVtb3ZpbmcgdGhlIGV4ZXJjaXNlIGZyb20gZmlsdGVyZWRFeGVyY2lzZXMsIGFuZCBmcm9tIHRoZSBleHNfbWF0ZXJpYWwgbGlzdCAobm90IHJlYWxseSBoYXBwZW5pbmcgYXMgd2UgZG9udCBoYXZlIGFueSBleGVyY2lzZSB3aXRoIGJvdGggcHVsbGJ1b3kgYW5kIGtpY2tib2FyZClcbiAgICAgICAgICAgICAgbGV0IGluZGV4MiA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICAoZWwpID0+IGVsLm5hbWUgPT0gc2VsZWN0ZWQubmFtZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBleHNfbWF0ZXJpYWwuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgZmlsdGVyZWRFeGVyY2lzZXMuc3BsaWNlKGluZGV4MiwgMSk7XG4gICAgICAgICAgICAgIC8vIHB1c2ggdG8gY29vbGRvd25cbiAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgY29vbGRvd25FeGVyY2lzZXMucHVzaChzZWxlY3RlZCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBwZW5kaW5nRXhlcmNpc2VzLS07XG4gICAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gLy8gaWYgc3BlY2lmaWVkIG11c2NsZXMgaW4gdGhlIGZvcm1cbiAgICAgIC8vIGlmKG11c2NsZS5sZW5ndGg+MCl7XG4gICAgICAvLyAgICAgLy8gZmlsdGVyIHRob3NlIGV4ZXJjaXNlcyB0aGF0IGhhdmUgdGhhdC90aG9zZSBzcGVjaWZpYyBtdXNjbGVzXG4gICAgICAvLyAgICAgbGV0IG5fbXVzY2xlID0gcmFuZG9tSW50RnJvbUludGVydmFsKDEsMik7XG4gICAgICAvLyAgICAgbGV0IGV4c19tdXNjbGUgPSBmaWx0ZXJlZEV4ZXJjaXNlcy5maWx0ZXIoZXg9PmV4Lm11c2NsZS5zb21lKChwYXJ0KT0+bXVzY2xlLmluY2x1ZGVzKHBhcnQpKSk7XG4gICAgICAvLyAgICAgZm9yKGxldCBpPTA7IGk8bl9tdXNjbGU7IGkrKyl7XG4gICAgICAvLyAgICAgICAgIGlmKHBlbmRpbmdFeGVyY2lzZXM+MCl7XG4gICAgICAvLyAgICAgICAgICAgICAvLyBwdXNoIHJhbmRvbSBleGVyY2lzZSB3aXRoIHRoYXQgbXVzY2xlXG4gICAgICAvLyAgICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSBleHNfbXVzY2xlW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpleHNfbXVzY2xlLmxlbmd0aCldXG4gICAgICAvLyAgICAgICAgICAgICBsZXQgaW5kZXggPSBleHNfbXVzY2xlLmluZGV4T2Yoc2VsZWN0ZWQpO1xuICAgICAgLy8gICAgICAgICAgICAgbGV0IGluZGV4MiA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbmRJbmRleChlbD0+ZWwubmFtZT09c2VsZWN0ZWQubmFtZSk7XG4gICAgICAvLyAgICAgICAgICAgICBleHNfbXVzY2xlLnNwbGljZShpbmRleCwxKTtcbiAgICAgIC8vICAgICAgICAgICAgIGZpbHRlcmVkRXhlcmNpc2VzLnNwbGljZShpbmRleDIsMSk7XG4gICAgICAvLyAgICAgICAgICAgICBjb29sZG93bkV4ZXJjaXNlcy5wdXNoKHNlbGVjdGVkKTtcbiAgICAgIC8vICAgICAgICAgICAgIHBlbmRpbmdFeGVyY2lzZXMtLTtcbiAgICAgIC8vICAgICAgICAgfVxuICAgICAgLy8gICAgIH1cbiAgICAgIC8vIH1cbiAgICAgIC8vIGZpbHRlciBvdXQgZXhlcmNpc2VzIHdpdGggbWF0ZXJpYWxcbiAgICAgIGxldCBleHNfbGVmdCA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbHRlcigoZXgpID0+IGV4Lm1hdGVyaWFsLmxlbmd0aCA9PSAwKTtcbiAgICAgIC8vIGZpbHRlciBvdXQgZXhlcmNpc2VzIHNlbGVjdGVkIC0tIGFscmVhZHkgZG9uZSFcbiAgICAgIC8vIGZvbGxvd2luZyBsb29wIHdvbid0IHJ1biBpZiBwZW5kaW5nRXhlcmNpc2VzPTBcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGVuZGluZ0V4ZXJjaXNlczsgaSsrKSB7XG4gICAgICAgIC8vIHNlbGVjdCByYW5kb20gZXhlcmNpc2VcbiAgICAgICAgLy8gY29uc29sZS5sb2coZXhzX2xlZnQsICdhcnJheSB0byBzZWxlY3QgZnJvbSB3aXRob3V0IG1hdGVyaWFsJylcbiAgICAgICAgbGV0IHNlbGVjdGVkID0gcmFuZG9tVmFsdWUoZXhzX2xlZnQpO1xuICAgICAgICBsZXQgaW5kZXggPSBleHNfbGVmdC5pbmRleE9mKHNlbGVjdGVkKTtcbiAgICAgICAgZXhzX2xlZnQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coc2VsZWN0ZWQsICdzZWxlY3RlZCBjb29sZG93biBleCB3aXRob3V0IG1hdGVyaWFsJylcbiAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgY29vbGRvd25FeGVyY2lzZXMucHVzaChzZWxlY3RlZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNodWZmbGUoY29vbGRvd25FeGVyY2lzZXMpO1xuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IHsgY29weV9maWx0ZXJfc2VsZWN0X2Nvb2xkb3duRXhlcmNpc2VzIH0gPSBjb29sZG93blJlZHVjZXIuYWN0aW9ucztcbmV4cG9ydCBkZWZhdWx0IGNvb2xkb3duUmVkdWNlci5yZWR1Y2VyO1xuIiwiaW1wb3J0IF9oYXMgZnJvbSBcIi4vX2hhcy5qc1wiOyAvLyBCYXNlZCBvbiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXG5cbmZ1bmN0aW9uIF9vYmplY3RBc3NpZ24odGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICB9XG5cbiAgdmFyIG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xuICB2YXIgaWR4ID0gMTtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGlkeCA8IGxlbmd0aCkge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaWR4XTtcblxuICAgIGlmIChzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgZm9yICh2YXIgbmV4dEtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKF9oYXMobmV4dEtleSwgc291cmNlKSkge1xuICAgICAgICAgIG91dHB1dFtuZXh0S2V5XSA9IHNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlkeCArPSAxO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIE9iamVjdC5hc3NpZ24gPT09ICdmdW5jdGlvbicgPyBPYmplY3QuYXNzaWduIDogX29iamVjdEFzc2lnbjsiLCJpbXBvcnQgX29iamVjdEFzc2lnbiBmcm9tIFwiLi9pbnRlcm5hbC9fb2JqZWN0QXNzaWduLmpzXCI7XG5pbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3duIHByb3BlcnRpZXMgb2YgdGhlIGZpcnN0IG9iamVjdCBtZXJnZWQgd2l0aFxuICogdGhlIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBzZWNvbmQgb2JqZWN0LiBJZiBhIGtleSBleGlzdHMgaW4gYm90aCBvYmplY3RzLFxuICogdGhlIHZhbHVlIGZyb20gdGhlIHNlY29uZCBvYmplY3Qgd2lsbCBiZSB1c2VkLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjI2LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcge2s6IHZ9IC0+IHtrOiB2fSAtPiB7azogdn1cbiAqIEBwYXJhbSB7T2JqZWN0fSBsXG4gKiBAcGFyYW0ge09iamVjdH0gclxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHNlZSBSLm1lcmdlTGVmdCwgUi5tZXJnZURlZXBSaWdodCwgUi5tZXJnZVdpdGgsIFIubWVyZ2VXaXRoS2V5XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5tZXJnZVJpZ2h0KHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiAxMCB9LCB7ICdhZ2UnOiA0MCB9KTtcbiAqICAgICAgLy89PiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfVxuICpcbiAqICAgICAgY29uc3Qgd2l0aERlZmF1bHRzID0gUi5tZXJnZVJpZ2h0KHt4OiAwLCB5OiAwfSk7XG4gKiAgICAgIHdpdGhEZWZhdWx0cyh7eTogMn0pOyAvLz0+IHt4OiAwLCB5OiAyfVxuICogQHN5bWIgUi5tZXJnZVJpZ2h0KGEsIGIpID0gey4uLmEsIC4uLmJ9XG4gKi9cblxudmFyIG1lcmdlUmlnaHQgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MihmdW5jdGlvbiBtZXJnZVJpZ2h0KGwsIHIpIHtcbiAgcmV0dXJuIF9vYmplY3RBc3NpZ24oe30sIGwsIHIpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlUmlnaHQ7IiwiaW1wb3J0IHsgY3JlYXRlU2xpY2UgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwicmFtZGFcIjtcblxuZXhwb3J0IGNvbnN0IGRpc3BsYXlSZWR1Y2VyID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiBcImRpc3BsYXlcIixcbiAgaW5pdGlhbFN0YXRlOiB7XG4gICAgZm9ybTogdHJ1ZSxcbiAgICB0cmFpbmluZzogZmFsc2UsXG4gICAgYnV0dG9uczogZmFsc2UsXG4gIH0sXG4gIHJlZHVjZXJzOiB7XG4gICAgZGlzcGxheUhpZGUoc3RhdGUsIGFjdGlvbikge1xuICAgICAgY29uc3QgcGFydHNUb0Rpc3BsYXlIaWRlID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICBsZXQgbmV3U3RhdGUgPSBzdGF0ZTtcbiAgICAgIG5ld1N0YXRlID0gXy5tZXJnZVJpZ2h0KG5ld1N0YXRlLCBwYXJ0c1RvRGlzcGxheUhpZGUpO1xuICAgICAgLy8gY29uc29sZS5sb2cobmV3U3RhdGUpXG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgeyBkaXNwbGF5SGlkZSB9ID0gZGlzcGxheVJlZHVjZXIuYWN0aW9ucztcbmV4cG9ydCBkZWZhdWx0IGRpc3BsYXlSZWR1Y2VyLnJlZHVjZXI7XG4iLCJpbXBvcnQgX2FyaXR5IGZyb20gXCIuL19hcml0eS5qc1wiO1xuaW1wb3J0IF9pc1BsYWNlaG9sZGVyIGZyb20gXCIuL19pc1BsYWNlaG9sZGVyLmpzXCI7XG4vKipcbiAqIEludGVybmFsIGN1cnJ5TiBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIFRoZSBhcml0eSBvZiB0aGUgY3VycmllZCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXl9IHJlY2VpdmVkIEFuIGFycmF5IG9mIGFyZ3VtZW50cyByZWNlaXZlZCB0aHVzIGZhci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY3VycmllZCBmdW5jdGlvbi5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3VycnlOKGxlbmd0aCwgcmVjZWl2ZWQsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbWJpbmVkID0gW107XG4gICAgdmFyIGFyZ3NJZHggPSAwO1xuICAgIHZhciBsZWZ0ID0gbGVuZ3RoO1xuICAgIHZhciBjb21iaW5lZElkeCA9IDA7XG5cbiAgICB3aGlsZSAoY29tYmluZWRJZHggPCByZWNlaXZlZC5sZW5ndGggfHwgYXJnc0lkeCA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21iaW5lZElkeCA8IHJlY2VpdmVkLmxlbmd0aCAmJiAoIV9pc1BsYWNlaG9sZGVyKHJlY2VpdmVkW2NvbWJpbmVkSWR4XSkgfHwgYXJnc0lkeCA+PSBhcmd1bWVudHMubGVuZ3RoKSkge1xuICAgICAgICByZXN1bHQgPSByZWNlaXZlZFtjb21iaW5lZElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBhcmd1bWVudHNbYXJnc0lkeF07XG4gICAgICAgIGFyZ3NJZHggKz0gMTtcbiAgICAgIH1cblxuICAgICAgY29tYmluZWRbY29tYmluZWRJZHhdID0gcmVzdWx0O1xuXG4gICAgICBpZiAoIV9pc1BsYWNlaG9sZGVyKHJlc3VsdCkpIHtcbiAgICAgICAgbGVmdCAtPSAxO1xuICAgICAgfVxuXG4gICAgICBjb21iaW5lZElkeCArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBsZWZ0IDw9IDAgPyBmbi5hcHBseSh0aGlzLCBjb21iaW5lZCkgOiBfYXJpdHkobGVmdCwgX2N1cnJ5TihsZW5ndGgsIGNvbWJpbmVkLCBmbikpO1xuICB9O1xufSIsImltcG9ydCBfYXJpdHkgZnJvbSBcIi4vaW50ZXJuYWwvX2FyaXR5LmpzXCI7XG5pbXBvcnQgX2N1cnJ5MSBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkxLmpzXCI7XG5pbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX2N1cnJ5TiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnlOLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYSBjdXJyaWVkIGVxdWl2YWxlbnQgb2YgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLCB3aXRoIHRoZSBzcGVjaWZpZWRcbiAqIGFyaXR5LiBUaGUgY3VycmllZCBmdW5jdGlvbiBoYXMgdHdvIHVudXN1YWwgY2FwYWJpbGl0aWVzLiBGaXJzdCwgaXRzXG4gKiBhcmd1bWVudHMgbmVlZG4ndCBiZSBwcm92aWRlZCBvbmUgYXQgYSB0aW1lLiBJZiBgZ2AgaXMgYFIuY3VycnlOKDMsIGYpYCwgdGhlXG4gKiBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogICAtIGBnKDEpKDIpKDMpYFxuICogICAtIGBnKDEpKDIsIDMpYFxuICogICAtIGBnKDEsIDIpKDMpYFxuICogICAtIGBnKDEsIDIsIDMpYFxuICpcbiAqIFNlY29uZGx5LCB0aGUgc3BlY2lhbCBwbGFjZWhvbGRlciB2YWx1ZSBbYFIuX19gXSgjX18pIG1heSBiZSB1c2VkIHRvIHNwZWNpZnlcbiAqIFwiZ2Fwc1wiLCBhbGxvd2luZyBwYXJ0aWFsIGFwcGxpY2F0aW9uIG9mIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMsXG4gKiByZWdhcmRsZXNzIG9mIHRoZWlyIHBvc2l0aW9ucy4gSWYgYGdgIGlzIGFzIGFib3ZlIGFuZCBgX2AgaXMgW2BSLl9fYF0oI19fKSxcbiAqIHRoZSBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogICAtIGBnKDEsIDIsIDMpYFxuICogICAtIGBnKF8sIDIsIDMpKDEpYFxuICogICAtIGBnKF8sIF8sIDMpKDEpKDIpYFxuICogICAtIGBnKF8sIF8sIDMpKDEsIDIpYFxuICogICAtIGBnKF8sIDIpKDEpKDMpYFxuICogICAtIGBnKF8sIDIpKDEsIDMpYFxuICogICAtIGBnKF8sIDIpKF8sIDMpKDEpYFxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjUuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIE51bWJlciAtPiAoKiAtPiBhKSAtPiAoKiAtPiBhKVxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCBUaGUgYXJpdHkgZm9yIHRoZSByZXR1cm5lZCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIG5ldywgY3VycmllZCBmdW5jdGlvbi5cbiAqIEBzZWUgUi5jdXJyeVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIGNvbnN0IHN1bUFyZ3MgPSAoLi4uYXJncykgPT4gUi5zdW0oYXJncyk7XG4gKlxuICogICAgICBjb25zdCBjdXJyaWVkQWRkRm91ck51bWJlcnMgPSBSLmN1cnJ5Tig0LCBzdW1BcmdzKTtcbiAqICAgICAgY29uc3QgZiA9IGN1cnJpZWRBZGRGb3VyTnVtYmVycygxLCAyKTtcbiAqICAgICAgY29uc3QgZyA9IGYoMyk7XG4gKiAgICAgIGcoNCk7IC8vPT4gMTBcbiAqL1xuXG52YXIgY3VycnlOID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTIoZnVuY3Rpb24gY3VycnlOKGxlbmd0aCwgZm4pIHtcbiAgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBfY3VycnkxKGZuKTtcbiAgfVxuXG4gIHJldHVybiBfYXJpdHkobGVuZ3RoLCBfY3VycnlOKGxlbmd0aCwgW10sIGZuKSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY3VycnlOOyIsImltcG9ydCBfY29uY2F0IGZyb20gXCIuL2ludGVybmFsL19jb25jYXQuanNcIjtcbmltcG9ydCBfY3VycnkxIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTEuanNcIjtcbmltcG9ydCBjdXJyeU4gZnJvbSBcIi4vY3VycnlOLmpzXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbGlzdCBpdGVyYXRpb24gZnVuY3Rpb24gZnJvbSBhbiBleGlzdGluZyBvbmUgYnkgYWRkaW5nIHR3byBuZXdcbiAqIHBhcmFtZXRlcnMgdG8gaXRzIGNhbGxiYWNrIGZ1bmN0aW9uOiB0aGUgY3VycmVudCBpbmRleCwgYW5kIHRoZSBlbnRpcmUgbGlzdC5cbiAqXG4gKiBUaGlzIHdvdWxkIHR1cm4sIGZvciBpbnN0YW5jZSwgW2BSLm1hcGBdKCNtYXApIGZ1bmN0aW9uIGludG8gb25lIHRoYXRcbiAqIG1vcmUgY2xvc2VseSByZXNlbWJsZXMgYEFycmF5LnByb3RvdHlwZS5tYXBgLiBOb3RlIHRoYXQgdGhpcyB3aWxsIG9ubHkgd29ya1xuICogZm9yIGZ1bmN0aW9ucyBpbiB3aGljaCB0aGUgaXRlcmF0aW9uIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHRoZSBmaXJzdFxuICogcGFyYW1ldGVyLCBhbmQgd2hlcmUgdGhlIGxpc3QgaXMgdGhlIGxhc3QgcGFyYW1ldGVyLiAoVGhpcyBsYXR0ZXIgbWlnaHQgYmVcbiAqIHVuaW1wb3J0YW50IGlmIHRoZSBsaXN0IHBhcmFtZXRlciBpcyBub3QgdXNlZC4pXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMTUuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyAoKGEgLi4uIC0+IGIpIC4uLiAtPiBbYV0gLT4gKikgLT4gKChhIC4uLiwgSW50LCBbYV0gLT4gYikgLi4uIC0+IFthXSAtPiAqKVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gQSBsaXN0IGl0ZXJhdGlvbiBmdW5jdGlvbiB0aGF0IGRvZXMgbm90IHBhc3MgaW5kZXggb3IgbGlzdCB0byBpdHMgY2FsbGJhY2tcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBbiBhbHRlcmVkIGxpc3QgaXRlcmF0aW9uIGZ1bmN0aW9uIHRoYXQgcGFzc2VzIChpdGVtLCBpbmRleCwgbGlzdCkgdG8gaXRzIGNhbGxiYWNrXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgY29uc3QgbWFwSW5kZXhlZCA9IFIuYWRkSW5kZXgoUi5tYXApO1xuICogICAgICBtYXBJbmRleGVkKCh2YWwsIGlkeCkgPT4gaWR4ICsgJy0nICsgdmFsLCBbJ2YnLCAnbycsICdvJywgJ2InLCAnYScsICdyJ10pO1xuICogICAgICAvLz0+IFsnMC1mJywgJzEtbycsICcyLW8nLCAnMy1iJywgJzQtYScsICc1LXInXVxuICovXG5cbnZhciBhZGRJbmRleCA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkxKGZ1bmN0aW9uIGFkZEluZGV4KGZuKSB7XG4gIHJldHVybiBjdXJyeU4oZm4ubGVuZ3RoLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgdmFyIG9yaWdGbiA9IGFyZ3VtZW50c1swXTtcbiAgICB2YXIgbGlzdCA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgYXJnc1swXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvcmlnRm4uYXBwbHkodGhpcywgX2NvbmNhdChhcmd1bWVudHMsIFtpZHgsIGxpc3RdKSk7XG4gICAgICBpZHggKz0gMTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYWRkSW5kZXg7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2lzVHJhbnNmb3JtZXIob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiB0eXBlb2Ygb2JqWydAQHRyYW5zZHVjZXIvc3RlcCddID09PSAnZnVuY3Rpb24nO1xufSIsImltcG9ydCBfaXNBcnJheSBmcm9tIFwiLi9faXNBcnJheS5qc1wiO1xuaW1wb3J0IF9pc1RyYW5zZm9ybWVyIGZyb20gXCIuL19pc1RyYW5zZm9ybWVyLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgd2l0aCBkaWZmZXJlbnQgc3RyYXRlZ2llcyBiYXNlZCBvbiB0aGVcbiAqIG9iamVjdCBpbiBsaXN0IHBvc2l0aW9uIChsYXN0IGFyZ3VtZW50KS4gSWYgaXQgaXMgYW4gYXJyYXksIGV4ZWN1dGVzIFtmbl0uXG4gKiBPdGhlcndpc2UsIGlmIGl0IGhhcyBhIGZ1bmN0aW9uIHdpdGggb25lIG9mIHRoZSBnaXZlbiBtZXRob2QgbmFtZXMsIGl0IHdpbGxcbiAqIGV4ZWN1dGUgdGhhdCBmdW5jdGlvbiAoZnVuY3RvciBjYXNlKS4gT3RoZXJ3aXNlLCBpZiBpdCBpcyBhIHRyYW5zZm9ybWVyLFxuICogdXNlcyB0cmFuc2R1Y2VyIFt4Zl0gdG8gcmV0dXJuIGEgbmV3IHRyYW5zZm9ybWVyICh0cmFuc2R1Y2VyIGNhc2UpLlxuICogT3RoZXJ3aXNlLCBpdCB3aWxsIGRlZmF1bHQgdG8gZXhlY3V0aW5nIFtmbl0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IG1ldGhvZE5hbWVzIHByb3BlcnRpZXMgdG8gY2hlY2sgZm9yIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB4ZiB0cmFuc2R1Y2VyIHRvIGluaXRpYWxpemUgaWYgb2JqZWN0IGlzIHRyYW5zZm9ybWVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBkZWZhdWx0IHJhbWRhIGltcGxlbWVudGF0aW9uXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgb24gb2JqZWN0IGluIGxpc3QgcG9zaXRpb25cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGlzcGF0Y2hhYmxlKG1ldGhvZE5hbWVzLCB4ZiwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfVxuXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgIHZhciBvYmogPSBhcmdzLnBvcCgpO1xuXG4gICAgaWYgKCFfaXNBcnJheShvYmopKSB7XG4gICAgICB2YXIgaWR4ID0gMDtcblxuICAgICAgd2hpbGUgKGlkeCA8IG1ldGhvZE5hbWVzLmxlbmd0aCkge1xuICAgICAgICBpZiAodHlwZW9mIG9ialttZXRob2ROYW1lc1tpZHhdXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBvYmpbbWV0aG9kTmFtZXNbaWR4XV0uYXBwbHkob2JqLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlkeCArPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzVHJhbnNmb3JtZXIob2JqKSkge1xuICAgICAgICB2YXIgdHJhbnNkdWNlciA9IHhmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdHJhbnNkdWNlcihvYmopO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnhmWydAQHRyYW5zZHVjZXIvaW5pdCddKCk7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiB0aGlzLnhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10ocmVzdWx0KTtcbiAgfVxufTsiLCJpbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX3hmQmFzZSBmcm9tIFwiLi9feGZCYXNlLmpzXCI7XG5cbnZhciBYTWFwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gWE1hcChmLCB4Zikge1xuICAgIHRoaXMueGYgPSB4ZjtcbiAgICB0aGlzLmYgPSBmO1xuICB9XG5cbiAgWE1hcC5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9pbml0J10gPSBfeGZCYXNlLmluaXQ7XG4gIFhNYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvcmVzdWx0J10gPSBfeGZCYXNlLnJlc3VsdDtcblxuICBYTWFwLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3N0ZXAnXSA9IGZ1bmN0aW9uIChyZXN1bHQsIGlucHV0KSB7XG4gICAgcmV0dXJuIHRoaXMueGZbJ0BAdHJhbnNkdWNlci9zdGVwJ10ocmVzdWx0LCB0aGlzLmYoaW5wdXQpKTtcbiAgfTtcblxuICByZXR1cm4gWE1hcDtcbn0oKTtcblxudmFyIF94bWFwID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTIoZnVuY3Rpb24gX3htYXAoZiwgeGYpIHtcbiAgcmV0dXJuIG5ldyBYTWFwKGYsIHhmKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBfeG1hcDsiLCJpbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX2Rpc3BhdGNoYWJsZSBmcm9tIFwiLi9pbnRlcm5hbC9fZGlzcGF0Y2hhYmxlLmpzXCI7XG5pbXBvcnQgX21hcCBmcm9tIFwiLi9pbnRlcm5hbC9fbWFwLmpzXCI7XG5pbXBvcnQgX3JlZHVjZSBmcm9tIFwiLi9pbnRlcm5hbC9fcmVkdWNlLmpzXCI7XG5pbXBvcnQgX3htYXAgZnJvbSBcIi4vaW50ZXJuYWwvX3htYXAuanNcIjtcbmltcG9ydCBjdXJyeU4gZnJvbSBcIi4vY3VycnlOLmpzXCI7XG5pbXBvcnQga2V5cyBmcm9tIFwiLi9rZXlzLmpzXCI7XG4vKipcbiAqIFRha2VzIGEgZnVuY3Rpb24gYW5kXG4gKiBhIFtmdW5jdG9yXShodHRwczovL2dpdGh1Yi5jb20vZmFudGFzeWxhbmQvZmFudGFzeS1sYW5kI2Z1bmN0b3IpLFxuICogYXBwbGllcyB0aGUgZnVuY3Rpb24gdG8gZWFjaCBvZiB0aGUgZnVuY3RvcidzIHZhbHVlcywgYW5kIHJldHVybnNcbiAqIGEgZnVuY3RvciBvZiB0aGUgc2FtZSBzaGFwZS5cbiAqXG4gKiBSYW1kYSBwcm92aWRlcyBzdWl0YWJsZSBgbWFwYCBpbXBsZW1lbnRhdGlvbnMgZm9yIGBBcnJheWAgYW5kIGBPYmplY3RgLFxuICogc28gdGhpcyBmdW5jdGlvbiBtYXkgYmUgYXBwbGllZCB0byBgWzEsIDIsIDNdYCBvciBge3g6IDEsIHk6IDIsIHo6IDN9YC5cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgbWFwYCBtZXRob2Qgb2YgdGhlIHNlY29uZCBhcmd1bWVudCwgaWYgcHJlc2VudC5cbiAqXG4gKiBBY3RzIGFzIGEgdHJhbnNkdWNlciBpZiBhIHRyYW5zZm9ybWVyIGlzIGdpdmVuIGluIGxpc3QgcG9zaXRpb24uXG4gKlxuICogQWxzbyB0cmVhdHMgZnVuY3Rpb25zIGFzIGZ1bmN0b3JzIGFuZCB3aWxsIGNvbXBvc2UgdGhlbSB0b2dldGhlci5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnIEZ1bmN0b3IgZiA9PiAoYSAtPiBiKSAtPiBmIGEgLT4gZiBiXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGV2ZXJ5IGVsZW1lbnQgb2YgdGhlIGlucHV0IGBsaXN0YC5cbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3QgVGhlIGxpc3QgdG8gYmUgaXRlcmF0ZWQgb3Zlci5cbiAqIEByZXR1cm4ge0FycmF5fSBUaGUgbmV3IGxpc3QuXG4gKiBAc2VlIFIudHJhbnNkdWNlLCBSLmFkZEluZGV4XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgY29uc3QgZG91YmxlID0geCA9PiB4ICogMjtcbiAqXG4gKiAgICAgIFIubWFwKGRvdWJsZSwgWzEsIDIsIDNdKTsgLy89PiBbMiwgNCwgNl1cbiAqXG4gKiAgICAgIFIubWFwKGRvdWJsZSwge3g6IDEsIHk6IDIsIHo6IDN9KTsgLy89PiB7eDogMiwgeTogNCwgejogNn1cbiAqIEBzeW1iIFIubWFwKGYsIFthLCBiXSkgPSBbZihhKSwgZihiKV1cbiAqIEBzeW1iIFIubWFwKGYsIHsgeDogYSwgeTogYiB9KSA9IHsgeDogZihhKSwgeTogZihiKSB9XG4gKiBAc3ltYiBSLm1hcChmLCBmdW5jdG9yX28pID0gZnVuY3Rvcl9vLm1hcChmKVxuICovXG5cbnZhciBtYXAgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5Mihcbi8qI19fUFVSRV9fKi9cbl9kaXNwYXRjaGFibGUoWydmYW50YXN5LWxhbmQvbWFwJywgJ21hcCddLCBfeG1hcCwgZnVuY3Rpb24gbWFwKGZuLCBmdW5jdG9yKSB7XG4gIHN3aXRjaCAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0b3IpKSB7XG4gICAgY2FzZSAnW29iamVjdCBGdW5jdGlvbl0nOlxuICAgICAgcmV0dXJuIGN1cnJ5TihmdW5jdG9yLmxlbmd0aCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBmdW5jdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdbb2JqZWN0IE9iamVjdF0nOlxuICAgICAgcmV0dXJuIF9yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGFjY1trZXldID0gZm4oZnVuY3RvcltrZXldKTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9LCBrZXlzKGZ1bmN0b3IpKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gX21hcChmbiwgZnVuY3Rvcik7XG4gIH1cbn0pKTtcblxuZXhwb3J0IGRlZmF1bHQgbWFwOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9tYXAoZm4sIGZ1bmN0b3IpIHtcbiAgdmFyIGlkeCA9IDA7XG4gIHZhciBsZW4gPSBmdW5jdG9yLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbik7XG5cbiAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgIHJlc3VsdFtpZHhdID0gZm4oZnVuY3RvcltpZHhdKTtcbiAgICBpZHggKz0gMTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0ICogYXMgXyBmcm9tIFwicmFtZGFcIjtcblxuZnVuY3Rpb24gcmFuZG9tVmFsdWUoYXJyKSB7XG4gIHJldHVybiBhcnJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyLmxlbmd0aCldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVRvdGFsKG1ldGVycykge1xuICBjb25zdCBpbnRlcnZhbHMgPSB7XG4gICAgMi41OiBbMC41LCAxLCAxLjVdLFxuICAgIDM6IFsxLCAxLjUsIDJdLFxuICAgIDMuNTogWzIsIDIuNSwgM10sXG4gICAgNDogWzIsIDIuNSwgMywgMy41XSxcbiAgICA0LjU6IFsyLCAyLjUsIDMsIDMuNV0sXG4gICAgNTogWzIsIDIuNSwgMywgMy41LCA0XSxcbiAgICA1LjU6IFsyLCAyLjUsIDMsIDMuNSwgNF0sXG4gICAgNjogWzIuNSwgMywgMy41LCA0LCA0LjVdLFxuICAgIDYuNTogWzIuNSwgMywgMy41LCA0LCA0LjVdLFxuICAgIDc6IFszLCAzLjUsIDQsIDQuNSwgNV0sXG4gICAgNy41OiBbMywgMy41LCA0LCA0LjUsIDVdLFxuICAgIDg6IFszLjUsIDQsIDQuNSwgNSwgNS41XSxcbiAgICA4LjU6IFszLjUsIDQsIDQuNSwgNSwgNS41XSxcbiAgICA5OiBbNCwgNC41LCA1LCA1LjUsIDZdLFxuICAgIDkuNTogWzQsIDQuNSwgNSwgNS41LCA2XSxcbiAgICAxMDogWzQuNSwgNSwgNS41LCA2LCA2LjVdLFxuICAgIDEwLjU6IFs0LjUsIDUsIDUuNSwgNiwgNi41XSxcbiAgICAxMTogWzUsIDUuNSwgNiwgNi41LCA3XSxcbiAgICAxMS41OiBbNSwgNS41LCA2LCA2LjUsIDddLFxuICAgIDEyOiBbNS41LCA2LCA2LjUsIDcsIDcuNV0sXG4gICAgMTIuNTogWzUuNSwgNiwgNi41LCA3LCA3LjVdLFxuICAgIDEzOiBbNiwgNi41LCA3LCA3LjUsIDhdLFxuICAgIDEzLjU6IFs2LCA2LjUsIDcsIDcuNSwgOF0sXG4gICAgMTQ6IFs2LjUsIDcsIDcuNSwgOCwgOC41XSxcbiAgICAxNC41OiBbNi41LCA3LCA3LjUsIDgsIDguNV0sXG4gICAgMTU6IFs3LCA3LjUsIDgsIDguNSwgOV0sXG4gICAgMTUuNTogWzcsIDcuNSwgOCwgOC41LCA5XSxcbiAgICAxNjogWzcuNSwgOCwgOC41LCA5LCA5LjVdLFxuICAgIDE2LjU6IFs3LjUsIDgsIDguNSwgOSwgOS41XSxcbiAgICAxNzogWzgsIDguNSwgOSwgOS41LCAxMF0sXG4gICAgMTcuNTogWzgsIDguNSwgOSwgOS41LCAxMF0sXG4gICAgMTg6IFs4LjUsIDksIDkuNSwgMTAsIDEwLjVdLFxuICAgIDE4LjU6IFs4LjUsIDksIDkuNSwgMTAsIDEwLjVdLFxuICAgIDE5OiBbOSwgOS41LCAxMCwgMTAuNSwgMTFdLFxuICAgIDE5LjU6IFs5LCA5LjUsIDEwLCAxMC41LCAxMV0sXG4gICAgMjA6IFs5LjUsIDEwLCAxMC41LCAxMSwgMTEuNV0sXG4gIH07XG4gIGNvbnN0IHJlZiA9IG1ldGVycyAvIDUwIC8gNDtcbiAgbGV0IGFyciA9IGludGVydmFsc1tyZWZdO1xuICBsZXQgc3VidHJhY3RXYXJtdXAgPSAwO1xuICBsZXQgc3VidHJhY3RUZWNobmlxdWUgPSByYW5kb21WYWx1ZShhcnIpO1xuICBsZXQgc3VidHJhY3RDb29sZG93biA9IHJhbmRvbVZhbHVlKGFycik7XG4gIGxldCBhZGRNYWluID0gc3VidHJhY3RXYXJtdXAgKyBzdWJ0cmFjdFRlY2huaXF1ZSArIHN1YnRyYWN0Q29vbGRvd247XG4gIGxldCB0b3RhbFdhcm11cCA9IChyZWYgLSBzdWJ0cmFjdFdhcm11cCkgKiA1MDtcbiAgbGV0IHRvdGFsVGVjaG5pcXVlID0gKHJlZiAtIHN1YnRyYWN0VGVjaG5pcXVlKSAqIDUwO1xuICBsZXQgdG90YWxDb29sZG93biA9IChyZWYgLSBzdWJ0cmFjdENvb2xkb3duKSAqIDUwO1xuICBsZXQgdG90YWxNYWluID0gKHJlZiArIGFkZE1haW4pICogNTA7XG4gIGxldCB0b3RhbHNGb3JDb25kaXRpb25hbFNldCA9IFtcbiAgICB0b3RhbFdhcm11cCxcbiAgICB0b3RhbFRlY2huaXF1ZSxcbiAgICB0b3RhbE1haW4sXG4gICAgdG90YWxDb29sZG93bixcbiAgXTtcbiAgbGV0IGFyckNvcnJlY3RlZCA9IFtdO1xuICAvLyB3ZSBoYXZlIGRlZmluZWQgRWFjaCBzZXRzIGFzIG11bHRpcGxlcyBvZiAyNSB1bnRpbCA1NzUgKHNlZSBwb3NzaWJsZUVhY2hMaXN0KSwgc28gd2Ugd2lsbCBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9uIHRvIHRvdGFsV2FybXVwLCBldGMgaWYgcmVmPD01IG9yIHRvdGFsbWV0ZXJzPD0xMjAwICYmIGV2ZXJ5QmxvY2sgaGFzIGxlc3MgdGhhbiA2MDAgbWV0ZXJzXG4gIGlmIChyZWYgPD0gNSAmJiB0b3RhbHNGb3JDb25kaXRpb25hbFNldC5ldmVyeSgoZWwpID0+IGVsIDwgNjAwKSkge1xuICAgIGFyckNvcnJlY3RlZCA9IFtcbiAgICAgIFt0b3RhbFdhcm11cCwgXCIxXCJdLFxuICAgICAgW3RvdGFsVGVjaG5pcXVlLCBcIjJcIl0sXG4gICAgICBbdG90YWxNYWluLCBcIjNcIl0sXG4gICAgICBbdG90YWxDb29sZG93biwgXCI0XCJdLFxuICAgIF07XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgd2UgaGF2ZSB0b3RhbCB3YXJtdXAgNjc1LCBhbmQgY29vbGRvd24gNDc1LCB3ZSBjYW4gY29ycmVjdCBpdCB0byBnZW5lcmF0ZSBzZXRzIGJldHRlciAoaW5zdGVhZCBvZiBwcm9kdWNpbmcgMjd4MjUganVzdCBiZWNhdXNlIHdlIGhhdmUgNjUwKzI1KSBhbmQgZGVmaW5pbmcvbGVhdmluZyB3YXJtdXAgYXMgNjUwIGFuZCBjb29sZG93biBhcyA1MDAgKGZvciBpbnN0YW5jZSlcbiAgICBsZXQgYXJyTWV0ZXJzID0gW1xuICAgICAgW3RvdGFsV2FybXVwLCBcIjFcIl0sXG4gICAgICBbdG90YWxUZWNobmlxdWUsIFwiMlwiXSxcbiAgICAgIFt0b3RhbE1haW4sIFwiM1wiXSxcbiAgICAgIFt0b3RhbENvb2xkb3duLCBcIjRcIl0sXG4gICAgXTtcbiAgICAvLyBmaWx0ZXIgbWV0ZXJzIGRlZmluaW5nIHR3byBhcnJheXMgbGlrZSBjb3JyZWN0PVsyMDBdIGFuZCB0b0NvcnJlY3Q9WzEyNSwgMTc1XVxuICAgIGxldCBhcnJDb3JyZWN0ID0gYXJyTWV0ZXJzLmZpbHRlcigoZWwpID0+IGVsWzBdICUgMTAwID09IDApO1xuICAgIGxldCBhcnJUb0NvcnJlY3QgPSBhcnJNZXRlcnMuZmlsdGVyKChlbCkgPT4gZWxbMF0gJSAxMDAgIT0gMCk7XG5cbiAgICBsZXQgcmFuZG9tSW5kZXhUb0FkZE1ldGVycyA9IE1hdGguZmxvb3IoXG4gICAgICBNYXRoLnJhbmRvbSgpICogYXJyVG9Db3JyZWN0Lmxlbmd0aFxuICAgICk7XG4gICAgbGV0IHRvQWRkID0gMDtcbiAgICAvLyB3ZSBtYXAgbGlrZSBhcnIubWFwKChlbCxpKT0+Li4uKSBidXQgdXNpbmcgcmFtZGFcbiAgICBjb25zdCBtYXBJbmRleGVkID0gXy5hZGRJbmRleChfLm1hcCk7XG4gICAgLy8gaW1hZ2luZSBhcnJUb0NvcnJlY3QgWzIyNSwgODc1XSwgd2Ugc2VsZWN0IDIyNSBhcyByYW5kb20gZWxcbiAgICBhcnJUb0NvcnJlY3QgPSBtYXBJbmRleGVkKChlbCwgaSkgPT4ge1xuICAgICAgaWYgKGkgIT0gcmFuZG9tSW5kZXhUb0FkZE1ldGVycykge1xuICAgICAgICAvLyB3ZSByb3VuZCBldmVyeSBlbCB0byBtdWx0aXBsZXMgb2YgMTAwIGJ5IHN1YnN0cmFjdGluZyBlbCUxMDAtLT4gMjI1LSgyNSk9MjAwXG4gICAgICAgIHRvQWRkICs9IGVsWzBdICUgMTAwO1xuICAgICAgICByZXR1cm4gW2VsWzBdIC0gKGVsWzBdICUgMTAwKSwgZWxbMV1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsO1xuICAgIH0sIGFyclRvQ29ycmVjdCk7XG4gICAgLy8gd2UgYWRkIHRoZSBzdWJzdHJhY3RlZCBhbW91bnQgdG8gb3VyIHJhbmRvbSBlbCAtLT4gODc1KzI1PTkwMFxuICAgIGFyclRvQ29ycmVjdFtyYW5kb21JbmRleFRvQWRkTWV0ZXJzXVswXSArPSB0b0FkZDtcbiAgICAvLyB3ZSBub3cgaGF2ZSBvdXIgYmxvY2tzIHdpdGggbWV0ZXJzIGFzIG11bHRpcGxlcyBvZiAxMDAgKGVhc2llciB0byBnZW5lcmF0ZSBzZXRzKVxuICAgIGFyckNvcnJlY3RlZCA9IFsuLi5hcnJUb0NvcnJlY3QsIC4uLmFyckNvcnJlY3RdO1xuICAgIC8vIHdlIHNvcnQgb3VyIGFycmF5IGJhY2sgYXMgW1t3YXJtdXBGaXJzdCwgdmFsdWVdLCBbdGVjaG5pcXVlLC4uLl0uLi5dXG4gICAgYXJyQ29ycmVjdGVkLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhWzFdIC0gYlsxXTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2FybXVwOiB7IHRvdGFsOiBhcnJDb3JyZWN0ZWRbMF1bMF0gfSxcbiAgICB0ZWNobmlxdWU6IHsgdG90YWw6IGFyckNvcnJlY3RlZFsxXVswXSB9LFxuICAgIG1haW46IHsgdG90YWw6IGFyckNvcnJlY3RlZFsyXVswXSB9LFxuICAgIGNvb2xkb3duOiB7IHRvdGFsOiBhcnJDb3JyZWN0ZWRbM11bMF0gfSxcbiAgfTtcbn1cbiIsImNvbnN0IHBvc3NpYmxlRWFjaExpc3QgPSB7XG4gIDI1OiB7XG4gICAgMTogW1syNV1dLFxuICB9LFxuICA1MDoge1xuICAgIDE6IFtbNTBdXSxcbiAgICAyOiBbWzI1LCAyNV1dLFxuICB9LFxuICA3NToge1xuICAgIDE6IFtbNzVdXSxcbiAgICAyOiBbWzI1LCA1MF1dLFxuICAgIDM6IFtbMjUsIDI1LCAyNV1dLFxuICB9LFxuICAxMDA6IHtcbiAgICAxOiBbWzEwMF1dLFxuICAgIDI6IFtbNTAsIDUwXV0sXG4gICAgMzogW1syNSwgMjUsIDUwXV0sXG4gICAgNDogW1syNSwgMjUsIDI1LCAyNV1dLFxuICB9LFxuICAxMjU6IHtcbiAgICAxOiBbWzEyNV1dLFxuICAgIDI6IFtcbiAgICAgIFsyNSwgMTAwXSxcbiAgICAgIFs3NSwgNTBdLFxuICAgIF0sXG4gICAgMzogW1xuICAgICAgWzI1LCAyNSwgNzVdLFxuICAgICAgWzUwLCA1MCwgMjVdLFxuICAgIF0sXG4gICAgNDogW1syNSwgMjUsIDI1LCA1MF1dLFxuICB9LFxuICAxNTA6IHtcbiAgICAxOiBbWzE1MF1dLFxuICAgIDI6IFtcbiAgICAgIFs3NSwgNzVdLFxuICAgICAgWzEwMCwgNTBdLFxuICAgIF0sXG4gICAgMzogW1xuICAgICAgWzUwLCA1MCwgNTBdLFxuICAgICAgWzI1LCA3NSwgNTBdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzI1LCAyNSwgNTAsIDUwXSxcbiAgICAgIFsyNSwgNzUsIDI1LCAyNV0sXG4gICAgXSxcbiAgfSxcbiAgMTc1OiB7XG4gICAgMTogW1sxNzVdXSxcbiAgICAyOiBbXG4gICAgICBbNzUsIDEwMF0sXG4gICAgICBbMTI1LCA1MF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbNTAsIDUwLCA3NV0sXG4gICAgICBbMTAwLCA1MCwgMjVdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzUwLCAyNSwgNTAsIDUwXSxcbiAgICAgIFsyNSwgNzUsIDUwLCAyNV0sXG4gICAgXSxcbiAgfSxcbiAgMjAwOiB7XG4gICAgMTogW1syMDBdXSxcbiAgICAyOiBbWzEwMCwgMTAwXV0sXG4gICAgMzogW1s1MCwgNTAsIDEwMF1dLFxuICAgIDQ6IFtcbiAgICAgIFs1MCwgNTAsIDUwLCA1MF0sXG4gICAgICBbMjUsIDI1LCAxMDAsIDUwXSxcbiAgICBdLFxuICB9LFxuICAyMjU6IHtcbiAgICAxOiBbWzIyNV1dLFxuICAgIDI6IFtcbiAgICAgIFsxNTAsIDc1XSxcbiAgICAgIFsxMDAsIDEyNV0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbNTAsIDUwLCAxMjVdLFxuICAgICAgWzEwMCwgNTAsIDc1XSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFs1MCwgNTAsIDUwLCA3NV0sXG4gICAgICBbMjUsIDc1LCA3NSwgNTBdLFxuICAgIF0sXG4gIH0sXG4gIDI1MDoge1xuICAgIDE6IFtbMjUwXV0sXG4gICAgMjogW1xuICAgICAgWzE1MCwgMTAwXSxcbiAgICAgIFsxMjUsIDEyNV0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbNTAsIDEwMCwgMTAwXSxcbiAgICAgIFs1MCwgNTAsIDE1MF0sXG4gICAgXSxcbiAgICA0OiBbXG4gICAgICBbNTAsIDUwLCA3NSwgNzVdLFxuICAgICAgWzUwLCA1MCwgNTAsIDEwMF0sXG4gICAgXSxcbiAgfSxcbiAgMjc1OiB7XG4gICAgMTogW1syNzVdXSxcbiAgICAyOiBbXG4gICAgICBbMTUwLCAxMjVdLFxuICAgICAgWzEwMCwgMTc1XSxcbiAgICBdLFxuICAgIDM6IFtcbiAgICAgIFs1MCwgMTI1LCAxMDBdLFxuICAgICAgWzUwLCA3NSwgMTUwXSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFs1MCwgNTAsIDEwMCwgNzVdLFxuICAgICAgWzUwLCA1MCwgNzUsIDEwMF0sXG4gICAgXSxcbiAgfSxcbiAgMzAwOiB7XG4gICAgMTogW1szMDBdXSxcbiAgICAyOiBbWzEwMCwgMjAwXV0sXG4gICAgMzogW1xuICAgICAgWzUwLCA1MCwgMjAwXSxcbiAgICAgIFsxMDAsIDEwMCwgMTAwXSxcbiAgICBdLFxuICAgIDQ6IFtbNTAsIDUwLCAxMDAsIDEwMF1dLFxuICB9LFxuICAzMjU6IHtcbiAgICAxOiBbWzMyNV1dLFxuICAgIDI6IFtbMTI1LCAyMDBdXSxcbiAgICAzOiBbXG4gICAgICBbNzUsIDEwMCwgMTUwXSxcbiAgICAgIFsxMDAsIDEwMCwgMTI1XSxcbiAgICBdLFxuICAgIDQ6IFtbNTAsIDc1LCAxMDAsIDEwMF1dLFxuICB9LFxuICAzNTA6IHtcbiAgICAxOiBbWzM1MF1dLFxuICAgIDI6IFtbMTUwLCAyMDBdXSxcbiAgICAzOiBbXG4gICAgICBbNTAsIDEwMCwgMjAwXSxcbiAgICAgIFsxMDAsIDEwMCwgMTUwXSxcbiAgICBdLFxuICAgIDQ6IFtbNTAsIDEwMCwgMTAwLCAxMDBdXSxcbiAgfSxcbiAgMzc1OiB7XG4gICAgMTogW1szNzVdXSxcbiAgICAyOiBbWzE3NSwgMjAwXV0sXG4gICAgMzogW1xuICAgICAgWzEwMCwgNzUsIDIwMF0sXG4gICAgICBbMTAwLCAxMjUsIDE1MF0sXG4gICAgXSxcbiAgICA0OiBbWzc1LCAxMDAsIDEwMCwgMTAwXV0sXG4gIH0sXG4gIDQwMDoge1xuICAgIDE6IFtbNDAwXV0sXG4gICAgMjogW1xuICAgICAgWzIwMCwgMjAwXSxcbiAgICAgIFsxMDAsIDMwMF0sXG4gICAgXSxcbiAgICAzOiBbWzEwMCwgMTAwLCAyMDBdXSxcbiAgICA0OiBbXG4gICAgICBbMTAwLCAxMDAsIDEwMCwgMTAwXSxcbiAgICAgIFs1MCwgMTAwLCA1MCwgMjAwXSxcbiAgICBdLFxuICB9LFxuICA0MjU6IHtcbiAgICAxOiBbWzQyNV1dLFxuICAgIDI6IFtcbiAgICAgIFsyMjUsIDIwMF0sXG4gICAgICBbMTI1LCAzMDBdLFxuICAgIF0sXG4gICAgMzogW1sxMDAsIDEyNSwgMjAwXV0sXG4gICAgNDogW1xuICAgICAgWzEwMCwgMTI1LCAxMDAsIDEwMF0sXG4gICAgICBbNzUsIDEwMCwgNTAsIDIwMF0sXG4gICAgXSxcbiAgfSxcbiAgNDUwOiB7XG4gICAgMTogW1s0NTBdXSxcbiAgICAyOiBbXG4gICAgICBbMjUwLCAyMDBdLFxuICAgICAgWzE1MCwgMzAwXSxcbiAgICBdLFxuICAgIDM6IFtbMTAwLCAxNTAsIDIwMF1dLFxuICAgIDQ6IFtcbiAgICAgIFsxMDAsIDE1MCwgMTAwLCAxMDBdLFxuICAgICAgWzEwMCwgMTAwLCA1MCwgMjAwXSxcbiAgICBdLFxuICB9LFxuICA0NzU6IHtcbiAgICAxOiBbWzQ3NV1dLFxuICAgIDI6IFtcbiAgICAgIFsyMjUsIDI1MF0sXG4gICAgICBbMTI1LCAzNTBdLFxuICAgIF0sXG4gICAgMzogW1sxMDAsIDEyNSwgMjUwXV0sXG4gICAgNDogW1xuICAgICAgWzEwMCwgMTUwLCAxMjUsIDEwMF0sXG4gICAgICBbMTAwLCAxMDAsIDc1LCAyMDBdLFxuICAgIF0sXG4gIH0sXG4gIDUwMDoge1xuICAgIDE6IFtbNTAwXV0sXG4gICAgMjogW1xuICAgICAgWzIwMCwgMzAwXSxcbiAgICAgIFsxMDAsIDQwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbMjAwLCAyMDAsIDEwMF0sXG4gICAgICBbMTAwLCAxMDAsIDMwMF0sXG4gICAgXSxcbiAgICA0OiBbXG4gICAgICBbMTAwLCAxMDAsIDEwMCwgMjAwXSxcbiAgICAgIFs1MCwgMjAwLCAyMDAsIDUwXSxcbiAgICBdLFxuICB9LFxuICA1MjU6IHtcbiAgICAxOiBbWzUyNV1dLFxuICAgIDI6IFtcbiAgICAgIFsyMjUsIDMwMF0sXG4gICAgICBbMTI1LCA0MDBdLFxuICAgIF0sXG4gICAgMzogW1xuICAgICAgWzIwMCwgMjAwLCAxMjVdLFxuICAgICAgWzEyNSwgMTAwLCAzMDBdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzEwMCwgMTAwLCAxMjUsIDIwMF0sXG4gICAgICBbNzUsIDIwMCwgMjAwLCA1MF0sXG4gICAgXSxcbiAgfSxcbiAgNTUwOiB7XG4gICAgMTogW1s1NTBdXSxcbiAgICAyOiBbXG4gICAgICBbMjUwLCAzMDBdLFxuICAgICAgWzE1MCwgNDAwXSxcbiAgICBdLFxuICAgIDM6IFtcbiAgICAgIFsyMDAsIDIwMCwgMTUwXSxcbiAgICAgIFsxMDAsIDE1MCwgMzAwXSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFsxMDAsIDEwMCwgMTUwLCAyMDBdLFxuICAgICAgWzEwMCwgMjAwLCAyMDAsIDUwXSxcbiAgICBdLFxuICB9LFxuICA1NzU6IHtcbiAgICAxOiBbWzU3NV1dLFxuICAgIDI6IFtcbiAgICAgIFsyNzUsIDMwMF0sXG4gICAgICBbMTc1LCA0MDBdLFxuICAgIF0sXG4gICAgMzogW1xuICAgICAgWzIwMCwgMjc1LCAxMDBdLFxuICAgICAgWzEwMCwgMTc1LCAzMDBdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzEwMCwgMTI1LCAxNTAsIDIwMF0sXG4gICAgICBbMTAwLCAyMDAsIDIwMCwgNzVdLFxuICAgIF0sXG4gIH0sXG4gIDYwMDoge1xuICAgIDE6IFtbNjAwXV0sXG4gICAgMjogW1xuICAgICAgWzMwMCwgMzAwXSxcbiAgICAgIFsyMDAsIDQwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbMjAwLCAyMDAsIDIwMF0sXG4gICAgICBbMTAwLCAzMDAsIDIwMF0sXG4gICAgXSxcbiAgICA0OiBbXG4gICAgICBbMTAwLCAxMDAsIDEwMCwgMzAwXSxcbiAgICAgIFsyMDAsIDIwMCwgMTAwLCAxMDBdLFxuICAgIF0sXG4gIH0sXG4gIDcwMDoge1xuICAgIDE6IFtbNzAwXV0sXG4gICAgMjogW1xuICAgICAgWzMwMCwgNDAwXSxcbiAgICAgIFsyMDAsIDUwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbMjAwLCAyMDAsIDMwMF0sXG4gICAgICBbMzAwLCAzMDAsIDEwMF0sXG4gICAgXSxcbiAgICA0OiBbXG4gICAgICBbMjAwLCAyMDAsIDIwMCwgMTAwXSxcbiAgICAgIFsxMDAsIDEwMCwgMzAwLCAyMDBdLFxuICAgIF0sXG4gIH0sXG4gIDgwMDoge1xuICAgIDE6IFtbODAwXV0sXG4gICAgMjogW1xuICAgICAgWzQwMCwgNDAwXSxcbiAgICAgIFszMDAsIDUwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbMzAwLCAzMDAsIDIwMF0sXG4gICAgICBbMjAwLCAyMDAsIDQwMF0sXG4gICAgXSxcbiAgICA0OiBbXG4gICAgICBbMjAwLCAyMDAsIDIwMCwgMjAwXSxcbiAgICAgIFsxMDAsIDEwMCwgMzAwLCAzMDBdLFxuICAgIF0sXG4gIH0sXG4gIDkwMDoge1xuICAgIDE6IFtbOTAwXV0sXG4gICAgMjogW1xuICAgICAgWzQwMCwgNTAwXSxcbiAgICAgIFszMDAsIDYwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbMjAwLCAyMDAsIDUwMF0sXG4gICAgICBbMzAwLCAzMDAsIDMwMF0sXG4gICAgXSxcbiAgICA0OiBbXG4gICAgICBbMjAwLCAyMDAsIDIwMCwgMzAwXSxcbiAgICAgIFszMDAsIDMwMCwgMTAwLCAyMDBdLFxuICAgIF0sXG4gIH0sXG4gIDEwMDA6IHtcbiAgICAxOiBbWzEwMDBdXSxcbiAgICAyOiBbXG4gICAgICBbNTAwLCA1MDBdLFxuICAgICAgWzQwMCwgNjAwXSxcbiAgICBdLFxuICAgIDM6IFtcbiAgICAgIFszMDAsIDMwMCwgNDAwXSxcbiAgICAgIFs1MDAsIDIwMCwgMzAwXSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFsyMDAsIDIwMCwgMzAwLCAzMDBdLFxuICAgICAgWzQwMCwgMjAwLCAyMDAsIDIwMF0sXG4gICAgXSxcbiAgfSxcbiAgMTEwMDoge1xuICAgIDE6IFtbMTEwMF1dLFxuICAgIDI6IFtcbiAgICAgIFs1MDAsIDYwMF0sXG4gICAgICBbNDAwLCA3MDBdLFxuICAgIF0sXG4gICAgMzogW1xuICAgICAgWzQwMCwgNDAwLCAzMDBdLFxuICAgICAgWzMwMCwgMzAwLCA1MDBdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzIwMCwgMzAwLCAzMDAsIDMwMF0sXG4gICAgICBbNDAwLCAzMDAsIDIwMCwgMjAwXSxcbiAgICBdLFxuICB9LFxuICAxMjAwOiB7XG4gICAgMTogW1sxMjAwXV0sXG4gICAgMjogW1xuICAgICAgWzUwMCwgNzAwXSxcbiAgICAgIFs2MDAsIDYwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbNDAwLCA0MDAsIDQwMF0sXG4gICAgICBbNTAwLCA0MDAsIDMwMF0sXG4gICAgXSxcbiAgICA0OiBbXG4gICAgICBbMzAwLCAzMDAsIDMwMCwgMzAwXSxcbiAgICAgIFsyMDAsIDQwMCwgMzAwLCAzMDBdLFxuICAgIF0sXG4gIH0sXG4gIDEzMDA6IHtcbiAgICAxOiBbWzEzMDBdXSxcbiAgICAyOiBbXG4gICAgICBbNjAwLCA3MDBdLFxuICAgICAgWzUwMCwgODAwXSxcbiAgICBdLFxuICAgIDM6IFtcbiAgICAgIFs0MDAsIDQwMCwgNTAwXSxcbiAgICAgIFszMDAsIDYwMCwgNDAwXSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFszMDAsIDQwMCwgMzAwLCAzMDBdLFxuICAgICAgWzQwMCwgNDAwLCAyMDAsIDMwMF0sXG4gICAgXSxcbiAgfSxcbiAgMTQwMDoge1xuICAgIDE6IFtbMTQwMF1dLFxuICAgIDI6IFtcbiAgICAgIFs2MDAsIDgwMF0sXG4gICAgICBbNzAwLCA3MDBdLFxuICAgIF0sXG4gICAgMzogW1xuICAgICAgWzUwMCwgNDAwLCA1MDBdLFxuICAgICAgWzYwMCwgNDAwLCA0MDBdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzMwMCwgMzAwLCA1MDAsIDMwMF0sXG4gICAgICBbNDAwLCA0MDAsIDMwMCwgMzAwXSxcbiAgICBdLFxuICB9LFxuICAxNTAwOiB7XG4gICAgMTogW1sxNTAwXV0sXG4gICAgMjogW1xuICAgICAgWzgwMCwgNzAwXSxcbiAgICAgIFs2MDAsIDkwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbNDAwLCA2MDAsIDUwMF0sXG4gICAgICBbNTAwLCA1MDAsIDUwMF0sXG4gICAgXSxcbiAgICA0OiBbXG4gICAgICBbNDAwLCA0MDAsIDQwMCwgMzAwXSxcbiAgICAgIFs1MDAsIDMwMCwgNDAwLCAzMDBdLFxuICAgIF0sXG4gIH0sXG4gIDE2MDA6IHtcbiAgICAxOiBbWzE2MDBdXSxcbiAgICAyOiBbXG4gICAgICBbNzAwLCA5MDBdLFxuICAgICAgWzgwMCwgODAwXSxcbiAgICBdLFxuICAgIDM6IFtcbiAgICAgIFs2MDAsIDYwMCwgNDAwXSxcbiAgICAgIFs1MDAsIDUwMCwgNjAwXSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFs0MDAsIDQwMCwgNDAwLCA0MDBdLFxuICAgICAgWzUwMCwgMzAwLCA0MDAsIDQwMF0sXG4gICAgXSxcbiAgfSxcbiAgMTcwMDoge1xuICAgIDE6IFtbMTcwMF1dLFxuICAgIDI6IFtcbiAgICAgIFs4MDAsIDkwMF0sXG4gICAgICBbMTAwMCwgNzAwXSxcbiAgICBdLFxuICAgIDM6IFtcbiAgICAgIFs2MDAsIDYwMCwgNTAwXSxcbiAgICAgIFs1MDAsIDUwMCwgNzAwXSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFs0MDAsIDQwMCwgNDAwLCA1MDBdLFxuICAgICAgWzUwMCwgMzAwLCA1MDAsIDQwMF0sXG4gICAgXSxcbiAgfSxcbiAgMTgwMDoge1xuICAgIDE6IFtbMTgwMF1dLFxuICAgIDI6IFtcbiAgICAgIFs5MDAsIDkwMF0sXG4gICAgICBbODAwLCAxMDAwXSxcbiAgICBdLFxuICAgIDM6IFtcbiAgICAgIFs2MDAsIDYwMCwgNjAwXSxcbiAgICAgIFs1MDAsIDUwMCwgODAwXSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFs1MDAsIDUwMCwgNDAwLCA0MDBdLFxuICAgICAgWzYwMCwgNDAwLCA0MDAsIDQwMF0sXG4gICAgXSxcbiAgfSxcbiAgMTkwMDoge1xuICAgIDE6IFtbMTkwMF1dLFxuICAgIDI6IFtcbiAgICAgIFs5MDAsIDEwMDBdLFxuICAgICAgWzgwMCwgMTEwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbNjAwLCA2MDAsIDcwMF0sXG4gICAgICBbNTAwLCA2MDAsIDgwMF0sXG4gICAgXSxcbiAgICA0OiBbXG4gICAgICBbNTAwLCA1MDAsIDQwMCwgNTAwXSxcbiAgICAgIFs2MDAsIDYwMCwgNDAwLCAzMDBdLFxuICAgIF0sXG4gIH0sXG4gIDIwMDA6IHtcbiAgICAxOiBbWzIwMDBdXSxcbiAgICAyOiBbXG4gICAgICBbMTAwMCwgMTAwMF0sXG4gICAgICBbODAwLCAxMjAwXSxcbiAgICBdLFxuICAgIDM6IFtcbiAgICAgIFs3MDAsIDcwMCwgNjAwXSxcbiAgICAgIFs2MDAsIDgwMCwgNjAwXSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFs1MDAsIDUwMCwgNTAwLCA1MDBdLFxuICAgICAgWzYwMCwgNDAwLCA2MDAsIDQwMF0sXG4gICAgXSxcbiAgfSxcbiAgMjEwMDoge1xuICAgIDE6IFtbMjEwMF1dLFxuICAgIDI6IFtcbiAgICAgIFsxMDAwLCAxMTAwXSxcbiAgICAgIFs4MDAsIDEzMDBdLFxuICAgIF0sXG4gICAgMzogW1xuICAgICAgWzcwMCwgNzAwLCA3MDBdLFxuICAgICAgWzYwMCwgOTAwLCA2MDBdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzQwMCwgNjAwLCA3MDAsIDQwMF0sXG4gICAgICBbNjAwLCA0MDAsIDYwMCwgNTAwXSxcbiAgICBdLFxuICB9LFxuICAyMjAwOiB7XG4gICAgMTogW1syMjAwXV0sXG4gICAgMjogW1xuICAgICAgWzEwMDAsIDEyMDBdLFxuICAgICAgWzgwMCwgMTQwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbODAwLCA4MDAsIDYwMF0sXG4gICAgICBbMTAwMCwgNDAwLCA4MDBdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzYwMCwgNjAwLCA2MDAsIDQwMF0sXG4gICAgICBbMzAwLCA3MDAsIDYwMCwgNjAwXSxcbiAgICBdLFxuICB9LFxuICAyMzAwOiB7XG4gICAgMTogW1syMzAwXV0sXG4gICAgMjogW1xuICAgICAgWzkwMCwgMTQwMF0sXG4gICAgICBbMTAwMCwgMTMwMF0sXG4gICAgXSxcbiAgICAzOiBbXG4gICAgICBbNTAwLCAxMDAwLCA4MDBdLFxuICAgICAgWzQwMCwgODAwLCAxMTAwXSxcbiAgICBdLFxuICAgIDQ6IFtcbiAgICAgIFs2MDAsIDYwMCwgNjAwLCA1MDBdLFxuICAgICAgWzMwMCwgODAwLCA2MDAsIDYwMF0sXG4gICAgXSxcbiAgfSxcbiAgMjQwMDoge1xuICAgIDE6IFtbMjQwMF1dLFxuICAgIDI6IFtcbiAgICAgIFs4MDAsIDE2MDBdLFxuICAgICAgWzEyMDAsIDEyMDBdLFxuICAgIF0sXG4gICAgMzogW1xuICAgICAgWzQwMCwgMTAwMCwgMTAwMF0sXG4gICAgICBbNTAwLCA4MDAsIDExMDBdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzcwMCwgNzAwLCAzMDAsIDcwMF0sXG4gICAgICBbODAwLCA4MDAsIDQwMCwgNDAwXSxcbiAgICBdLFxuICB9LFxuICAyNTAwOiB7XG4gICAgMTogW1syNTAwXV0sXG4gICAgMjogW1xuICAgICAgWzEwMDAsIDE1MDBdLFxuICAgICAgWzEyMDAsIDEzMDBdLFxuICAgIF0sXG4gICAgMzogW1xuICAgICAgWzUwMCwgMTAwMCwgMTAwMF0sXG4gICAgICBbNTAwLCA4MDAsIDEyMDBdLFxuICAgIF0sXG4gICAgNDogW1xuICAgICAgWzcwMCwgODAwLCA0MDAsIDgwMF0sXG4gICAgICBbODAwLCA5MDAsIDMwMCwgNTAwXSxcbiAgICBdLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgcG9zc2libGVFYWNoTGlzdDtcbiIsImltcG9ydCBwb3NzaWJsZUVhY2hMaXN0IGZyb20gXCIuLi9saXN0cy9wb3NzaWJsZUVhY2hMaXN0XCI7XG5cbmZ1bmN0aW9uIHJhbmRvbVZhbHVlKGFycikge1xuICByZXR1cm4gYXJyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFyci5sZW5ndGgpXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVFYWNoKG1ldGVycywgZXhzKSB7XG4gIC8vIGNvbnNvbGUubG9nKG1ldGVycywgJ21ldGVycycsIGV4cywgJ251bSBleHMnKVxuICAvLyBjb25zb2xlLmxvZyhwb3NzaWJsZUVhY2hMaXN0W21ldGVyc11bZXhzXSwgJ2VhY2ggcG9zc2libGUgbGlzdHMgZm9yIHRob3NlIG1ldGVycycpXG4gIGxldCBlYWNoQXJyO1xuICBpZiAocG9zc2libGVFYWNoTGlzdFttZXRlcnNdW2V4c10pIHtcbiAgICBsZXQgcG9zc2libGVFYWNoTGlzdFNlbGVjdGVkID0gcmFuZG9tVmFsdWUocG9zc2libGVFYWNoTGlzdFttZXRlcnNdW2V4c10pO1xuICAgIGVhY2hBcnIgPSBwb3NzaWJsZUVhY2hMaXN0U2VsZWN0ZWQ7XG4gICAgLy8gZWFjaEFyciA9IHNodWZmbGUoLi4ucG9zc2libGVFYWNoTGlzdFNlbGVjdGVkKVxuICAgIC8vIGNvbnNvbGUubG9nKCdzZWxlY3RlZCBhbmQgc2h1ZmZsZWQnLCBlYWNoQXJyKVxuICB9IGVsc2Uge1xuICAgIC8vIGNvbnNvbGUubG9nKCdlcnJvciwgbm90IGZvdW5kIGxpc3Qgb2YgZWFjaCcpXG4gIH1cbiAgcmV0dXJuIGVhY2hBcnI7XG59XG4iLCJmdW5jdGlvbiBjYWxjdWxhdGVTZXQoZWFjaCwgdG90YWwpIHtcbiAgcmV0dXJuIHRvdGFsIC8gZWFjaDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVUcmFpbmluZ1NldChtZXRlcnMpIHtcbiAgbGV0IHNldHMgPSBbNTAsIDEwMCwgMTUwLCAyMDAsIDI1MCwgMzAwLCA0MDBdO1xuICBzZXRzID0gc2V0cy5maWx0ZXIoKGVsKSA9PiBlbCA8PSBtZXRlcnMpO1xuICBpZiAobWV0ZXJzIDwgMTAwIHx8IG1ldGVycyAlIDUwICE9IDApIHtcbiAgICBzZXRzLnB1c2goMjUpO1xuICB9XG4gIGxldCBwb3NzaWJsZVNldHMgPSBzZXRzLnJlZHVjZShmdW5jdGlvbiAobGlzdCwgZWFjaCkge1xuICAgIGlmIChtZXRlcnMgJSBlYWNoID09IDApIHtcbiAgICAgIGxldCBzZXQgPSBjYWxjdWxhdGVTZXQoZWFjaCwgbWV0ZXJzKTtcbiAgICAgIGxpc3QucHVzaChgJHtzZXR9eCR7ZWFjaH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIHBvc3NpYmxlU2V0c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZVNldHMubGVuZ3RoKV07XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgZ2VuZXJhdGVUb3RhbCBmcm9tIFwiLi4vZnVuY3Rpb25zL2dlbmVyYXRlVG90YWxcIjtcbmltcG9ydCBnZW5lcmF0ZUVhY2ggZnJvbSBcIi4uL2Z1bmN0aW9ucy9nZW5lcmF0ZUVhY2hcIjtcbmltcG9ydCBnZW5lcmF0ZVRyYWluaW5nU2V0IGZyb20gXCIuLi9mdW5jdGlvbnMvZ2VuZXJhdGVUcmFpbmluZ1NldFwiO1xuXG5leHBvcnQgY29uc3Qgc2V0c1JlZHVjZXIgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6IFwic2V0c1wiLFxuICBpbml0aWFsU3RhdGU6IHtcbiAgICB3YXJtdXA6IHsgdG90YWw6IDAsIGVhY2g6IFtdIH0sXG4gICAgdGVjaG5pcXVlOiB7IHRvdGFsOiAwLCBlYWNoOiBbXSwgc2V0czogW10gfSxcbiAgICBtYWluOiB7IHRvdGFsOiAwLCBlYWNoOiBbXSwgc2V0czogW10gfSxcbiAgICBjb29sZG93bjogeyB0b3RhbDogMCwgZWFjaDogW10gfSxcbiAgfSxcbiAgcmVkdWNlcnM6IHtcbiAgICBnZW5lcmF0ZU1ldGVyQmxvY2tzKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGNvbnN0IHsgbWV0ZXJzIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGxldCBuZXdTdGF0ZSA9IGdlbmVyYXRlVG90YWwobWV0ZXJzKTtcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9LFxuICAgIGdlbmVyYXRlTWV0ZXJFeGVyY2lzZXMoc3RhdGUsIGFjdGlvbikge1xuICAgICAgY29uc3QgeyB3YXJtdXBFeHMsIHRlY2huaXF1ZUV4cywgbWFpbkV4cywgY29vbGRvd25FeHMgfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgc3RhdGUud2FybXVwLmVhY2ggPSBnZW5lcmF0ZUVhY2goc3RhdGUud2FybXVwLnRvdGFsLCB3YXJtdXBFeHMpO1xuICAgICAgc3RhdGUudGVjaG5pcXVlLmVhY2ggPSBnZW5lcmF0ZUVhY2goc3RhdGUudGVjaG5pcXVlLnRvdGFsLCB0ZWNobmlxdWVFeHMpO1xuICAgICAgc3RhdGUubWFpbi5lYWNoID0gZ2VuZXJhdGVFYWNoKHN0YXRlLm1haW4udG90YWwsIG1haW5FeHMpO1xuICAgICAgc3RhdGUuY29vbGRvd24uZWFjaCA9IGdlbmVyYXRlRWFjaChzdGF0ZS5jb29sZG93bi50b3RhbCwgY29vbGRvd25FeHMpO1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgZ2VuZXJhdGVNYWluU2V0cyhzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBjb25zdCB7IGVhY2hMaXN0IH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGlmIChcbiAgICAgICAgTWF0aC5yYW5kb20oKSA8IDAuNSAmJlxuICAgICAgICBzdGF0ZS5tYWluLnRvdGFsID4gMTAwMCAmJlxuICAgICAgICBlYWNoTGlzdC5sZW5ndGggPiAxXG4gICAgICApIHtcbiAgICAgICAgLy8gZG8gbG9naWMgdG8gZG8gYmxvY2tzIG9mIDIgbGF5ZXIgc2V0c1xuICAgICAgICBpZiAoZWFjaExpc3QubGVuZ3RoID4gMykge1xuICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC41KSB7XG4gICAgICAgICAgICAvLyBkbyAyIGJsb2NrcyBvZiAyIGxheWVyIHNldHNcbiAgICAgICAgICAgIC8vIGRvIGN1dCBvZiBhcnJheVxuICAgICAgICAgICAgbGV0IGluZGV4ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAyOyBpIDwgZWFjaExpc3QubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgIGluZGV4ZXMucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjdXRJbmRleCA9IGluZGV4ZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaW5kZXhlcy5sZW5ndGgpXTtcbiAgICAgICAgICAgIGxldCBlYWNoTGlzdDEgPSBlYWNoTGlzdC5zbGljZShjdXRJbmRleCk7XG4gICAgICAgICAgICAvLyAgLy8gdGFrZSA1MCBtIGZyb20gbGFyZ2VzdCBlYWNoXG4gICAgICAgICAgICAvLyBsZXQgaW5kZXgxID0gZWFjaExpc3QxLmluZGV4T2YoTWF0aC5tYXgoLi4uZWFjaExpc3QxKSk7XG4gICAgICAgICAgICAvLyBlYWNoTGlzdDFbaW5kZXgxXS09NTA7XG4gICAgICAgICAgICBsZXQgZWFjaExpc3QyID0gZWFjaExpc3Quc2xpY2UoMCwgY3V0SW5kZXgpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZWFjaExpc3QxLCBlYWNoTGlzdDIsIGluZGV4ZXMpXG4gICAgICAgICAgICAvLyAgLy8gdGFrZSA1MCBtIGZyb20gbGFyZ2VzdCBlYWNoXG4gICAgICAgICAgICAvLyAgbGV0IGluZGV4MiA9IGVhY2hMaXN0Mi5pbmRleE9mKE1hdGgubWF4KC4uLmVhY2hMaXN0MikpO1xuICAgICAgICAgICAgLy8gIGVhY2hMaXN0MltpbmRleDJdLT01MDtcbiAgICAgICAgICAgIC8vIGRvIHNldHNcbiAgICAgICAgICAgIGxldCBzZXRMaXN0ID0gW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2V0czogMixcbiAgICAgICAgICAgICAgICBlYWNoU2V0OiBlYWNoTGlzdDEubWFwKChlbCkgPT4gZ2VuZXJhdGVUcmFpbmluZ1NldChlbCAvIDIpKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNldHM6IDIsXG4gICAgICAgICAgICAgICAgZWFjaFNldDogZWFjaExpc3QyLm1hcCgoZWwpID0+IGdlbmVyYXRlVHJhaW5pbmdTZXQoZWwgLyAyKSksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgc3RhdGUubWFpbi5zZXRzID0gc2V0TGlzdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gLy8gdGFrZSAxMDAgbSBmcm9tIGxhcmdlc3QgZWFjaFxuICAgICAgICAgICAgLy8gbGV0IGluZGV4ID0gZWFjaExpc3QuaW5kZXhPZihNYXRoLm1heCguLi5lYWNoTGlzdCkpO1xuICAgICAgICAgICAgLy8gZWFjaExpc3RbaW5kZXhdLT0xMDA7XG4gICAgICAgICAgICAvLyBkbyAxYmxvY2sgb2YgMiBsYXllciBzZXRzXG4gICAgICAgICAgICBsZXQgc2V0TGlzdCA9IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNldHM6IDIsXG4gICAgICAgICAgICAgICAgZWFjaFNldDogZWFjaExpc3QubWFwKChlbCkgPT4gZ2VuZXJhdGVUcmFpbmluZ1NldChlbCAvIDIpKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBzdGF0ZS5tYWluLnNldHMgPSBzZXRMaXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkbyAxIGJsb2NrIG9mIDIgbGF5ZXIgc2V0c1xuICAgICAgICAgIGxldCBzZXRMaXN0ID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzZXRzOiAyLFxuICAgICAgICAgICAgICBlYWNoU2V0OiBlYWNoTGlzdC5tYXAoKGVsKSA9PiBnZW5lcmF0ZVRyYWluaW5nU2V0KGVsIC8gMikpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdO1xuICAgICAgICAgIHN0YXRlLm1haW4uc2V0cyA9IHNldExpc3Q7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRvIG9uZSBsYXllciBzZXRzXG4gICAgICAgIGxldCBzZXRMaXN0ID0gZWFjaExpc3QubWFwKChlbCkgPT4gZ2VuZXJhdGVUcmFpbmluZ1NldChlbCkpO1xuICAgICAgICBzdGF0ZS5tYWluLnNldHMgPSBzZXRMaXN0O1xuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2coc3RhdGUubWFpbi5zZXRzLCAnZmluYWwgbWFpbiBzZXRzJyk7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgICBnZW5lcmF0ZVRlY2huaXF1ZVNldHMoc3RhdGUsIGFjdGlvbikge1xuICAgICAgY29uc3QgeyBlYWNoTGlzdCB9ID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAvLyBjb25zb2xlLmxvZyhlYWNoTGlzdCwgJ2JlZm9yZSB0ZWNobmlxdWUnKVxuICAgICAgbGV0IHNldExpc3QgPSBlYWNoTGlzdC5tYXAoKGVsKSA9PiBnZW5lcmF0ZVRyYWluaW5nU2V0KGVsKSk7XG4gICAgICBzdGF0ZS50ZWNobmlxdWUuc2V0cyA9IHNldExpc3Q7XG4gICAgICAvLyBjb25zb2xlLmxvZyhzdGF0ZS50ZWNobmlxdWUuc2V0cywgJ2ZpbmFsIHRlY2huaXF1ZSBzZXRzJyk7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3Qge1xuICBnZW5lcmF0ZU1ldGVyQmxvY2tzLFxuICBnZW5lcmF0ZU1ldGVyRXhlcmNpc2VzLFxuICBnZW5lcmF0ZU1haW5TZXRzLFxuICBnZW5lcmF0ZVRlY2huaXF1ZVNldHMsXG59ID0gc2V0c1JlZHVjZXIuYWN0aW9ucztcbmV4cG9ydCBkZWZhdWx0IHNldHNSZWR1Y2VyLnJlZHVjZXI7XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5cbmV4cG9ydCBjb25zdCBwYWNlUmVkdWNlciA9IGNyZWF0ZVNsaWNlKHtcbiAgbmFtZTogXCJwYWNlXCIsXG4gIGluaXRpYWxTdGF0ZTogMCxcbiAgcmVkdWNlcnM6IHtcbiAgICBzZXRSZWR1eFBhY2Uoc3RhdGUsIGFjdGlvbikge1xuICAgICAgY29uc3QgeyBwYWNlIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIC8vIHBhY2UgaXMgcGFzc2VkIGFzIGEgc3RyaW5nIGV2ZW4gdGhvdWdoIHdoZW4gcGFzc2VkIGl0IGlzIGEgbnVtYmVyLCBpcyB0aGVyZSBhIHR5cGUgY29oZXJ0aW9uIHdoZW4gcGFzc2luZyBkYXRhIHRvIHJlZHV4P1xuICAgICAgLy8gY29uc29sZS5sb2codHlwZW9mIHBhY2UsICd0eXBlIG9mIHBhY2UnKVxuICAgICAgcmV0dXJuIHBhY2U7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgeyBzZXRSZWR1eFBhY2UgfSA9IHBhY2VSZWR1Y2VyLmFjdGlvbnM7XG5leHBvcnQgZGVmYXVsdCBwYWNlUmVkdWNlci5yZWR1Y2VyO1xuIiwiaW1wb3J0IF9jdXJyeTIgZnJvbSBcIi4vaW50ZXJuYWwvX2N1cnJ5Mi5qc1wiO1xuLyoqXG4gKiBEaXZpZGVzIHR3byBudW1iZXJzLiBFcXVpdmFsZW50IHRvIGBhIC8gYmAuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTWF0aFxuICogQHNpZyBOdW1iZXIgLT4gTnVtYmVyIC0+IE51bWJlclxuICogQHBhcmFtIHtOdW1iZXJ9IGEgVGhlIGZpcnN0IHZhbHVlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGIgVGhlIHNlY29uZCB2YWx1ZS5cbiAqIEByZXR1cm4ge051bWJlcn0gVGhlIHJlc3VsdCBvZiBgYSAvIGJgLlxuICogQHNlZSBSLm11bHRpcGx5XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5kaXZpZGUoNzEsIDEwMCk7IC8vPT4gMC43MVxuICpcbiAqICAgICAgY29uc3QgaGFsZiA9IFIuZGl2aWRlKFIuX18sIDIpO1xuICogICAgICBoYWxmKDQyKTsgLy89PiAyMVxuICpcbiAqICAgICAgY29uc3QgcmVjaXByb2NhbCA9IFIuZGl2aWRlKDEpO1xuICogICAgICByZWNpcHJvY2FsKDQpOyAgIC8vPT4gMC4yNVxuICovXG5cbnZhciBkaXZpZGUgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MihmdW5jdGlvbiBkaXZpZGUoYSwgYikge1xuICByZXR1cm4gYSAvIGI7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGl2aWRlOyIsImltcG9ydCBfY3VycnkyIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTIuanNcIjtcbi8qKlxuICogU3VidHJhY3RzIGl0cyBzZWNvbmQgYXJndW1lbnQgZnJvbSBpdHMgZmlyc3QgYXJndW1lbnQuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTWF0aFxuICogQHNpZyBOdW1iZXIgLT4gTnVtYmVyIC0+IE51bWJlclxuICogQHBhcmFtIHtOdW1iZXJ9IGEgVGhlIGZpcnN0IHZhbHVlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGIgVGhlIHNlY29uZCB2YWx1ZS5cbiAqIEByZXR1cm4ge051bWJlcn0gVGhlIHJlc3VsdCBvZiBgYSAtIGJgLlxuICogQHNlZSBSLmFkZFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIuc3VidHJhY3QoMTAsIDgpOyAvLz0+IDJcbiAqXG4gKiAgICAgIGNvbnN0IG1pbnVzNSA9IFIuc3VidHJhY3QoUi5fXywgNSk7XG4gKiAgICAgIG1pbnVzNSgxNyk7IC8vPT4gMTJcbiAqXG4gKiAgICAgIGNvbnN0IGNvbXBsZW1lbnRhcnlBbmdsZSA9IFIuc3VidHJhY3QoOTApO1xuICogICAgICBjb21wbGVtZW50YXJ5QW5nbGUoMzApOyAvLz0+IDYwXG4gKiAgICAgIGNvbXBsZW1lbnRhcnlBbmdsZSg3Mik7IC8vPT4gMThcbiAqL1xuXG52YXIgc3VidHJhY3QgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MihmdW5jdGlvbiBzdWJ0cmFjdChhLCBiKSB7XG4gIHJldHVybiBOdW1iZXIoYSkgLSBOdW1iZXIoYik7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3VidHJhY3Q7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UGFjZShkdXJhdGlvbikge1xuICBsZXQgbWludXRlcyA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyA2MCk7XG4gIGxldCBzZWNvbmRzID1cbiAgICAoZHVyYXRpb24gJSA2MCkudG9TdHJpbmcoKS5sZW5ndGggPiAxID8gZHVyYXRpb24gJSA2MCA6IGAwJHtkdXJhdGlvbiAlIDYwfWA7XG4gIHJldHVybiBgJHttaW51dGVzfToke3NlY29uZHN9YDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHtcbiAgZmlsdGVyQnlMZXZlbCxcbiAgZmlsdGVyQnlTdHJva2UsXG4gIGZpbHRlckJ5TWF0ZXJpYWwsXG4gIHJlc2V0TGlzdCxcbn0gZnJvbSBcIi4uLy4uL3NsaWNlcy9leGVyY2lzZXNTbGljZVwiO1xuaW1wb3J0IHsgY29weV9maWx0ZXJfc2VsZWN0X3dhcm11cEV4ZXJjaXNlcyB9IGZyb20gXCIuLi8uLi9zbGljZXMvd2FybXVwU2xpY2VcIjtcbmltcG9ydCB7IGNvcHlfZmlsdGVyX3NlbGVjdF90ZWNobmlxdWVFeGVyY2lzZXMgfSBmcm9tIFwiLi4vLi4vc2xpY2VzL3RlY2huaXF1ZVNsaWNlXCI7XG5pbXBvcnQgeyBjb3B5X2ZpbHRlcl9zZWxlY3RfbWFpbkV4ZXJjaXNlcyB9IGZyb20gXCIuLi8uLi9zbGljZXMvbWFpblNsaWNlXCI7XG5pbXBvcnQgeyBjb3B5X2ZpbHRlcl9zZWxlY3RfY29vbGRvd25FeGVyY2lzZXMgfSBmcm9tIFwiLi4vLi4vc2xpY2VzL2Nvb2xkb3duU2xpY2VcIjtcbmltcG9ydCB7IGRpc3BsYXlIaWRlIH0gZnJvbSBcIi4uLy4uL3NsaWNlcy9kaXNwbGF5U2xpY2VcIjtcbmltcG9ydCB7XG4gIGdlbmVyYXRlTWV0ZXJCbG9ja3MsXG4gIGdlbmVyYXRlTWV0ZXJFeGVyY2lzZXMsXG4gIGdlbmVyYXRlVGVjaG5pcXVlU2V0cyxcbiAgZ2VuZXJhdGVNYWluU2V0cyxcbn0gZnJvbSBcIi4uLy4uL3NsaWNlcy9zZXRzU2xpY2VcIjtcbmltcG9ydCB7IHNldFJlZHV4UGFjZSB9IGZyb20gXCIuLi8uLi9zbGljZXMvcGFjZVNsaWNlXCI7XG5pbXBvcnQgZXhlcmNpc2VzTGlzdCBmcm9tIFwiLi4vLi4vbGlzdHMvZXhlcmNpc2VzTGlzdFwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgZm9ybWF0UGFjZSBmcm9tIFwiLi4vLi4vZnVuY3Rpb25zL2Zvcm1hdFBhY2VcIjtcbmltcG9ydCBjYXBpdGFsaXplRmlyc3RMZXR0ZXIgZnJvbSBcIi4uLy4uL2Z1bmN0aW9ucy9jYXBpdGFsaXplRmlyc3RMZXR0ZXJcIjtcblxubGV0IGlucHV0RGF0YSA9IHt9O1xuXG5jb25zdCBJbnB1dCA9ICgpID0+IHtcbiAgY29uc3QgW3N0cm9rZXMsIHNldFN0cm9rZXNdID0gdXNlU3RhdGUoW1wiZnJlZXN0eWxlXCJdKTtcbiAgY29uc3QgW21hdGVyaWFscywgc2V0TWF0ZXJpYWxzXSA9IHVzZVN0YXRlKFtcImtpY2tib2FyZFwiLCBcInB1bGxidW95XCJdKTtcbiAgY29uc3QgW211c2NsZXMsIHNldE11c2NsZXNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IFtsZXZlbCwgc2V0TGV2ZWxdID0gdXNlU3RhdGUoMyk7XG4gIGNvbnN0IFttZXRlcnMsIHNldE1ldGVyc10gPSB1c2VTdGF0ZSgyMjAwKTtcbiAgY29uc3QgW3BhY2UsIHNldFBhY2VdID0gdXNlU3RhdGUoMTAwKTtcbiAgY29uc3QgW3NlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSB1c2VTdGF0ZSh7XG4gICAgMTogZmFsc2UsXG4gICAgMjogZmFsc2UsXG4gICAgMzogdHJ1ZSxcbiAgICA0OiBmYWxzZSxcbiAgICA1OiBmYWxzZSxcbiAgfSk7XG4gIGNvbnN0IFtzaG93TWVzc2FnZSwgc2V0U2hvd01lc3NhZ2VdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBkaXNwbGF5ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5kaXNwbGF5KTtcbiAgbGV0IHBhY2VUaW1lID0gZm9ybWF0UGFjZShwYWNlKTtcblxuICBjb25zdCBsaXN0VG9NYXAgPSB7XG4gICAgbGV2ZWxzOiBbMSwgMiwgMywgNCwgNV0sXG4gICAgc3Ryb2tlczogW1wiZnJlZXN0eWxlXCIsIFwiYmFja3N0cm9rZVwiLCBcImJyZWFzdHN0cm9rZVwiLCBcImJ1dHRlcmZseVwiXSxcbiAgICBtYXRlcmlhbHM6IFtcImtpY2tib2FyZFwiLCBcInB1bGxidW95XCIsIFwiZmluc1wiLCBcInBhZGRsZXNcIiwgXCJzbm9ya2VsXCJdLFxuICAgIG11c2NsZXM6IFtcImFybXNcIiwgXCJwZWNzXCIsIFwiYWJzXCIsIFwiYmFja1wiLCBcImxlZ3NcIl0sXG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBwYWNlVGltZSA9IGZvcm1hdFBhY2UocGFjZSk7XG4gIH0sIFtwYWNlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRTZWxlY3RlZCh7XG4gICAgICAxOiBmYWxzZSxcbiAgICAgIDI6IGZhbHNlLFxuICAgICAgMzogZmFsc2UsXG4gICAgICA0OiBmYWxzZSxcbiAgICAgIDU6IGZhbHNlLFxuICAgICAgW2xldmVsXTogdHJ1ZSxcbiAgICB9KTtcbiAgICBzZXRTdHJva2VzKHN0cm9rZXMuZmlsdGVyKChlbCkgPT4gZWwgIT0gXCJidXR0ZXJmbHlcIikpO1xuICB9LCBbbGV2ZWxdKTtcblxuICBmdW5jdGlvbiB0aHVua0FjdGlvbkNyZWF0b3IoKSB7XG4gICAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdtaWRkbGV3YXJlIHdvcmtpbmcnKVxuICAgICAgLy8gY29uc29sZS5sb2coXG4gICAgICAvLyAgIGdldFN0YXRlKCkuZXhlcmNpc2VzLFxuICAgICAgLy8gICBcImJlZm9yZSBmaWx0ZXJzXCIsXG4gICAgICAvLyAgIGxldmVsLFxuICAgICAgLy8gICBzdHJva2VzLFxuICAgICAgLy8gICBtYXRlcmlhbHMsXG4gICAgICAvLyAgIG11c2NsZXMsXG4gICAgICAvLyAgIG1ldGVycyxcbiAgICAgIC8vICAgcGFjZVxuICAgICAgLy8gKTtcbiAgICAgIGRpc3BhdGNoKGdlbmVyYXRlTWV0ZXJCbG9ja3MoeyBtZXRlcnM6IGlucHV0RGF0YS5tZXRlcnMgfSkpO1xuICAgICAgZGlzcGF0Y2goZmlsdGVyQnlMZXZlbCh7IGxldmVsOiBpbnB1dERhdGEubGV2ZWwgfSkpO1xuICAgICAgZGlzcGF0Y2goZmlsdGVyQnlTdHJva2UoeyBzdHJva2VzVGFyZ2V0ZWQ6IGlucHV0RGF0YS5zdHJva2VzIH0pKTtcbiAgICAgIGRpc3BhdGNoKGZpbHRlckJ5TWF0ZXJpYWwoeyBtYXRlcmlhbDogaW5wdXREYXRhLm1hdGVyaWFscyB9KSk7XG4gICAgICBkaXNwYXRjaChzZXRSZWR1eFBhY2UoeyBwYWNlOiBpbnB1dERhdGEucGFjZSB9KSk7XG4gICAgICBsZXQgZmlsdGVyZWRMaXN0ID0gZ2V0U3RhdGUoKS5leGVyY2lzZXM7XG4gICAgICAvLyBjb25zb2xlLmxvZyhmaWx0ZXJlZExpc3QsIFwiYWZ0ZXIgZmlsdGVyc1wiKTtcbiAgICAgIGRpc3BhdGNoKFxuICAgICAgICBjb3B5X2ZpbHRlcl9zZWxlY3Rfd2FybXVwRXhlcmNpc2VzKHtcbiAgICAgICAgICBmaWx0ZXJlZEV4ZXJjaXNlczogZmlsdGVyZWRMaXN0LFxuICAgICAgICAgIG1hdGVyaWFsOiBpbnB1dERhdGEubWF0ZXJpYWxzLFxuICAgICAgICAgIG11c2NsZTogaW5wdXREYXRhLm11c2NsZXMsXG4gICAgICAgICAgbWV0ZXJzOiBnZXRTdGF0ZSgpLnNldHMud2FybXVwLnRvdGFsLFxuICAgICAgICAgIGxldmVsOiBpbnB1dERhdGEubGV2ZWwsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgY29uc3Qgd2FybXVwID0gZ2V0U3RhdGUoKS53YXJtdXA7XG4gICAgICAvLyByZW1vdmUgZXhlcmNpc2VzIHRoYXQgYXJlIGFscmVhZHkgaW4gd2FybXVwIC0tPiB1c2UgXy5kaWZmZXJlbmNlIGZ1bmN0aW9uXG4gICAgICBmaWx0ZXJlZExpc3QgPSBfLmRpZmZlcmVuY2UoZmlsdGVyZWRMaXN0LCB3YXJtdXApO1xuICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSByZW1vdmVkIHRoZSBnZW5lcmF0ZWQgd2FybXVwIGV4ZXJjaXNlcyBmcm9tIHRoZSBsaXN0XG4gICAgICAvLyBjb25zb2xlLmxvZyhmaWx0ZXJlZExpc3QpO1xuICAgICAgZGlzcGF0Y2goXG4gICAgICAgIGNvcHlfZmlsdGVyX3NlbGVjdF90ZWNobmlxdWVFeGVyY2lzZXMoe1xuICAgICAgICAgIGZpbHRlcmVkRXhlcmNpc2VzOiBmaWx0ZXJlZExpc3QsXG4gICAgICAgICAgbWF0ZXJpYWw6IGlucHV0RGF0YS5tYXRlcmlhbHMsXG4gICAgICAgICAgbXVzY2xlOiBpbnB1dERhdGEubXVzY2xlcyxcbiAgICAgICAgICBtZXRlcnM6IGdldFN0YXRlKCkuc2V0cy50ZWNobmlxdWUudG90YWwsXG4gICAgICAgICAgbGV2ZWw6IGlucHV0RGF0YS5sZXZlbCxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICBjb25zdCB0ZWNobmlxdWUgPSBnZXRTdGF0ZSgpLnRlY2huaXF1ZTtcbiAgICAgIC8vIHJlbW92ZSBleGVyY2lzZXMgdGhhdCBhcmUgYWxyZWFkeSBpbiB0ZWNobmlxdWUgLS0+IHVzZSBfLmRpZmZlcmVuY2UgZnVuY3Rpb25cbiAgICAgIGZpbHRlcmVkTGlzdCA9IF8uZGlmZmVyZW5jZShmaWx0ZXJlZExpc3QsIHRlY2huaXF1ZSk7XG4gICAgICBkaXNwYXRjaChcbiAgICAgICAgY29weV9maWx0ZXJfc2VsZWN0X21haW5FeGVyY2lzZXMoe1xuICAgICAgICAgIGZpbHRlcmVkRXhlcmNpc2VzOiBmaWx0ZXJlZExpc3QsXG4gICAgICAgICAgbWF0ZXJpYWw6IGlucHV0RGF0YS5tYXRlcmlhbHMsXG4gICAgICAgICAgbXVzY2xlOiBpbnB1dERhdGEubXVzY2xlcyxcbiAgICAgICAgICBtZXRlcnM6IGdldFN0YXRlKCkuc2V0cy5tYWluLnRvdGFsLFxuICAgICAgICAgIGxldmVsOiBpbnB1dERhdGEubGV2ZWwsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgY29uc3QgbWFpbiA9IGdldFN0YXRlKCkubWFpbjtcbiAgICAgIC8vIHJlbW92ZSBleGVyY2lzZXMgdGhhdCBhcmUgYWxyZWFkeSBpbiBtYWluIC0tPiB1c2UgXy5kaWZmZXJlbmNlIGZ1bmN0aW9uXG4gICAgICBmaWx0ZXJlZExpc3QgPSBfLmRpZmZlcmVuY2UoZmlsdGVyZWRMaXN0LCBtYWluKTtcbiAgICAgIGRpc3BhdGNoKFxuICAgICAgICBjb3B5X2ZpbHRlcl9zZWxlY3RfY29vbGRvd25FeGVyY2lzZXMoe1xuICAgICAgICAgIGZpbHRlcmVkRXhlcmNpc2VzOiBmaWx0ZXJlZExpc3QsXG4gICAgICAgICAgbWF0ZXJpYWw6IGlucHV0RGF0YS5tYXRlcmlhbHMsXG4gICAgICAgICAgbWV0ZXJzOiBnZXRTdGF0ZSgpLnNldHMuY29vbGRvd24udG90YWwsXG4gICAgICAgICAgbGV2ZWw6IGlucHV0RGF0YS5sZXZlbCxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICBjb25zdCBjb29sZG93biA9IGdldFN0YXRlKCkuY29vbGRvd247XG4gICAgICAvLyBjb25zb2xlLmxvZyh3YXJtdXAsICd3YXJtdXAnKVxuICAgICAgLy8gY29uc29sZS5sb2codGVjaG5pcXVlLCAndGVjaG5pcXVlJylcbiAgICAgIC8vIGNvbnNvbGUubG9nKG1haW4sICdtYWluJylcbiAgICAgIC8vIGNvbnNvbGUubG9nKGNvb2xkb3duLCAnY29vbGRvd24nKVxuICAgICAgLy8gZ2VuZXJhdGUgbWV0ZXJzIGZvciBldmVyeSBleGVyY2lzZSBpbiBldmVyeSBibG9ja1xuICAgICAgZGlzcGF0Y2goXG4gICAgICAgIGdlbmVyYXRlTWV0ZXJFeGVyY2lzZXMoe1xuICAgICAgICAgIHdhcm11cEV4czogd2FybXVwLmxlbmd0aCxcbiAgICAgICAgICB0ZWNobmlxdWVFeHM6IHRlY2huaXF1ZS5sZW5ndGgsXG4gICAgICAgICAgbWFpbkV4czogbWFpbi5sZW5ndGgsXG4gICAgICAgICAgY29vbGRvd25FeHM6IGNvb2xkb3duLmxlbmd0aCxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICAvLyBnZW5lcmF0ZSBzZXRzIGZvciB3YXJtdXAgZXhlcmNpc2VzXG4gICAgICBjb25zdCB0ZWNobmlxdWVFYWNoTGlzdCA9IGdldFN0YXRlKCkuc2V0cy50ZWNobmlxdWUuZWFjaDtcbiAgICAgIGRpc3BhdGNoKGdlbmVyYXRlVGVjaG5pcXVlU2V0cyh7IGVhY2hMaXN0OiB0ZWNobmlxdWVFYWNoTGlzdCB9KSk7XG4gICAgICAvLyBnZW5lcmF0ZSBzZXRzIGZvciBtYWluIGV4ZXJjaXNlc1xuICAgICAgY29uc3QgbWFpbkVhY2hMaXN0ID0gZ2V0U3RhdGUoKS5zZXRzLm1haW4uZWFjaDtcbiAgICAgIGRpc3BhdGNoKGdlbmVyYXRlTWFpblNldHMoeyBlYWNoTGlzdDogbWFpbkVhY2hMaXN0IH0pKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyRXhlcmNpc2VzKCkge1xuICAgIC8vIGNvbnNvbGUubG9nKGlucHV0RGF0YSk7XG4gICAgLy8gZGlzcGF0Y2goY2FsbGluZyB0aHVuayBhY3Rpb24gY3JlYXRvcikgaW4gb3JkZXIgdG8gZGlzcGF0Y2ggZGVwZW5kZW50IHRvIGVhY2ggb3RoZXIgc3RhdGUgdXBkYXRlc1xuICAgIGRpc3BhdGNoKHRodW5rQWN0aW9uQ3JlYXRvcigpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChlKSB7XG4gICAgLy8gYWxlcnQgaWYgYW55IGZpZWxkcyBhcmUgbm90IGFzIGV4cGVjdGVkXG4gICAgLy8gY29uc29sZS5sb2coZSk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzdHJva2VzLmxlbmd0aCA8IDEpIHtcbiAgICAgIHNldFNob3dNZXNzYWdlKHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRTaG93TWVzc2FnZShmYWxzZSk7XG4gICAgICBkaXNwYXRjaChkaXNwbGF5SGlkZSh7IGZvcm06IGZhbHNlLCB0cmFpbmluZzogdHJ1ZSwgYnV0dG9uczogdHJ1ZSB9KSk7XG4gICAgICAvLyBhcyBpdCByZXJlbmRlcnMsIHdlIGRvbnQgd2FudCB0byBsb3NlIG91ciBpbnB1dCBkYXRhLCBzbyB3ZSBzdG9yZSBpdCBvdXRzaWRlIG91ciBjb21wb25lbnQgaW4gYW4gb2JqZWN0XG4gICAgICBpbnB1dERhdGEubGV2ZWwgPSBsZXZlbDtcbiAgICAgIGlucHV0RGF0YS5zdHJva2VzID0gc3Ryb2tlcztcbiAgICAgIGlucHV0RGF0YS5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG4gICAgICBpbnB1dERhdGEubXVzY2xlcyA9IG11c2NsZXM7XG4gICAgICBpbnB1dERhdGEubWV0ZXJzID0gbWV0ZXJzO1xuICAgICAgaW5wdXREYXRhLnBhY2UgPSBwYWNlO1xuICAgICAgLy8gY29uc29sZS5sb2coaW5wdXREYXRhKTtcbiAgICAgIGZpbHRlckV4ZXJjaXNlcygpO1xuICAgICAgZXhlY3V0ZVNjcm9sbCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGV4ZWN1dGVTY3JvbGwoKSB7XG4gICAgY29uc3Qgc2VjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2Nyb2xsLXJlZlwiKTtcbiAgICBzZWN0aW9uLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6IFwic21vb3RoXCIsIGJsb2NrOiBcInN0YXJ0XCIgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWdlbmVyYXRlV29ya291dCgpIHtcbiAgICBmaWx0ZXJFeGVyY2lzZXMoKTtcbiAgICBleGVjdXRlU2Nyb2xsKCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldE9wdGlvbnMoKSB7XG4gICAgcmVzZXRGb3JtKCk7XG4gICAgZXhlY3V0ZVNjcm9sbCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgIC8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cmFpbmluZy1mb3JtJykucmVzZXQoKTtcbiAgICBzZXRMZXZlbCgzKTtcbiAgICBzZXRNZXRlcnMoMjIwMCk7XG4gICAgc2V0UGFjZSgxMDApO1xuICAgIHNldFN0cm9rZXMoW1wiZnJlZXN0eWxlXCJdKTtcbiAgICBzZXRNYXRlcmlhbHMoW1wia2lja2JvYXJkXCIsIFwicHVsbGJ1b3lcIl0pO1xuICAgIHNldE11c2NsZXMoW10pO1xuICAgIHNldFNob3dNZXNzYWdlKGZhbHNlKTtcbiAgICBkaXNwYXRjaChyZXNldExpc3QoeyByZXNldDogZXhlcmNpc2VzTGlzdCB9KSk7XG4gICAgZGlzcGF0Y2goZGlzcGxheUhpZGUoeyBmb3JtOiB0cnVlLCB0cmFpbmluZzogZmFsc2UsIGJ1dHRvbnM6IGZhbHNlIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN0cm9rZXMoZSkge1xuICAgIGlmIChlLnRhcmdldC5jaGVja2VkKSB7XG4gICAgICBzZXRTdHJva2VzKFsuLi5zdHJva2VzLCBlLnRhcmdldC52YWx1ZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRTdHJva2VzKHN0cm9rZXMuZmlsdGVyKChlbCkgPT4gZWwgIT0gZS50YXJnZXQudmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVNYXRlcmlhbHMoZSkge1xuICAgIGlmIChlLnRhcmdldC5jaGVja2VkKSB7XG4gICAgICBzZXRNYXRlcmlhbHMoWy4uLm1hdGVyaWFscywgZS50YXJnZXQudmFsdWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0TWF0ZXJpYWxzKG1hdGVyaWFscy5maWx0ZXIoKGVsKSA9PiBlbCAhPSBlLnRhcmdldC52YWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU11c2NsZXMoZSkge1xuICAgIGlmIChlLnRhcmdldC5jaGVja2VkKSB7XG4gICAgICBzZXRNdXNjbGVzKFsuLi5tdXNjbGVzLCBlLnRhcmdldC52YWx1ZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRNdXNjbGVzKG11c2NsZXMuZmlsdGVyKChlbCkgPT4gZWwgIT0gZS50YXJnZXQudmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiIG1iLTMyXCI+XG4gICAgICA8aHJcbiAgICAgICAgY2xhc3NOYW1lPXtgaC0xIHRleHQtZGFyay1ncmV5IGJnLWRhcmstZ3JleSAke1xuICAgICAgICAgIGRpc3BsYXkuZm9ybSA/IFwiXCIgOiBcImhpZGRlblwiXG4gICAgICAgIH1gfVxuICAgICAgPjwvaHI+XG4gICAgICA8aDFcbiAgICAgICAgY2xhc3NOYW1lPXtgZm9udC1iZWJhcyBwdC0xMiBwYi0xMCB0ZXh0LWxlZnQgcGwtNiB0ZXh0LTN4bCAke1xuICAgICAgICAgIGRpc3BsYXkuZm9ybSA/IFwiXCIgOiBcImhpZGRlblwiXG4gICAgICAgIH1gfVxuICAgICAgPlxuICAgICAgICA8dT5SRUFEWT88L3U+XG4gICAgICA8L2gxPlxuICAgICAgPGZvcm1cbiAgICAgICAgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH1cbiAgICAgICAgaWQ9XCJ0cmFpbmluZy1mb3JtXCJcbiAgICAgICAgY2xhc3NOYW1lPXtgZmxleCBweC02ICBmbGV4LWNvbCBpdGVtcy1zdGFydCBqdXN0aWZ5LWNlbnRlciBzcGFjZS15LTEwICR7XG4gICAgICAgICAgZGlzcGxheS5mb3JtID8gXCJcIiA6IFwiaGlkZGVuXCJcbiAgICAgICAgfWB9XG4gICAgICAgIHJvbGU9XCJmb3JtXCJcbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHNwYWNlLXktNCBib3JkZXItMiB3LWZ1bGwgYm9yZGVyLWxpZ2h0ZXItZ3JleSBib3JkZXItb3BhY2l0eS00MCBweS00IHB4LTRcIj5cbiAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC1sZWZ0XCI+WW91ciBsZXZlbDo8L2gzPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJmbGV4IGZsZXgtcm93IGgtOFwiPlxuICAgICAgICAgICAge2xpc3RUb01hcC5sZXZlbHMubWFwKChsZXZlbCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVsYXRpdmUgdy05XCJcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpblJpZ2h0OiBcIjAuMDVyZW1cIiB9fVxuICAgICAgICAgICAgICAgICAga2V5PXtsZXZlbCArIFwiX2xldmVsXCJ9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgIGlkPXtsZXZlbH1cbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cImxldmVsc1wiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtsZXZlbH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwib3BhY2l0eS0wXCJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRMZXZlbChlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIGh0bWxGb3I9e2xldmVsfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BhYnNvbHV0ZSBmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGluc2V0LTAgJHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFtsZXZlbF1cbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCJiZy1ibHVlLW9jZWFuIHRleHQtd2hpdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcImJnLWxpZ2h0LWdyZXkgYmctb3BhY2l0eS0yMFwiXG4gICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7bGV2ZWx9XG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0LWRlY2ltYWwgbGlzdC1pbnNpZGUgZmxleCBmbGV4LWNvbCBnYXAtNCBweS00IHRleHQtbGVmdFwiPlxuICAgICAgICAgICAgPGxpPkkmIzM5O20gc3RpbGwgbGVhcm5pbmcgaG93IHRvIHN3aW0uPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgSSYjMzk7bSBhYmxlIHRvIHN3aW0gMTAwbSBmcmVlc3R5bGUsIGJhY2tzdHJva2UgJiBicmVhc3RzdHJva2UuXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPkkmIzM5O20gYWJsZSB0byBzd2ltIDIwMG0gbWVkbGV5LjwvbGk+XG4gICAgICAgICAgICA8bGk+SSYjMzk7bSBhYmxlIHRvIHN3aW0gNDAwbSBtZWRsZXkuPC9saT5cbiAgICAgICAgICAgIDxsaT5JJiMzOTttIGFibGUgdG8gc3dpbSAyMDBtIGJ1dHRlcmZseS48L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBzcGFjZS15LTE2IHctZnVsbCBib3JkZXItMiBib3JkZXItbGlnaHRlci1ncmV5IGJvcmRlci1vcGFjaXR5LTQwIHB0LTQgcGItNSBweC00XCI+XG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGVmdFwiPlNldCB5b3VyIG1ldGVycyBnb2FsOjwvaDM+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSB3LTEwLzEyIGZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwicmFuZ2VcIlxuICAgICAgICAgICAgICBtaW49XCI1MDBcIlxuICAgICAgICAgICAgICBtYXg9XCI0MDAwXCJcbiAgICAgICAgICAgICAgc3RlcD1cIjEwMFwiXG4gICAgICAgICAgICAgIHZhbHVlPXttZXRlcnN9XG4gICAgICAgICAgICAgIGlkPVwibWV0ZXJTbGlkZXJcIlxuICAgICAgICAgICAgICBuYW1lPVwibWV0ZXJzXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGgtMlwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0TWV0ZXJzKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8b3V0cHV0XG4gICAgICAgICAgICAgIGh0bWxGb3I9XCJtZXRlcnNcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2BiZy13aGl0ZSBzaGFkb3ctc20gYm9yZGVyLW9wYWNpdHktNDAgYm9yZGVyLWxpZ2h0ZXItZ3JleSB3LTMvMTIgdGV4dC1zbSBweS0xIHJvdW5kZWQtbWQgYWJzb2x1dGUgYm90dG9tLTUgb3V0cHV0LW1ldGVyc2B9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IFwiMC41cHhcIixcbiAgICAgICAgICAgICAgICBsZWZ0OiBgJHtfLmRpdmlkZShfLnN1YnRyYWN0KG1ldGVycywgNDA3Ljg5KSwgMzYuODQpfSVgLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoLTUwJSwgMClcIixcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge21ldGVyc30gbVxuICAgICAgICAgICAgPC9vdXRwdXQ+XG4gICAgICAgICAgICB7Lyoge18uZGl2aWRlKF8uc3VidHJhY3QobWV0ZXJzLCA0MDcuODkpLCAzNi44NCl9ICovfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHNwYWNlLXktMTYgdy1mdWxsIGJvcmRlci0yIGJvcmRlci1saWdodGVyLWdyZXkgYm9yZGVyLW9wYWNpdHktNDAgcHQtNCBwYi01IHB4LTRcIj5cbiAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC1sZWZ0XCI+U2V0IHlvdXIgMTAwbSBmcmVlc3R5bGUgcGFjZTo8L2gzPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmUgdy04LzEyIGZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwicmFuZ2VcIlxuICAgICAgICAgICAgICBtaW49XCI3MFwiXG4gICAgICAgICAgICAgIG1heD1cIjE1MFwiXG4gICAgICAgICAgICAgIHN0ZXA9XCI1XCJcbiAgICAgICAgICAgICAgdmFsdWU9e3BhY2V9XG4gICAgICAgICAgICAgIGlkPVwicGFjZVNsaWRlclwiXG4gICAgICAgICAgICAgIG5hbWU9XCJwYWNlXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGgtMlwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0UGFjZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPG91dHB1dFxuICAgICAgICAgICAgICBodG1sRm9yPVwicGFjZVwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17YGJnLXdoaXRlIHNoYWRvdy1zbSBib3JkZXItb3BhY2l0eS00MCBib3JkZXItbGlnaHRlci1ncmV5IHRleHQtc20gcHgtMyBweS0xIHJvdW5kZWQtbWQgYWJzb2x1dGUgYm90dG9tLTVgfVxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiBcIjAuNXB4XCIsXG4gICAgICAgICAgICAgICAgbGVmdDogYCR7Xy5kaXZpZGUoXy5zdWJ0cmFjdChwYWNlLCA2Ny44OTQ3KSwgMC44NDIxKX0lYCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKC01MCUsIDApXCIsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwYWNlVGltZX1cbiAgICAgICAgICAgIDwvb3V0cHV0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHctZnVsbCBzcGFjZS15LTQgYm9yZGVyLTIgYm9yZGVyLWxpZ2h0ZXItZ3JleSBib3JkZXItb3BhY2l0eS00MCBweS00IHB4LTQgXCI+XG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGVmdCBcIj5TdHJva2VzIGZvciB0aGlzIHdvcmtvdXQ6PC9oMz5cbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBzcGFjZS15LTIgaXRlbXMtc3RhcnRcIj5cbiAgICAgICAgICAgIHtsaXN0VG9NYXAuc3Ryb2tlcy5tYXAoKHN0cm9rZSkgPT4ge1xuICAgICAgICAgICAgICBpZiAoKGxldmVsIDwgMyAmJiBzdHJva2UgIT0gXCJidXR0ZXJmbHlcIikgfHwgbGV2ZWwgPj0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCB3LWZ1bGwgZmxleC1yb3cgaXRlbXMtYmFzZWxpbmUgc3BhY2UteC0yIHB5LTFcIlxuICAgICAgICAgICAgICAgICAgICBrZXk9e3N0cm9rZX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICBpZD17c3Ryb2tlfVxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e3N0cm9rZX1cbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c3Ryb2tlfVxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHRyYW5zZm9ybTogXCJzY2FsZSgxLjIpXCIgfX1cbiAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtzdHJva2VzLmluY2x1ZGVzKHN0cm9rZSl9XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVN0cm9rZXN9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXtzdHJva2V9IGNsYXNzTmFtZT1cInRleHQtbGVmdCB3LWZ1bGxcIj5cbiAgICAgICAgICAgICAgICAgICAgICB7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cm9rZSl9XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBpdGVtcy1zdGFydCBzcGFjZS15LTQgdy1mdWxsIGJvcmRlci0yIGJvcmRlci1saWdodGVyLWdyZXkgYm9yZGVyLW9wYWNpdHktNDAgcHQtNCBwYi02IHB4LTRcIj5cbiAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC1sZWZ0IHctZnVsbCBcIj5NYXRlcmlhbHMgeW91IGFyZSB1c2luZzo8L2gzPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy10b2dnbGUgdy1mdWxsIGgtMTYgZ2FwLTEgXCI+XG4gICAgICAgICAgICB7bGlzdFRvTWFwLm1hdGVyaWFscy5tYXAoKG1hdGVyaWFsKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2ByZWxhdGl2ZSByb3VuZGVkLTN4bCAke1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHMuaW5jbHVkZXMobWF0ZXJpYWwpXG4gICAgICAgICAgICAgICAgICAgICAgPyBcImJnLWJsdWUtb2NlYW5cIlxuICAgICAgICAgICAgICAgICAgICAgIDogXCJiZy1saWdodC1ncmV5IGJnLW9wYWNpdHktMjBcIlxuICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICBrZXk9e21hdGVyaWFsfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICBpZD17bWF0ZXJpYWx9XG4gICAgICAgICAgICAgICAgICAgIG5hbWU9e21hdGVyaWFsfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bWF0ZXJpYWx9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm9wYWNpdHktMFwiXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e21hdGVyaWFscy5pbmNsdWRlcyhtYXRlcmlhbCl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVNYXRlcmlhbHN9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGFic29sdXRlIGZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXIgdGV4dC1zbSBpbnNldC0wIHRleHQtYmxhY2sgJHtcbiAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHMuaW5jbHVkZXMobWF0ZXJpYWwpID8gXCJ0ZXh0LXdoaXRlXCIgOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgICBodG1sRm9yPXttYXRlcmlhbH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2NhcGl0YWxpemVGaXJzdExldHRlcihtYXRlcmlhbCl9XG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtc3RhcnQgc3BhY2UteS01IHctZnVsbCBib3JkZXItMiBib3JkZXItbGlnaHRlci1ncmV5IGJvcmRlci1vcGFjaXR5LTQwIHB0LTQgcGItNiBweC00XCI+XG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGVmdCB3LWZ1bGxcIj5NdXNjbGVzIHRhcmdldGVkIChvcHRpb25hbCk8L2gzPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy10b2dnbGUgdy1mdWxsIGgtMTYgZ2FwLTEgXCI+XG4gICAgICAgICAgICB7bGlzdFRvTWFwLm11c2NsZXMubWFwKChtdXNjbGUpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHJlbGF0aXZlIHJvdW5kZWQtM3hsICR7XG4gICAgICAgICAgICAgICAgICAgIG11c2NsZXMuaW5jbHVkZXMobXVzY2xlKVxuICAgICAgICAgICAgICAgICAgICAgID8gXCJiZy1ibHVlLW9jZWFuXCJcbiAgICAgICAgICAgICAgICAgICAgICA6IFwiYmctbGlnaHQtZ3JleSBiZy1vcGFjaXR5LTIwXCJcbiAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAga2V5PXttdXNjbGV9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgIGlkPXttdXNjbGV9XG4gICAgICAgICAgICAgICAgICAgIG5hbWU9e211c2NsZX1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e211c2NsZX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwib3BhY2l0eS0wXCJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17bXVzY2xlcy5pbmNsdWRlcyhtdXNjbGUpfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlTXVzY2xlc31cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgICAgICAgaHRtbEZvcj17bXVzY2xlfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BhYnNvbHV0ZSBmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIHRleHQtc20gaW5zZXQtMCB0ZXh0LWJsYWNrICR7XG4gICAgICAgICAgICAgICAgICAgICAgbXVzY2xlcy5pbmNsdWRlcyhtdXNjbGUpID8gXCJ0ZXh0LXdoaXRlXCIgOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyKG11c2NsZSl9XG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICB2YWx1ZT1cIkdlbmVyYXRlIHlvdXIgd29ya291dFwiXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJzdWJtaXQtYnV0dG9uXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCIgYmctYmx1ZS1vY2VhbiB0ZXh0LWxnIHRleHQtd2hpdGUgcm91bmRlZC1tZCBweC0zIHB5LTMgdy1mdWxsXCJcbiAgICAgICAgICBzdHlsZT17eyBtYXJnaW5Ub3A6IFwiNDBweFwiIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Zvcm0+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtzaG93TWVzc2FnZSA/IFwiXCIgOiBcImhpZGRlblwifWB9PlxuICAgICAgICA8aDIgc3R5bGU9e3snYmFja2dyb3VuZENvbG9yJzogJyNGRkREREMnfX0+UGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgc3Ryb2tlPC9oMj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17YCR7ZGlzcGxheS5idXR0b25zID8gXCJcIiA6IFwiaGlkZGVuXCJ9IGB9XG4gICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9ucy13cmFwcGVyXCJcbiAgICAgID5cbiAgICAgICAgPGgxIGNsYXNzTmFtZT1cImZvbnQtYmViYXMgcHQtNCBwYi0xMCB0ZXh0LWxlZnQgcGwtNiB0ZXh0LTN4bFwiPlxuICAgICAgICAgIDx1Pk5PVCBDT05WSU5DRUQ/PC91PlxuICAgICAgICA8L2gxPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggcHgtNiAgZmxleC1jb2wgaXRlbXMtc3RhcnQganVzdGlmeS1jZW50ZXIgc3BhY2UteS0xNFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBzcGFjZS15LTZcIj5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtbGVmdFwiPlxuICAgICAgICAgICAgICBJZiB5b3Ugd2FudCwgeW91IGNhbiBnZW5lcmF0ZSBhIG5ldyB3b3Jrb3V0IGtlZXBpbmcgeW91clxuICAgICAgICAgICAgICBwcmVmZXJlbmNlc1xuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXtyZWdlbmVyYXRlV29ya291dH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmctYmx1ZS1vY2VhbiB0ZXh0LXdoaXRlICB0ZXh0LWxnIHJvdW5kZWQtbWQgcHgtMyBweS0zIHctZnVsbFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIEdlbmVyYXRlIHlvdXIgd29ya291dCBhZ2FpblxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHNwYWNlLXktNlwiPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1sZWZ0XCI+XG4gICAgICAgICAgICAgIE9yIG1heWJlIHlvdSBjb3VsZCB0cnkgYSBkaWZmZXJlbnQgd29ya291dCBzZWxlY3Rpbmcgb3RoZXIgb3B0aW9uc1xuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXtyZXNldE9wdGlvbnN9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJnLWdyZWVuLWhlcmIgdGV4dC13aGl0ZSAgdGV4dC1sZyByb3VuZGVkLW1kIHB4LTMgcHktMyB3LWZ1bGxcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBSZXNldCBPcHRpb25zXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IElucHV0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcblxuY29uc3QgV2FybXVwID0gKCkgPT4ge1xuICBjb25zdCB3YXJtdXAgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLndhcm11cCk7XG4gIGNvbnN0IHdhcm11cEVhY2ggPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNldHMud2FybXVwLmVhY2gpO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDQgY2xhc3NOYW1lPVwidGV4dC1sZWZ0IHBsLTZcIj5cbiAgICAgICAgPGI+V2FybSB1cDwvYj5cbiAgICAgIDwvaDQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgcHQtNCBzcGFjZS15LTJcIj5cbiAgICAgICAge3dhcm11cC5tYXAoKGV4LCBpKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gcHgtNiBcIiBrZXk9e2V4LmlkfT5cbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1lbmQgXCIgc3R5bGU9e3sgd2lkdGg6IFwiMjAlXCIgfX0+XG4gICAgICAgICAgICAgICAge3dhcm11cEVhY2hbaV19XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LWxlZnQgXCIgc3R5bGU9e3sgd2lkdGg6IFwiNzUlXCIgfX0+XG4gICAgICAgICAgICAgICAge2V4Lm5hbWV9XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgV2FybXVwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcblxuY29uc3QgVGVjaG5pcXVlID0gKCkgPT4ge1xuICBjb25zdCB0ZWNobmlxdWUgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnRlY2huaXF1ZSk7XG4gIGNvbnN0IHRlY2huaXF1ZVNldHMgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNldHMudGVjaG5pcXVlLnNldHMpO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDQgY2xhc3NOYW1lPVwidGV4dC1sZWZ0IHBsLTZcIj5cbiAgICAgICAgPGI+VGVjaG5pcXVlPC9iPlxuICAgICAgPC9oND5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBwdC00IHNwYWNlLXktMlwiPlxuICAgICAgICB7dGVjaG5pcXVlLm1hcCgoZXgsIGkpID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBweC02IFwiIGtleT17ZXguaWR9PlxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWVuZCBcIiBzdHlsZT17eyB3aWR0aDogXCIyMCVcIiB9fT5cbiAgICAgICAgICAgICAgICB7dGVjaG5pcXVlU2V0c1tpXX1cbiAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGVmdCBcIiBzdHlsZT17eyB3aWR0aDogXCI3NSVcIiB9fT5cbiAgICAgICAgICAgICAgICB7ZXgubmFtZX1cbiAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUZWNobmlxdWU7XG4iLCJpbXBvcnQgZm9ybWF0UGFjZSBmcm9tIFwiLi9mb3JtYXRQYWNlXCI7XG5cbmZ1bmN0aW9uIHJhbmRvbVZhbHVlKGFycikge1xuICByZXR1cm4gYXJyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFyci5sZW5ndGgpXTtcbn1cblxuZnVuY3Rpb24gY29uZGl0aW9uYWxGb3JtYXQodG9Gb3JtYXQpIHtcbiAgaWYgKHRvRm9ybWF0ID4gNTkpIHtcbiAgICByZXR1cm4gZm9ybWF0UGFjZSh0b0Zvcm1hdCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvRm9ybWF0ICsgXCJzXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2VsZWN0QXRUaW1pbmcocGFjZSwgbWV0ZXJzKSB7XG4gIGNvbnN0IGludGVydmFscyA9IHtcbiAgICA1MDogWzUsIDEwXSxcbiAgICAxMDA6IFs1LCAxMCwgMTUsIDIwXSxcbiAgICAyMDA6IFsxMCwgMTUsIDIwLCAyNSwgMzBdLFxuICB9O1xuICBmdW5jdGlvbiBnZW5lcmF0ZUJ5TWV0ZXJzKHBhY2UsIG1ldGVycykge1xuICAgIGxldCBhdFRpbWluZztcbiAgICBpZiAobWV0ZXJzID09IDUwKSB7XG4gICAgICBhdFRpbWluZyA9IHJvdW5kNShwYWNlLzIpO1xuICAgIH1cbiAgICBpZiAobWV0ZXJzID09IDEwMCkge1xuICAgICAgYXRUaW1pbmcgPSBwYWNlO1xuICAgIH1cbiAgICBpZiAobWV0ZXJzID09IDIwMCkge1xuICAgICAgYXRUaW1pbmcgPSBwYWNlICogMjtcbiAgICB9XG4gICAgbGV0IHRvQWRkID0gcmFuZG9tVmFsdWUoaW50ZXJ2YWxzW21ldGVyc10pO1xuICAgIC8vIHRoZXJlIHdhcyBhIGJ1ZyByZWxhdGVkIHRvIHR5cGVzIHNvIHdlIGFyZSBtYWtpbmcgc3VyZSBib3RoIGFyZSBudW1zIHdoZW4gYWRkaW5nIChhcHBhcmVudGx5IHBhY2UgaXMgc3RyaW5nKVxuICAgIGF0VGltaW5nID0gTnVtYmVyKGF0VGltaW5nKSArIE51bWJlcih0b0FkZCk7XG4gICAgLy8gY29uc29sZS5sb2coYXRUaW1pbmcsICdhdFRpbWluZycsIHBhY2UsIG1ldGVycywgaW50ZXJ2YWxzW21ldGVyc10sIHRvQWRkKVxuICAgIHJldHVybiBhdFRpbWluZztcbiAgfVxuICBsZXQgYXRUaW1pbmdHZW5lcmF0ZWQgPSBnZW5lcmF0ZUJ5TWV0ZXJzKHBhY2UsIG1ldGVycyk7XG4gIHJldHVybiBhdFRpbWluZ0dlbmVyYXRlZDtcbn1cblxuZnVuY3Rpb24gcm91bmQ1KHgpIHtcbiAgcmV0dXJuIE1hdGguY2VpbCh4IC8gNSkgKiA1O1xufVxuXG5mdW5jdGlvbiBzZWxlY3RPbkxlc3NUaW1pbmcocGFjZSwgbWV0ZXJzKSB7XG4gIGNvbnN0IGludGVydmFscyA9IHtcbiAgICA1MDogW1tyb3VuZDUocGFjZSAvIDIpLCBcIiByZXN0aW5nIDE1c1wiXV0sXG4gICAgMTAwOiBbXG4gICAgICBbcGFjZSwgXCIgcmVzdGluZyAxNXNcIl0sXG4gICAgICBbcGFjZSArIDUsIFwiIHJlc3RpbmcgMjBzXCJdLFxuICAgIF0sXG4gICAgMjAwOiBbXG4gICAgICBbcGFjZSAqIDIgKyAxMCwgXCIgcmVzdGluZyA0MHNcIl0sXG4gICAgICBbcGFjZSAqIDIgKyAxNSwgXCIgcmVzdGluZyAzMHNcIl0sXG4gICAgICBbcGFjZSAqIDIgKyAyMCwgXCIgcmVzdGluZyAyMHNcIl0sXG4gICAgXSxcbiAgfTtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVUaW1pbmdPbkxlc3NCeU1ldGVycyhtZXRlcnMpIHtcbiAgICBsZXQgb25UaW1pbmdBcnIgPSByYW5kb21WYWx1ZShpbnRlcnZhbHNbbWV0ZXJzXSk7XG4gICAgbGV0IG9uVGltaW5nID0gY29uZGl0aW9uYWxGb3JtYXQob25UaW1pbmdBcnJbMF0pICsgb25UaW1pbmdBcnJbMV07XG4gICAgLy8gY29uc29sZS5sb2cob25UaW1pbmdBcnIsIG9uVGltaW5nLCAnb250aW1pbmdvbmxlc3N0aGFuJylcbiAgICByZXR1cm4gb25UaW1pbmc7XG4gIH1cbiAgbGV0IG9uTGVzc1RpbWluZ0dlbmVyYXRlZCA9IGdlbmVyYXRlVGltaW5nT25MZXNzQnlNZXRlcnMobWV0ZXJzKTtcbiAgcmV0dXJuIG9uTGVzc1RpbWluZ0dlbmVyYXRlZDtcbn1cblxuZnVuY3Rpb24gc2VsZWN0UmVzdFRpbWluZyhtZXRlcnMpIHtcbiAgY29uc3QgaW50ZXJ2YWxzID0ge1xuICAgIDI1OiBbNSwgMTAsIDE1XSxcbiAgICA1MDogWzUsIDEwLCAxNV0sXG4gICAgMTAwOiBbNSwgMTAsIDE1LCAyMF0sXG4gICAgMTUwOiBbMTAsIDE1LCAyMF0sXG4gICAgMjAwOiBbMTAsIDE1LCAyMCwgMjVdLFxuICAgIDI1MDogWzE1LCAyMCwgMjUsIDMwXSxcbiAgICAzMDA6IFsyMCwgMjUsIDMwLCAzNV0sXG4gICAgNDAwOiBbMzAsIDM1LCA0MCwgNDVdLFxuICB9O1xuICBmdW5jdGlvbiBnZW5lcmF0ZVRpbWluZ1Jlc3RCeU1ldGVycyhtZXRlcnMpIHtcbiAgICBsZXQgcmVzdFRpbWluZyA9IHJhbmRvbVZhbHVlKGludGVydmFsc1ttZXRlcnNdKTtcbiAgICByZXR1cm4gcmVzdFRpbWluZztcbiAgfVxuICBsZXQgcmVzdFRpbWluZ0dlbmVyYXRlZCA9IGdlbmVyYXRlVGltaW5nUmVzdEJ5TWV0ZXJzKG1ldGVycyk7XG4gIHJldHVybiByZXN0VGltaW5nR2VuZXJhdGVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVRpbWVzKHBhY2UsIG1ldGVycywgc3R5bGUpIHtcbiAgaWYgKFxuICAgIHN0eWxlID09IFwiZnJlZXN0eWxlXCIgJiZcbiAgICAobWV0ZXJzID09IDUwIHx8IG1ldGVycyA9PSAxMDAgfHwgbWV0ZXJzID09IDIwMClcbiAgKSB7XG4gICAgLy8gZWl0aGVyIDUwLzEwMC8yMDAgZnJlZXN0eWxlXG4gICAgLy8gdHdvIHR5cGVzIG9mIHRpbWluZzogJ29uIGxlc3MgdGhhbiAxOjIwIHJlc3RpbmcgMjBzJyB8fCAnYXQgMTo0MCcgKDUwJSBwcm9iYWJpbGl0eSlcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkge1xuICAgICAgLy8gdGltaW5nIG9uIGxlc3MgdGhhblxuICAgICAgbGV0IHRpbWluZyA9IFwib24gbGVzcyB0aGFuIFwiICsgc2VsZWN0T25MZXNzVGltaW5nKE51bWJlcihwYWNlKSwgbWV0ZXJzKTtcbiAgICAgIHJldHVybiB0aW1pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRpbWluZyBhdFxuICAgICAgbGV0IHRpbWluZyA9IFwiYXQgXCIgKyBjb25kaXRpb25hbEZvcm1hdChzZWxlY3RBdFRpbWluZyhOdW1iZXIocGFjZSksIG1ldGVycykpO1xuXG4gICAgICAvLyBjb25zb2xlLmxvZygnZ2VuZXJhdGVkIHRpbWluZycsIHRpbWluZywgJ2JlZm9yZSBmb3JtYXR0aW5nOiAnLCBzZWxlY3RBdFRpbWluZyhwYWNlLCBtZXRlcnMpKTtcbiAgICAgIHJldHVybiB0aW1pbmc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGVpdGhlciBicmVhc3RzdHJva2UsIGJhY2tzdHJva2UsIGJ1dHRlcmZseSBvciBtZWRsZXkgb3IgMTUwbSBmcmVlc3R5bGUvMzAwZnJlZXN0eWxlLzQwMGZyZWVzdHlsZS4uLlxuICAgIC8vIG9ubHkgb25lIHR5cGUgb2YgdGltaW5nOiAncmVzdGluZyAxMHMnXG4gICAgbGV0IHRpbWluZyA9IFwicmVzdGluZyBcIiArIHNlbGVjdFJlc3RUaW1pbmcobWV0ZXJzKSArIFwic1wiO1xuICAgIHJldHVybiB0aW1pbmc7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgZ2VuZXJhdGVUaW1lcyBmcm9tIFwiLi4vLi4vLi4vZnVuY3Rpb25zL2dlbmVyYXRlVGltZXNcIjtcblxuY29uc3QgTWFpbiA9ICgpID0+IHtcbiAgY29uc3QgbWFpbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUubWFpbik7XG4gIC8vIGNvbnN0IG1haW5Ub3RhbCA9IHVzZVNlbGVjdG9yKChzdGF0ZSk9PiBzdGF0ZS5zZXRzLm1haW4udG90YWwpO1xuICAvLyBjb25zdCBtYWluRWFjaCA9IHVzZVNlbGVjdG9yKChzdGF0ZSk9PiBzdGF0ZS5zZXRzLm1haW4uZWFjaCk7XG4gIGNvbnN0IG1haW5TZXRzID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5zZXRzLm1haW4uc2V0cyk7XG4gIGNvbnN0IHBhY2UgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnBhY2UpO1xuXG4gIGxldCBlYWNoU2V0TWV0ZXJzTGlzdCA9IHsgMTogW10sIDI6IFtdIH07XG4gIC8vIGNvbnNvbGUubG9nKG1haW5FYWNoKVxuICAvLyBjb25zb2xlLmxvZyhtYWluVG90YWwpXG4gIC8vIGNvbnNvbGUubG9nKG1haW5TZXRzKVxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDQgY2xhc3NOYW1lPVwidGV4dC1sZWZ0IHBsLTZcIj5cbiAgICAgICAgPGI+TWFpbiBCbG9jazwvYj5cbiAgICAgIDwvaDQ+XG4gICAgICB7LyogPGgyPnttYWluVG90YWx9PC9oMj5cbiAgICAgIDxoMyBjbGFzc05hbWU9J2ZsZXgganVzdGlmeS1jZW50ZXIgc3BhY2UteC0yIHctZnVsbCBiZy1ibHVlLW9jZWFuJz57bWFpbkVhY2gubWFwKChlbCwgaSk9PntyZXR1cm4oXG4gICAgICAgIDxzcGFuIGtleT17aX0+e1N0cmluZyhlbCl9PC9zcGFuPlxuICAgICAgKX0pfTwvaDM+ICovfVxuICAgICAge21haW5TZXRzLmV2ZXJ5KChlbCkgPT4gdHlwZW9mIGVsID09IFwic3RyaW5nXCIpID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgcHQtNCBzcGFjZS15LTJcIj5cbiAgICAgICAgICB7bWFpbi5tYXAoKGV4LCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1iZXR3ZWVuIHB4LTYgXCIga2V5PXtleC5pZH0+XG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1lbmQgXCIgc3R5bGU9e3sgd2lkdGg6IFwiMjAlXCIgfX0+XG4gICAgICAgICAgICAgICAgICB7bWFpblNldHNbaV19XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC1sZWZ0IFwiIHN0eWxlPXt7IHdpZHRoOiBcIjc1JVwiIH19PlxuICAgICAgICAgICAgICAgICAge2V4Lm5hbWV9e1wiIFwifVxuICAgICAgICAgICAgICAgICAge2dlbmVyYXRlVGltZXMoXG4gICAgICAgICAgICAgICAgICAgIHBhY2UsXG4gICAgICAgICAgICAgICAgICAgIE51bWJlcihtYWluU2V0c1tpXS5zcGxpdChcInhcIilbMV0pLFxuICAgICAgICAgICAgICAgICAgICBleC5zdHJva2VcbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICkgOiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBzcGFjZS15LTNcIj5cbiAgICAgICAgICB7bWFpblNldHMubWFwKChibG9ja1NldCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IHctZnVsbCBwdC00IHB4LTYganVzdGlmeS1iZXR3ZWVuXCJcbiAgICAgICAgICAgICAgICBrZXk9e2Ake2Jsb2NrU2V0fS0ke2luZGV4fWB9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggc3BhY2UteC0xIHB0LTFcIiBzdHlsZT17eyB3aWR0aDogXCIyMCVcIiB9fT5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAge2Jsb2NrU2V0LnNldHN9XG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgtZnVsbCB3LTAuNSBiZy1ibGFja1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLWZ1bGwgdy1mdWxsIGZsZXggZmxleC1jb2wgc3BhY2UteS0xMiBcIj5cbiAgICAgICAgICAgICAgICAgICAge2Jsb2NrU2V0LmVhY2hTZXQubWFwKChzaW5nbGVTZXQsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBlYWNoU2V0TWV0ZXJzTGlzdFtpbmRleCArIDFdLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGVTZXQuc3BsaXQoXCJ4XCIpWzFdXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGtleT17c2luZ2xlU2V0ICsgaX0gY2xhc3NOYW1lPVwidy1mdWxsIHRleHQtc21cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAge3NpbmdsZVNldH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHNwYWNlLXktMlwiXG4gICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogXCI3NSVcIiB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtlYWNoU2V0TWV0ZXJzTGlzdFtpbmRleCArIDFdLm1hcCgodmFsLCBpbmRleDIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBjb25zb2xlLmxvZyhtYWluLCAnbWFpbicpXG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaW5kZXgyLCAnaW5kZXgyJylcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtYWluW2luZGV4Ml0sICdtYWluW2luZGV4Ml0nKSAqL1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGVmdFwiIGtleT17bWFpbltpbmRleDJdLmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAge21haW5baW5kZXgyXS5uYW1lfXtcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAge2dlbmVyYXRlVGltZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdW1iZXIoZWFjaFNldE1ldGVyc0xpc3RbaW5kZXggKyAxXVtpbmRleDJdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluW2luZGV4Ml0uc3Ryb2tlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGVmdFwiIGtleT17bWFpbltpbmRleDIgKyAyXS5pZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHttYWluW2luZGV4MiArIDJdLm5hbWV9e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2VuZXJhdGVUaW1lcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcihlYWNoU2V0TWV0ZXJzTGlzdFtpbmRleCArIDFdW2luZGV4Ml0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5baW5kZXgyICsgMl0uc3Ryb2tlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgey8qIHttYWluLm1hcCgoZXgsIGkpPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZWFjaFNldE1ldGVyc0xpc3RbaV0sICduZXh0IHZhbHVlJylcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9J3RleHQtbGVmdCcga2V5PXtleC5pZH0+XG4gICAgICAgICAgICAgICAgICAgICAge2V4Lm5hbWV9IHtnZW5lcmF0ZVRpbWVzKHBhY2UsIE51bWJlcihlYWNoU2V0TWV0ZXJzTGlzdFtpXSksIGV4LnN0cm9rZSl9XG4gICAgICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSl9ICovfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1haW47XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuXG5jb25zdCBDb29sZG93biA9ICgpID0+IHtcbiAgY29uc3QgY29vbGRvd24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmNvb2xkb3duKTtcbiAgY29uc3QgY29vbGRvd25FYWNoID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5zZXRzLmNvb2xkb3duLmVhY2gpO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDQgY2xhc3NOYW1lPVwidGV4dC1sZWZ0IHBsLTZcIj5cbiAgICAgICAgPGI+Q29vbCBkb3duPC9iPlxuICAgICAgPC9oND5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBwdC00IHNwYWNlLXktMlwiPlxuICAgICAgICB7Y29vbGRvd24ubWFwKChleCwgaSkgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1iZXR3ZWVuIHB4LTYgXCIga2V5PXtleC5pZH0+XG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktZW5kIFwiIHN0eWxlPXt7IHdpZHRoOiBcIjIwJVwiIH19PlxuICAgICAgICAgICAgICAgIHtjb29sZG93bkVhY2hbaV19XG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LWxlZnRcIiBzdHlsZT17eyB3aWR0aDogXCI3NSVcIiB9fT5cbiAgICAgICAgICAgICAgICB7ZXgubmFtZX1cbiAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb29sZG93bjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBXYXJtdXAgZnJvbSBcIi4vY29tcG9uZW50cy9XYXJtdXBcIjtcbmltcG9ydCBUZWNobmlxdWUgZnJvbSBcIi4vY29tcG9uZW50cy9UZWNobmlxdWVcIjtcbmltcG9ydCBNYWluIGZyb20gXCIuL2NvbXBvbmVudHMvTWFpblwiO1xuaW1wb3J0IENvb2xkb3duIGZyb20gXCIuL2NvbXBvbmVudHMvQ29vbGRvd25cIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5cbmNvbnN0IFRyYWluaW5nID0gKCkgPT4ge1xuICBjb25zdCBkaXNwbGF5ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5kaXNwbGF5KTtcbiAgY29uc3QgdG90YWwgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgc3RhdGUuc2V0cy53YXJtdXAudG90YWwgK1xuICAgICAgc3RhdGUuc2V0cy50ZWNobmlxdWUudG90YWwgK1xuICAgICAgc3RhdGUuc2V0cy5tYWluLnRvdGFsICtcbiAgICAgIHN0YXRlLnNldHMuY29vbGRvd24udG90YWxcbiAgICApO1xuICB9KTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2AgbWItMTYgJHtkaXNwbGF5LnRyYWluaW5nID8gXCJcIiA6IFwiaGlkZGVuXCJ9YH1cbiAgICAgIGRhdGEtdGVzdGlkPVwidHJhaW5pbmdcIlxuICAgICAgaWQ9XCJ0cmFpbmluZ1wiXG4gICAgPlxuICAgICAgPGhyIGNsYXNzTmFtZT1cImgtMSB0ZXh0LWRhcmstZ3JleSBiZy1kYXJrLWdyZXlcIj48L2hyPlxuICAgICAgPGgxIGNsYXNzTmFtZT1cImZvbnQtYmViYXMgcHQtMTIgcGItMTAgdGV4dC1sZWZ0IHBsLTYgdGV4dC0zeGxcIj5cbiAgICAgICAgPHU+U1dJTSBXT1JLT1VUPC91PlxuICAgICAgPC9oMT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBzcGFjZS15LTEyIHBiLTZcIj5cbiAgICAgICAgPFdhcm11cCAvPlxuICAgICAgICA8VGVjaG5pcXVlIC8+XG4gICAgICAgIDxNYWluIC8+XG4gICAgICAgIDxDb29sZG93biAvPlxuICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC1sZWZ0IHRleHQtbGcgcGwtNiBwdC02XCI+XG4gICAgICAgICAgPGI+VG90YWw6Jm5ic3A7Jm5ic3A7e3RvdGFsfSBtPC9iPlxuICAgICAgICA8L2gyPlxuICAgICAgPC9kaXY+XG4gICAgICA8aHIgY2xhc3NOYW1lPVwiaC0xIG10LTE2IHRleHQtZGFyay1ncmV5IGJnLWRhcmstZ3JleVwiPjwvaHI+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUcmFpbmluZztcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBJbnB1dCBmcm9tIFwiLi9JbnB1dC9JbnB1dFwiO1xuaW1wb3J0IFRyYWluaW5nIGZyb20gXCIuL1RyYWluaW5nL1RyYWluaW5nXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuXG5jb25zdCBXcmFwcGVyID0gKCkgPT4ge1xuICBjb25zdCBkaXNwbGF5ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5kaXNwbGF5KTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGlkPVwic2Nyb2xsLXJlZlwiPlxuICAgICAge2Rpc3BsYXkuZm9ybSA/IChcbiAgICAgICAgPD5cbiAgICAgICAgICA8SW5wdXQgLz5cbiAgICAgICAgICA8VHJhaW5pbmcgLz5cbiAgICAgICAgPC8+XG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIDxUcmFpbmluZyAvPlxuICAgICAgICAgIDxJbnB1dCAvPlxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBXcmFwcGVyO1xuIiwiaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xuaW1wb3J0IGV4ZXJjaXNlc1JlZHVjZXIgZnJvbSBcIi4vc2xpY2VzL2V4ZXJjaXNlc1NsaWNlXCI7XG5pbXBvcnQgd2FybXVwUmVkdWNlciBmcm9tIFwiLi9zbGljZXMvd2FybXVwU2xpY2VcIjtcbmltcG9ydCBtYWluUmVkdWNlciBmcm9tIFwiLi9zbGljZXMvbWFpblNsaWNlXCI7XG5pbXBvcnQgdGVjaG5pcXVlUmVkdWNlciBmcm9tIFwiLi9zbGljZXMvdGVjaG5pcXVlU2xpY2VcIjtcbmltcG9ydCBjb29sZG93blJlZHVjZXIgZnJvbSBcIi4vc2xpY2VzL2Nvb2xkb3duU2xpY2VcIjtcbmltcG9ydCBkaXNwbGF5UmVkdWNlciBmcm9tIFwiLi9zbGljZXMvZGlzcGxheVNsaWNlXCI7XG5pbXBvcnQgc2V0c1JlZHVjZXIgZnJvbSBcIi4vc2xpY2VzL3NldHNTbGljZVwiO1xuaW1wb3J0IHBhY2VSZWR1Y2VyIGZyb20gXCIuL3NsaWNlcy9wYWNlU2xpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlndXJlU3RvcmUoe1xuICByZWR1Y2VyOiB7XG4gICAgZXhlcmNpc2VzOiBleGVyY2lzZXNSZWR1Y2VyLFxuICAgIHdhcm11cDogd2FybXVwUmVkdWNlcixcbiAgICBtYWluOiBtYWluUmVkdWNlcixcbiAgICB0ZWNobmlxdWU6IHRlY2huaXF1ZVJlZHVjZXIsXG4gICAgY29vbGRvd246IGNvb2xkb3duUmVkdWNlcixcbiAgICBkaXNwbGF5OiBkaXNwbGF5UmVkdWNlcixcbiAgICBzZXRzOiBzZXRzUmVkdWNlcixcbiAgICBwYWNlOiBwYWNlUmVkdWNlcixcbiAgfSxcbn0pO1xuIiwiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBXcmFwcGVyIGZyb20gXCIuL1dyYXBwZXJcIjtcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgc3RvcmUgZnJvbSBcIi4uL3N0b3JlXCI7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgLy8gZ2VuZXJhdGVkIHdpbGwgYmUgYSBzdGF0ZS5nZW5lcmF0ZSB2YWx1ZSBpbiBTdG9yZSwgbm90IGEgSG9va1xuICAvLyBjb25zdCBbZ2VuZXJhdGVkXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpPT57c2V0TG9hZGluZyhmYWxzZSl9LCAxMDAwKTtcbiAgfSwgW10pXG4gIHJldHVybiAobG9hZGluZyA/IChudWxsKSA6IChcbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC0wIG0tMCB3LWZ1bGwgdGV4dC1jZW50ZXIgXCI+XG4gICAgICAgIDxoZWFkZXI+XG4gICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImZvbnQtYmViYXMgdGV4dC1sZWZ0IHB4LTYgdGV4dC0zeGwgaC0yMCBmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyXCI+XG4gICAgICAgICAgICBTV0lNTUlORyBXT1JLT1VUIEdFTkVSQVRPUlxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGhyIGNsYXNzTmFtZT1cImgtMSB0ZXh0LWRhcmstZ3JleSBiZy1kYXJrLWdyZXlcIj48L2hyPlxuICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC02IG1iLTEwIGZsZXgtY29sIGZsZXggZ2FwLTRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB5LTQgZmxleCBmbGV4LWNvbCBnYXAtNSB0ZXh0LWxlZnQgcHgtNlwiPlxuICAgICAgICAgICAgPHA+V2VsY29tZSB0byBteSBzd2ltIGFwcCE8L3A+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgTXkgbmFtZSBpcyBNYXJpbywgSSYjMzk7bSBhIHN3aW1tZXIgYW5kIEkgaGF2ZSBjcmVhdGVkIHRoaXN7XCIgXCJ9XG4gICAgICAgICAgICAgIDxiPmFwcCB0aGF0IGdlbmVyYXRlcyBzd2ltbWluZyB3b3Jrb3V0czwvYj4gZm9yIHlvdS5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB5LTQgZmxleCBmbGV4LWNvbCBnYXAtNyAgdGV4dC1sZWZ0IHB4LTZcIj5cbiAgICAgICAgICAgIDxoMz5cbiAgICAgICAgICAgICAgPHU+SG93IGRvZXMgaXQgd29yaz88L3U+XG4gICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgPG9sIGNsYXNzTmFtZT1cImxpc3QtZGVjaW1hbCBsaXN0LWluc2lkZSBmbGV4IGZsZXgtY29sIGdhcC01XCI+XG4gICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8Yj5GaWxsIHRoZSBmb3JtIHdpdGggeW91ciB0cmFpbmluZyBvcHRpb25zPC9iPiAoZGlzdGFuY2UsIHBhY2UsXG4gICAgICAgICAgICAgICAgZXF1aXBtZW50Li4uKS5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxiPkRyaWxscyBhcmUgc2VsZWN0ZWQ8L2I+IGJhc2VkIG9uIHlvdXIgb3B0aW9ucy57XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGI+U3dpbW1pbmcgc2V0cyBhcmUgZ2VuZXJhdGVkPC9iPiBmb3IgZWFjaCBibG9jay5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxiPllvdSBoYXZlIHlvdXIgY3VzdG9tIHdvcmtvdXQhPC9iPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxXcmFwcGVyIC8+XG5cbiAgICAgICAgPGZvb3Rlcj5cbiAgICAgICAgICA8aHIgY2xhc3NOYW1lPVwiaC0xIHRleHQtZGFyay1ncmV5IGJnLWRhcmstZ3JleVwiPjwvaHI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IHctZnVsbCBoLTMyIGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cImZvbnQtcGxheSB3LTYvMTIgdGV4dC1sZWZ0IHB4LTZcIj5cbiAgICAgICAgICAgICAgPHU+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vbWFzYW5wb2Mvc3dpbW1pbmdcIlxuICAgICAgICAgICAgICAgICAgcmVsPVwibm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIEdpdGh1YiByZXBvXG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L3U+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciB3LTYvMTIganVzdGlmeS1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cImZvbnQtcGxheSBcIj5Db250YWN0OjwvaDI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBnYXAtMVwiPlxuICAgICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiBcIjMwcHhcIiwgaGVpZ2h0OiBcIjMwcHhcIiB9fVxuICAgICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cIm1haWx0bzptYXJpb3NjcDE5OThAb3V0bG9vay5lc1wiXG4gICAgICAgICAgICAgICAgICAgIHJlbD1cIm5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAgICAgICAgICAgICAgIGQ9XCJNMTMgMTdIMTdWMTRMMjIgMTguNUwxNyAyM1YyMEgxM1YxN00yMCA0SDRBMiAyIDAgMCAwIDIgNlYxOEEyIDIgMCAwIDAgNCAyMEgxMS4zNUE1LjggNS44IDAgMCAxIDExIDE4QTYgNiAwIDAgMSAyMiAxNC42OVY2QTIgMiAwIDAgMCAyMCA0TTIwIDhMMTIgMTNMNCA4VjZMMTIgMTFMMjAgNlpcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiBcIjMwcHhcIiwgaGVpZ2h0OiBcIjMwcHhcIiB9fVxuICAgICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9tYXJpby1jaXJlci9cIlxuICAgICAgICAgICAgICAgICAgICByZWw9XCJub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICAgICAgICAgICAgICBkPVwiTTE5IDNBMiAyIDAgMCAxIDIxIDVWMTlBMiAyIDAgMCAxIDE5IDIxSDVBMiAyIDAgMCAxIDMgMTlWNUEyIDIgMCAwIDEgNSAzSDE5TTE4LjUgMTguNVYxMy4yQTMuMjYgMy4yNiAwIDAgMCAxNS4yNCA5Ljk0QzE0LjM5IDkuOTQgMTMuNCAxMC40NiAxMi45MiAxMS4yNFYxMC4xM0gxMC4xM1YxOC41SDEyLjkyVjEzLjU3QzEyLjkyIDEyLjggMTMuNTQgMTIuMTcgMTQuMzEgMTIuMTdBMS40IDEuNCAwIDAgMSAxNS43MSAxMy41N1YxOC41SDE4LjVNNi44OCA4LjU2QTEuNjggMS42OCAwIDAgMCA4LjU2IDYuODhDOC41NiA1Ljk1IDcuODEgNS4xOSA2Ljg4IDUuMTlBMS42OSAxLjY5IDAgMCAwIDUuMTkgNi44OEM1LjE5IDcuODEgNS45NSA4LjU2IDYuODggOC41Nk04LjI3IDE4LjVWMTAuMTNINS41VjE4LjVIOC4yN1pcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvb3Rlcj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUHJvdmlkZXI+XG4gICkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCBBcHAgZnJvbSBcIi4vY29tcG9uZW50cy9BcHBcIjtcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5cbi8vIE9wdC1pbiB0byBXZWJwYWNrIGhvdCBtb2R1bGUgcmVwbGFjZW1lbnRcbmlmIChtb2R1bGUuaG90KSBtb2R1bGUuaG90LmFjY2VwdCgpO1xuXG5SZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBcIikpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qXG4gIGVzbGludC1kaXNhYmxlXG4gIG5vLWNvbnNvbGUsXG4gIGZ1bmMtbmFtZXNcbiovXG52YXIgbm9ybWFsaXplVXJsID0gcmVxdWlyZSgnLi9ub3JtYWxpemUtdXJsJyk7XG5cbnZhciBzcmNCeU1vZHVsZUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBub0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJztcbnZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCB0aW1lKSB7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcblxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uQ2FsbCwgdGltZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKSB7XG4gIHZhciBzcmMgPSBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXTtcblxuICBpZiAoIXNyYykge1xuICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgICBzcmMgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgICB2YXIgbGFzdFNjcmlwdFRhZyA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKGxhc3RTY3JpcHRUYWcpIHtcbiAgICAgICAgc3JjID0gbGFzdFNjcmlwdFRhZy5zcmM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3JjQnlNb2R1bGVJZFttb2R1bGVJZF0gPSBzcmM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZpbGVNYXApIHtcbiAgICBpZiAoIXNyYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNwbGl0UmVzdWx0ID0gc3JjLnNwbGl0KC8oW15cXFxcL10rKVxcLmpzJC8pO1xuICAgIHZhciBmaWxlbmFtZSA9IHNwbGl0UmVzdWx0ICYmIHNwbGl0UmVzdWx0WzFdO1xuXG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlTWFwKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKCcuanMnLCAnLmNzcycpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZU1hcC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAobWFwUnVsZSkge1xuICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoZmlsZW5hbWUsIFwiXFxcXC5qcyRcIiksICdnJyk7XG4gICAgICByZXR1cm4gbm9ybWFsaXplVXJsKHNyYy5yZXBsYWNlKHJlZywgXCJcIi5jb25jYXQobWFwUnVsZS5yZXBsYWNlKC97ZmlsZU5hbWV9L2csIGZpbGVuYW1lKSwgXCIuY3NzXCIpKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNzcyhlbCwgdXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuXG4gICAgdXJsID0gZWwuaHJlZi5zcGxpdCgnPycpWzBdO1xuICB9XG5cbiAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbC5pc0xvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAvLyBXZSBzZWVtIHRvIGJlIGFib3V0IHRvIHJlcGxhY2UgYSBjc3MgbGluayB0aGF0IGhhc24ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNoYW5naW5nIHRoZSBzYW1lIGZpbGUgbW9yZSB0aGFuIG9uY2UuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF1cmwgfHwgISh1cmwuaW5kZXhPZignLmNzcycpID4gLTEpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgZWwudmlzaXRlZCA9IHRydWU7XG4gIHZhciBuZXdFbCA9IGVsLmNsb25lTm9kZSgpO1xuICBuZXdFbC5pc0xvYWRlZCA9IGZhbHNlO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmhyZWYgPSBcIlwiLmNvbmNhdCh1cmwsIFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7XG5cbiAgaWYgKGVsLm5leHRTaWJsaW5nKSB7XG4gICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGVsLm5leHRTaWJsaW5nKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld0VsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSZWxvYWRVcmwoaHJlZiwgc3JjKSB7XG4gIHZhciByZXQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG4gIGhyZWYgPSBub3JtYWxpemVVcmwoaHJlZiwge1xuICAgIHN0cmlwV1dXOiBmYWxzZVxuICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuXG4gIHNyYy5zb21lKGZ1bmN0aW9uICh1cmwpIHtcbiAgICBpZiAoaHJlZi5pbmRleE9mKHNyYykgPiAtMSkge1xuICAgICAgcmV0ID0gdXJsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZFN0eWxlKHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKTtcbiAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB1cmwgPSBnZXRSZWxvYWRVcmwoZWwuaHJlZiwgc3JjKTtcblxuICAgIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh1cmwpIHtcbiAgICAgIHVwZGF0ZUNzcyhlbCwgdXJsKTtcbiAgICAgIGxvYWRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxvYWRlZDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkQWxsKCkge1xuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVDc3MoZWwpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KHVybCkge1xuICAvLyBBbiBVUkwgaXMgbm90IGFuIHJlcXVlc3QgaWZcbiAgLy8gSXQgaXMgbm90IGh0dHAgb3IgaHR0cHNcbiAgaWYgKCEvXmh0dHBzPzovaS50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG5vRG9jdW1lbnQpIHtcbiAgICBjb25zb2xlLmxvZygnbm8gd2luZG93LmRvY3VtZW50IGZvdW5kLCB3aWxsIG5vdCBITVIgQ1NTJyk7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH1cblxuICB2YXIgZ2V0U2NyaXB0U3JjID0gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzcmMgPSBnZXRTY3JpcHRTcmMob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgdmFyIHJlbG9hZGVkID0gcmVsb2FkU3R5bGUoc3JjKTtcblxuICAgIGlmIChvcHRpb25zLmxvY2Fscykge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzcycpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHJlbG9hZGVkKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gY3NzIHJlbG9hZCAlcycsIHNyYy5qb2luKCcgJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWJvdW5jZSh1cGRhdGUsIDUwKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5mdW5jdGlvbiBub3JtYWxpemVVcmwocGF0aENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHBhdGhDb21wb25lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGl0ZW0pIHtcbiAgICBzd2l0Y2ggKGl0ZW0pIHtcbiAgICAgIGNhc2UgJy4uJzpcbiAgICAgICAgYWNjdW11bGF0b3IucG9wKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICcuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCBbXSkuam9pbignLycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmxTdHJpbmcpIHtcbiAgdXJsU3RyaW5nID0gdXJsU3RyaW5nLnRyaW0oKTtcblxuICBpZiAoL15kYXRhOi9pLnRlc3QodXJsU3RyaW5nKSkge1xuICAgIHJldHVybiB1cmxTdHJpbmc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB1cmxTdHJpbmcuaW5kZXhPZignLy8nKSAhPT0gLTEgPyB1cmxTdHJpbmcuc3BsaXQoJy8vJylbMF0gKyAnLy8nIDogJyc7XG4gIHZhciBjb21wb25lbnRzID0gdXJsU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChwcm90b2NvbCwgJ2knKSwgJycpLnNwbGl0KCcvJyk7XG4gIHZhciBob3N0ID0gY29tcG9uZW50c1swXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLCAnJyk7XG4gIGNvbXBvbmVudHNbMF0gPSAnJztcbiAgdmFyIHBhdGggPSBub3JtYWxpemVVcmwoY29tcG9uZW50cyk7XG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRoO1xufTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNjI5MTAxMTg5MzE2XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIkM6L1VzZXJzL01hcmlvL0Rlc2t0b3Avc3dpbW1pbmcvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIHYxID0gcmVxdWlyZSgnLi92MScpO1xudmFyIHY0ID0gcmVxdWlyZSgnLi92NCcpO1xuXG52YXIgdXVpZCA9IHY0O1xudXVpZC52MSA9IHYxO1xudXVpZC52NCA9IHY0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHV1aWQ7XG4iLCIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgLy8gam9pbiB1c2VkIHRvIGZpeCBtZW1vcnkgaXNzdWUgY2F1c2VkIGJ5IGNvbmNhdGVuYXRpb246IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMxNzUjYzRcbiAgcmV0dXJuIChbXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV1cbiAgXSkuam9pbignJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnl0ZXNUb1V1aWQ7XG4iLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiAgSW4gdGhlXG4vLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpXG4vLyBhbmQgaW5jb25zaXN0ZW50IHN1cHBvcnQgZm9yIHRoZSBgY3J5cHRvYCBBUEkuICBXZSBkbyB0aGUgYmVzdCB3ZSBjYW4gdmlhXG4vLyBmZWF0dXJlLWRldGVjdGlvblxuXG4vLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG9cbi8vIGltcGxlbWVudGF0aW9uLiBBbHNvLCBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gb24gSUUxMS5cbnZhciBnZXRSYW5kb21WYWx1ZXMgPSAodHlwZW9mKGNyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mKG1zQ3J5cHRvKSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKSk7XG5cbmlmIChnZXRSYW5kb21WYWx1ZXMpIHtcbiAgLy8gV0hBVFdHIGNyeXB0byBSTkcgLSBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvQ3J5cHRvXG4gIHZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkge1xuICAgIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG4gICAgcmV0dXJuIHJuZHM4O1xuICB9O1xufSBlbHNlIHtcbiAgLy8gTWF0aC5yYW5kb20oKS1iYXNlZCAoUk5HKVxuICAvL1xuICAvLyBJZiBhbGwgZWxzZSBmYWlscywgdXNlIE1hdGgucmFuZG9tKCkuICBJdCdzIGZhc3QsIGJ1dCBpcyBvZiB1bnNwZWNpZmllZFxuICAvLyBxdWFsaXR5LlxuICB2YXIgcm5kcyA9IG5ldyBBcnJheSgxNik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRoUk5HKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykge1xuICAgICAgaWYgKChpICYgMHgwMykgPT09IDApIHIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDA7XG4gICAgICBybmRzW2ldID0gciA+Pj4gKChpICYgMHgwMykgPDwgMykgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiBybmRzO1xuICB9O1xufVxuIiwidmFyIHJuZyA9IHJlcXVpcmUoJy4vbGliL3JuZycpO1xudmFyIGJ5dGVzVG9VdWlkID0gcmVxdWlyZSgnLi9saWIvYnl0ZXNUb1V1aWQnKTtcblxuLy8gKipgdjEoKWAgLSBHZW5lcmF0ZSB0aW1lLWJhc2VkIFVVSUQqKlxuLy9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9MaW9zSy9VVUlELmpzXG4vLyBhbmQgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3V1aWQuaHRtbFxuXG52YXIgX25vZGVJZDtcbnZhciBfY2xvY2tzZXE7XG5cbi8vIFByZXZpb3VzIHV1aWQgY3JlYXRpb24gdGltZVxudmFyIF9sYXN0TVNlY3MgPSAwO1xudmFyIF9sYXN0TlNlY3MgPSAwO1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkIGZvciBBUEkgZGV0YWlsc1xuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIHZhciBiID0gYnVmIHx8IFtdO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxO1xuXG4gIC8vIG5vZGUgYW5kIGNsb2Nrc2VxIG5lZWQgdG8gYmUgaW5pdGlhbGl6ZWQgdG8gcmFuZG9tIHZhbHVlcyBpZiB0aGV5J3JlIG5vdFxuICAvLyBzcGVjaWZpZWQuICBXZSBkbyB0aGlzIGxhemlseSB0byBtaW5pbWl6ZSBpc3N1ZXMgcmVsYXRlZCB0byBpbnN1ZmZpY2llbnRcbiAgLy8gc3lzdGVtIGVudHJvcHkuICBTZWUgIzE4OVxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICB2YXIgc2VlZEJ5dGVzID0gcm5nKCk7XG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuNSwgY3JlYXRlIGFuZCA0OC1iaXQgbm9kZSBpZCwgKDQ3IHJhbmRvbSBiaXRzICsgbXVsdGljYXN0IGJpdCA9IDEpXG4gICAgICBub2RlID0gX25vZGVJZCA9IFtcbiAgICAgICAgc2VlZEJ5dGVzWzBdIHwgMHgwMSxcbiAgICAgICAgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1cbiAgICAgIF07XG4gICAgfVxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsXG4gIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvXG4gIC8vIHRpbWUgaXMgaGFuZGxlZCBpbnRlcm5hbGx5IGFzICdtc2VjcycgKGludGVnZXIgbWlsbGlzZWNvbmRzKSBhbmQgJ25zZWNzJ1xuICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2NoLCAxOTcwLTAxLTAxIDAwOjAwLlxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuICB2YXIgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7XG5cbiAgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuICB2YXIgZHQgPSAobXNlY3MgLSBfbGFzdE1TZWNzKSArIChuc2VjcyAtIF9sYXN0TlNlY3MpLzEwMDAwO1xuXG4gIC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfVxuXG4gIC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcbiAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBuc2VjcyA9IDA7XG4gIH1cblxuICAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXVpZC52MSgpOiBDYW5cXCd0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlYycpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxO1xuXG4gIC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaFxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDtcblxuICAvLyBgdGltZV9sb3dgXG4gIHZhciB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfbWlkYFxuICB2YXIgdG1oID0gKG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCkgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjtcblxuICAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwO1xuXG4gIC8vIGBjbG9ja19zZXFfbG93YFxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7XG5cbiAgLy8gYG5vZGVgXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZiA/IGJ1ZiA6IGJ5dGVzVG9VdWlkKGIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHYxO1xuIiwidmFyIHJuZyA9IHJlcXVpcmUoJy4vbGliL3JuZycpO1xudmFyIGJ5dGVzVG9VdWlkID0gcmVxdWlyZSgnLi9saWIvYnl0ZXNUb1V1aWQnKTtcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG5cbiAgaWYgKHR5cGVvZihvcHRpb25zKSA9PSAnc3RyaW5nJykge1xuICAgIGJ1ZiA9IG9wdGlvbnMgPT09ICdiaW5hcnknID8gbmV3IEFycmF5KDE2KSA6IG51bGw7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7ICsraWkpIHtcbiAgICAgIGJ1ZltpICsgaWldID0gcm5kc1tpaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBieXRlc1RvVXVpZChybmRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2NDtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoY2FjaGVkTW9kdWxlLmVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGNhY2hlZE1vZHVsZS5lcnJvcjtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dHJ5IHtcblx0XHR2YXIgZXhlY09wdGlvbnMgPSB7IGlkOiBtb2R1bGVJZCwgbW9kdWxlOiBtb2R1bGUsIGZhY3Rvcnk6IF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLCByZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fIH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdFx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRcdGV4ZWNPcHRpb25zLmZhY3RvcnkuY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgZXhlY09wdGlvbnMucmVxdWlyZSk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdG1vZHVsZS5lcnJvciA9IGU7XG5cdFx0dGhyb3cgZTtcblx0fVxuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGV4ZWN1dGlvbiBpbnRlcmNlcHRvclxuX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gW107XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uaHUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYgPSAoKSA9PiAoXCJtYWluLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzb25cIik7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiZTllOGU2Mzk0MmNlNGE5NDhmMTRcIikiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgY3VycmVudE1vZHVsZURhdGEgPSB7fTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jO1xuXG4vLyBtb2R1bGUgYW5kIHJlcXVpcmUgY3JlYXRpb25cbnZhciBjdXJyZW50Q2hpbGRNb2R1bGU7XG52YXIgY3VycmVudFBhcmVudHMgPSBbXTtcblxuLy8gc3RhdHVzXG52YXIgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzID0gW107XG52YXIgY3VycmVudFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4vLyB3aGlsZSBkb3dubG9hZGluZ1xudmFyIGJsb2NraW5nUHJvbWlzZXM7XG5cbi8vIFRoZSB1cGRhdGUgaW5mb1xudmFyIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzO1xudmFyIHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckQgPSBjdXJyZW50TW9kdWxlRGF0YTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5pLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0dmFyIG1vZHVsZSA9IG9wdGlvbnMubW9kdWxlO1xuXHR2YXIgcmVxdWlyZSA9IGNyZWF0ZVJlcXVpcmUob3B0aW9ucy5yZXF1aXJlLCBvcHRpb25zLmlkKTtcblx0bW9kdWxlLmhvdCA9IGNyZWF0ZU1vZHVsZUhvdE9iamVjdChvcHRpb25zLmlkLCBtb2R1bGUpO1xuXHRtb2R1bGUucGFyZW50cyA9IGN1cnJlbnRQYXJlbnRzO1xuXHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0b3B0aW9ucy5yZXF1aXJlID0gcmVxdWlyZTtcbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMgPSB7fTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1ySSA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlKHJlcXVpcmUsIG1vZHVsZUlkKSB7XG5cdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXHRpZiAoIW1lKSByZXR1cm4gcmVxdWlyZTtcblx0dmFyIGZuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcblx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuXHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcblx0XHRcdFx0dmFyIHBhcmVudHMgPSBpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHM7XG5cdFx0XHRcdGlmIChwYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuXHRcdFx0XHRcdHBhcmVudHMucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcblx0XHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuXHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcblx0XHRcdFx0XHRyZXF1ZXN0ICtcblx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuXHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHQpO1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVpcmUocmVxdWVzdCk7XG5cdH07XG5cdHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiByZXF1aXJlW25hbWVdO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJlcXVpcmVbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXHRmb3IgKHZhciBuYW1lIGluIHJlcXVpcmUpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcXVpcmUsIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihuYW1lKSk7XG5cdFx0fVxuXHR9XG5cdGZuLmUgPSBmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdHJldHVybiB0cmFja0Jsb2NraW5nUHJvbWlzZShyZXF1aXJlLmUoY2h1bmtJZCkpO1xuXHR9O1xuXHRyZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vZHVsZUhvdE9iamVjdChtb2R1bGVJZCwgbWUpIHtcblx0dmFyIF9tYWluID0gY3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZDtcblx0dmFyIGhvdCA9IHtcblx0XHQvLyBwcml2YXRlIHN0dWZmXG5cdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfYWNjZXB0ZWRFcnJvckhhbmRsZXJzOiB7fSxcblx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuXHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuXHRcdF9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLFxuXHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuXHRcdF9tYWluOiBfbWFpbixcblx0XHRfcmVxdWlyZVNlbGY6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gbWUucGFyZW50cy5zbGljZSgpO1xuXHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gX21haW4gPyB1bmRlZmluZWQgOiBtb2R1bGVJZDtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuXHRcdH0sXG5cblx0XHQvLyBNb2R1bGUgQVBJXG5cdFx0YWN0aXZlOiB0cnVlLFxuXHRcdGFjY2VwdDogZnVuY3Rpb24gKGRlcCwgY2FsbGJhY2ssIGVycm9ySGFuZGxlcikge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBbaV1dID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRlY2xpbmU6IGZ1bmN0aW9uIChkZXApIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG5cdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG5cdFx0fSxcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG5cdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cdFx0aW52YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5fc2VsZkludmFsaWRhdGVkID0gdHJ1ZTtcblx0XHRcdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdFx0XHRjYXNlIFwiaWRsZVwiOlxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0XHRjYXNlIFwiY2hlY2tcIjpcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VcIjpcblx0XHRcdFx0Y2FzZSBcImFwcGx5XCI6XG5cdFx0XHRcdFx0KHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyB8fCBbXSkucHVzaChcblx0XHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHQvLyBpZ25vcmUgcmVxdWVzdHMgaW4gZXJyb3Igc3RhdGVzXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIE1hbmFnZW1lbnQgQVBJXG5cdFx0Y2hlY2s6IGhvdENoZWNrLFxuXHRcdGFwcGx5OiBob3RBcHBseSxcblx0XHRzdGF0dXM6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRpZiAoIWwpIHJldHVybiBjdXJyZW50U3RhdHVzO1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0dmFyIGlkeCA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblxuXHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuXHRcdGRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuXHR9O1xuXHRjdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob3Q7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHtcblx0Y3VycmVudFN0YXR1cyA9IG5ld1N0YXR1cztcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG5cdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbn1cblxuZnVuY3Rpb24gdHJhY2tCbG9ja2luZ1Byb21pc2UocHJvbWlzZSkge1xuXHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdHNldFN0YXR1cyhcInByZXBhcmVcIik7XG5cdFx0XHRibG9ja2luZ1Byb21pc2VzLnB1c2gocHJvbWlzZSk7XG5cdFx0XHR3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKSB7XG5cdGlmIChibG9ja2luZ1Byb21pc2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZuKCk7XG5cdHZhciBibG9ja2VyID0gYmxvY2tpbmdQcm9taXNlcztcblx0YmxvY2tpbmdQcm9taXNlcyA9IFtdO1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoYmxvY2tlcikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5T25VcGRhdGUpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG5cdH1cblx0c2V0U3RhdHVzKFwiY2hlY2tcIik7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0oKS50aGVuKGZ1bmN0aW9uICh1cGRhdGUpIHtcblx0XHRpZiAoIXVwZGF0ZSkge1xuXHRcdFx0c2V0U3RhdHVzKGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkgPyBcInJlYWR5XCIgOiBcImlkbGVcIik7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXG5cdFx0dmFyIHVwZGF0ZWRNb2R1bGVzID0gW107XG5cdFx0YmxvY2tpbmdQcm9taXNlcyA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoXG5cdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMpLnJlZHVjZShmdW5jdGlvbiAoXG5cdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRrZXlcblx0XHRcdCkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckNba2V5XShcblx0XHRcdFx0XHR1cGRhdGUuYyxcblx0XHRcdFx0XHR1cGRhdGUucixcblx0XHRcdFx0XHR1cGRhdGUubSxcblx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyxcblx0XHRcdFx0XHR1cGRhdGVkTW9kdWxlc1xuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdFx0XHR9LFxuXHRcdFx0W10pXG5cdFx0KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkoYXBwbHlPblVwZGF0ZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cblx0XHRcdFx0XHRyZXR1cm4gdXBkYXRlZE1vZHVsZXM7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJyZWFkeVwiKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0YXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKTtcblxuXHR2YXIgcmVzdWx0cyA9IGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLm1hcChmdW5jdGlvbiAoaGFuZGxlcikge1xuXHRcdHJldHVybiBoYW5kbGVyKG9wdGlvbnMpO1xuXHR9KTtcblx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSB1bmRlZmluZWQ7XG5cblx0dmFyIGVycm9ycyA9IHJlc3VsdHNcblx0XHQubWFwKGZ1bmN0aW9uIChyKSB7XG5cdFx0XHRyZXR1cm4gci5lcnJvcjtcblx0XHR9KVxuXHRcdC5maWx0ZXIoQm9vbGVhbik7XG5cblx0aWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG5cdFx0c2V0U3RhdHVzKFwiYWJvcnRcIik7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgZXJyb3JzWzBdO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG5cdHNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG5cblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmRpc3Bvc2UpIHJlc3VsdC5kaXNwb3NlKCk7XG5cdH0pO1xuXG5cdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2Vcblx0c2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cblx0dmFyIGVycm9yO1xuXHR2YXIgcmVwb3J0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG5cdH07XG5cblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuYXBwbHkpIHtcblx0XHRcdHZhciBtb2R1bGVzID0gcmVzdWx0LmFwcGx5KHJlcG9ydEVycm9yKTtcblx0XHRcdGlmIChtb2R1bGVzKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKG1vZHVsZXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuXHRpZiAoZXJyb3IpIHtcblx0XHRzZXRTdGF0dXMoXCJmYWlsXCIpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGxpc3QpIHtcblx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRpZiAobGlzdC5pbmRleE9mKG1vZHVsZUlkKSA8IDApIGxpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBsaXN0O1xuXHRcdH0pO1xuXHR9XG5cblx0c2V0U3RhdHVzKFwiaWRsZVwiKTtcblx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xufVxuXG5mdW5jdGlvbiBhcHBseUludmFsaWRhdGVkTW9kdWxlcygpIHtcblx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdGlmICghY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMpIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gdW5kZWZpbmVkO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxudmFyIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3Q7XG52YXIgd2FpdGluZ1VwZGF0ZVJlc29sdmVzID0ge307XG5mdW5jdGlvbiBsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHJlc29sdmU7XG5cdFx0Ly8gc3RhcnQgdXBkYXRlIGNodW5rIGxvYWRpbmdcblx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5odShjaHVua0lkKTtcblx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0XHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZFxuXHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgaG90IHVwZGF0ZSBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCk7XG5cdH0pO1xufVxuXG5zZWxmW1wid2VicGFja0hvdFVwZGF0ZXN3aW1taW5nX2dlbmVyYXRvclwiXSA9IChjaHVua0lkLCBtb3JlTW9kdWxlcywgcnVudGltZSkgPT4ge1xuXHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0aWYoY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCkgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgY3VycmVudFVwZGF0ZVJ1bnRpbWUucHVzaChydW50aW1lKTtcblx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKCk7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHR9XG59O1xuXG52YXIgY3VycmVudFVwZGF0ZUNodW5rcztcbnZhciBjdXJyZW50VXBkYXRlO1xudmFyIGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGVSdW50aW1lO1xuZnVuY3Rpb24gYXBwbHlIYW5kbGVyKG9wdGlvbnMpIHtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikgZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtcjtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHVuZGVmaW5lZDtcblx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKHVwZGF0ZU1vZHVsZUlkKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG5cdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cblx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y2hhaW46IFtpZF0sXG5cdFx0XHRcdGlkOiBpZFxuXHRcdFx0fTtcblx0XHR9KTtcblx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuXHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuXHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCFtb2R1bGUgfHxcblx0XHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCAmJiAhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkKVxuXHRcdFx0KVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG5cdFx0XHRcdHZhciBwYXJlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbcGFyZW50SWRdO1xuXHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG5cdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcblx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcblx0XHRcdFx0cXVldWUucHVzaCh7XG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRpZDogcGFyZW50SWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcblx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcblx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuXHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gYltpXTtcblx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcblx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuXHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG5cdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUobW9kdWxlKSB7XG5cdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyBtb2R1bGUuaWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcblx0XHQpO1xuXHR9O1xuXG5cdGZvciAodmFyIG1vZHVsZUlkIGluIGN1cnJlbnRVcGRhdGUpIHtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdFx0dmFyIG5ld01vZHVsZUZhY3RvcnkgPSBjdXJyZW50VXBkYXRlW21vZHVsZUlkXTtcblx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cblx0XHRcdHZhciByZXN1bHQ7XG5cdFx0XHRpZiAobmV3TW9kdWxlRmFjdG9yeSkge1xuXHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMobW9kdWxlSWQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0ID0ge1xuXHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG5cdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcblx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcblx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuXHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuXHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGVycm9yOiBhYm9ydEVycm9yXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9BcHBseSkge1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IG5ld01vZHVsZUZhY3Rvcnk7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG5cdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcblx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRjdXJyZW50VXBkYXRlID0gdW5kZWZpbmVkO1xuXG5cdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cblx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuXHRmb3IgKHZhciBqID0gMDsgaiA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGorKykge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2pdO1xuXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0aWYgKFxuXHRcdFx0bW9kdWxlICYmXG5cdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkIHx8IG1vZHVsZS5ob3QuX21haW4pICYmXG5cdFx0XHQvLyByZW1vdmVkIHNlbGYtYWNjZXB0ZWQgbW9kdWxlcyBzaG91bGQgbm90IGJlIHJlcXVpcmVkXG5cdFx0XHRhcHBsaWVkVXBkYXRlW291dGRhdGVkTW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmUgJiZcblx0XHRcdC8vIHdoZW4gY2FsbGVkIGludmFsaWRhdGUgc2VsZi1hY2NlcHRpbmcgaXMgbm90IHBvc3NpYmxlXG5cdFx0XHQhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkXG5cdFx0KSB7XG5cdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG5cdFx0XHRcdG1vZHVsZTogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0cmVxdWlyZTogbW9kdWxlLmhvdC5fcmVxdWlyZVNlbGYsXG5cdFx0XHRcdGVycm9ySGFuZGxlcjogbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG5cblx0cmV0dXJuIHtcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHR9KTtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gdW5kZWZpbmVkO1xuXG5cdFx0XHR2YXIgaWR4O1xuXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG5cdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcblx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuXHRcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0ZGlzcG9zZUhhbmRsZXJzW2pdLmNhbGwobnVsbCwgZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJEW21vZHVsZUlkXSA9IGRhdGE7XG5cblx0XHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcblx0XHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcblx0XHRcdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgY2hpbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcblx0XHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuXHRcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuXHRcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cblx0XHRcdHZhciBkZXBlbmRlbmN5O1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXBwbHk6IGZ1bmN0aW9uIChyZXBvcnRFcnJvcikge1xuXHRcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG5cdFx0XHRmb3IgKHZhciB1cGRhdGVNb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oYXBwbGllZFVwZGF0ZSwgdXBkYXRlTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW3VwZGF0ZU1vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJ1biBuZXcgcnVudGltZSBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRVcGRhdGVSdW50aW1lLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lW2ldKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdHZhciBhY2NlcHRDYWxsYmFjayA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXIgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0aWYgKGFjY2VwdENhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGFjY2VwdENhbGxiYWNrKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGFjY2VwdENhbGxiYWNrKTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzLnB1c2goZXJyb3JIYW5kbGVyKTtcblx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MucHVzaChkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBjYWxsYmFja3MubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3Nba10uY2FsbChudWxsLCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgZXJyb3JIYW5kbGVyc1trXSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzW2tdKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIG8gPSAwOyBvIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgbysrKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW29dO1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpdGVtLnJlcXVpcmUobW9kdWxlSWQpO1xuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGU6IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9XG5cdH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkuanNvbnAgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGFwcGx5SGFuZGxlcnMpIHtcblx0aWYgKCFjdXJyZW50VXBkYXRlKSB7XG5cdFx0Y3VycmVudFVwZGF0ZSA9IHt9O1xuXHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSBbXTtcblx0XHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0fVxuXHRpZiAoIV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF07XG5cdH1cbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMuanNvbnAgPSBmdW5jdGlvbiAoXG5cdGNodW5rSWRzLFxuXHRyZW1vdmVkQ2h1bmtzLFxuXHRyZW1vdmVkTW9kdWxlcyxcblx0cHJvbWlzZXMsXG5cdGFwcGx5SGFuZGxlcnMsXG5cdHVwZGF0ZWRNb2R1bGVzTGlzdFxuKSB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0ge307XG5cdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gcmVtb3ZlZENodW5rcztcblx0Y3VycmVudFVwZGF0ZSA9IHJlbW92ZWRNb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcblx0XHRvYmpba2V5XSA9IGZhbHNlO1xuXHRcdHJldHVybiBvYmo7XG5cdH0sIHt9KTtcblx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0Y2h1bmtJZHMuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdGlmIChcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdCkge1xuXHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHR9XG5cdH0pO1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yID0gZnVuY3Rpb24gKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3MgJiZcblx0XHRcdFx0IV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdFx0KSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpKTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNID0gKCkgPT4ge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0aWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuXHRcdGlmKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHVwZGF0ZSBtYW5pZmVzdCBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0pO1xufTtcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTc5KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=